// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Login.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IM.Login {

  /// <summary>Holder for reflection information generated from IM.Login.proto</summary>
  public static partial class IMLoginReflection {

    #region Descriptor
    /// <summary>File descriptor for IM.Login.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IMLoginReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5JTS5Mb2dpbi5wcm90bxIISU0uTG9naW4aE0lNLkJhc2VEZWZpbmUucHJv",
            "dG8iDgoMSU1Nc2dTZXJ2UmVxInEKDElNTXNnU2VydlJzcBIuCgtyZXN1bHRf",
            "Y29kZRgBIAEoDjIZLklNLkJhc2VEZWZpbmUuUmVzdWx0VHlwZRIQCghwcmlv",
            "cl9pcBgCIAEoCRIRCgliYWNraXBfaXAYAyABKAkSDAoEcG9ydBgEIAEoDSKt",
            "AQoKSU1Mb2dpblJlcRIRCgl1c2VyX25hbWUYASABKAkSEAoIcGFzc3dvcmQY",
            "AiABKAkSMgoNb25saW5lX3N0YXR1cxgDIAEoDjIbLklNLkJhc2VEZWZpbmUu",
            "VXNlclN0YXRUeXBlEi4KC2NsaWVudF90eXBlGAQgASgOMhkuSU0uQmFzZURl",
            "ZmluZS5DbGllbnRUeXBlEhYKDmNsaWVudF92ZXJzaW9uGAUgASgJIsgBCgpJ",
            "TUxvZ2luUmVzEhMKC3NlcnZlcl90aW1lGAEgASgNEi4KC3Jlc3VsdF9jb2Rl",
            "GAIgASgOMhkuSU0uQmFzZURlZmluZS5SZXN1bHRUeXBlEhUKDXJlc3VsdF9z",
            "dHJpbmcYAyABKAkSMgoNb25saW5lX3N0YXR1cxgEIAEoDjIbLklNLkJhc2VE",
            "ZWZpbmUuVXNlclN0YXRUeXBlEioKCXVzZXJfaW5mbxgFIAEoCzIXLklNLkJh",
            "c2VEZWZpbmUuVXNlckluZm8iDQoLSU1Mb2dvdXRSZXEiIgoLSU1Mb2dvdXRS",
            "c3ASEwoLcmVzdWx0X2NvZGUYASABKA0iUQoKSU1LaWNrVXNlchIPCgd1c2Vy",
            "X2lkGAEgASgEEjIKC2tpY2tfcmVhc29uGAIgASgOMh0uSU0uQmFzZURlZmlu",
            "ZS5LaWNrUmVhc29uVHlwZSJ+ChBJTURldmljZVRva2VuUmVxEg8KB3VzZXJf",
            "aWQYASABKAQSFAoMZGV2aWNlX3Rva2VuGAIgASgJEi4KC2NsaWVudF90eXBl",
            "GAMgASgOMhkuSU0uQmFzZURlZmluZS5DbGllbnRUeXBlEhMKC2F0dGFjaF9k",
            "YXRhGBQgASgMIjgKEElNRGV2aWNlVG9rZW5Sc3ASDwoHdXNlcl9pZBgBIAEo",
            "BBITCgthdHRhY2hfZGF0YRgUIAEoDCIkChFJTUtpY2tQQ0NsaWVudFJlcRIP",
            "Cgd1c2VyX2lkGAEgASgEIjkKEUlNS2lja1BDQ2xpZW50UnNwEg8KB3VzZXJf",
            "aWQYASABKAQSEwoLcmVzdWx0X2NvZGUYAiABKA0iTgoPSU1QdXNoU2hpZWxk",
            "UmVxEg8KB3VzZXJfaWQYASABKAQSFQoNc2hpZWxkX3N0YXR1cxgCIAEoDRIT",
            "CgthdHRhY2hfZGF0YRgUIAEoDCJjCg9JTVB1c2hTaGllbGRSc3ASDwoHdXNl",
            "cl9pZBgBIAEoBBITCgtyZXN1bHRfY29kZRgCIAEoDRIVCg1zaGllbGRfc3Rh",
            "dHVzGAMgASgNEhMKC2F0dGFjaF9kYXRhGBQgASgMIjwKFElNUXVlcnlQdXNo",
            "U2hpZWxkUmVxEg8KB3VzZXJfaWQYASABKAQSEwoLYXR0YWNoX2RhdGEYFCAB",
            "KAwiaAoUSU1RdWVyeVB1c2hTaGllbGRSc3ASDwoHdXNlcl9pZBgBIAEoBBIT",
            "CgtyZXN1bHRfY29kZRgCIAEoDRIVCg1zaGllbGRfc3RhdHVzGAMgASgNEhMK",
            "C2F0dGFjaF9kYXRhGBQgASgMQiIKHmNvbS5ibHQudGFsay5jb21tb24uY29k",
            "ZS5wcm90b0gDYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::IM.BaseDefine.IMBaseDefineReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Login.IMMsgServReq), global::IM.Login.IMMsgServReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Login.IMMsgServRsp), global::IM.Login.IMMsgServRsp.Parser, new[]{ "ResultCode", "PriorIp", "BackipIp", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Login.IMLoginReq), global::IM.Login.IMLoginReq.Parser, new[]{ "UserName", "Password", "OnlineStatus", "ClientType", "ClientVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Login.IMLoginRes), global::IM.Login.IMLoginRes.Parser, new[]{ "ServerTime", "ResultCode", "ResultString", "OnlineStatus", "UserInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Login.IMLogoutReq), global::IM.Login.IMLogoutReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Login.IMLogoutRsp), global::IM.Login.IMLogoutRsp.Parser, new[]{ "ResultCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Login.IMKickUser), global::IM.Login.IMKickUser.Parser, new[]{ "UserId", "KickReason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Login.IMDeviceTokenReq), global::IM.Login.IMDeviceTokenReq.Parser, new[]{ "UserId", "DeviceToken", "ClientType", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Login.IMDeviceTokenRsp), global::IM.Login.IMDeviceTokenRsp.Parser, new[]{ "UserId", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Login.IMKickPCClientReq), global::IM.Login.IMKickPCClientReq.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Login.IMKickPCClientRsp), global::IM.Login.IMKickPCClientRsp.Parser, new[]{ "UserId", "ResultCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Login.IMPushShieldReq), global::IM.Login.IMPushShieldReq.Parser, new[]{ "UserId", "ShieldStatus", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Login.IMPushShieldRsp), global::IM.Login.IMPushShieldRsp.Parser, new[]{ "UserId", "ResultCode", "ShieldStatus", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Login.IMQueryPushShieldReq), global::IM.Login.IMQueryPushShieldReq.Parser, new[]{ "UserId", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Login.IMQueryPushShieldRsp), global::IM.Login.IMQueryPushShieldRsp.Parser, new[]{ "UserId", "ResultCode", "ShieldStatus", "AttachData" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///cmd id:		0x0101
  /// </summary>
  public sealed partial class IMMsgServReq : pb::IMessage<IMMsgServReq> {
    private static readonly pb::MessageParser<IMMsgServReq> _parser = new pb::MessageParser<IMMsgServReq>(() => new IMMsgServReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMMsgServReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Login.IMLoginReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMMsgServReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMMsgServReq(IMMsgServReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMMsgServReq Clone() {
      return new IMMsgServReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMMsgServReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMMsgServReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMMsgServReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class IMMsgServRsp : pb::IMessage<IMMsgServRsp> {
    private static readonly pb::MessageParser<IMMsgServRsp> _parser = new pb::MessageParser<IMMsgServRsp>(() => new IMMsgServRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMMsgServRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Login.IMLoginReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMMsgServRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMMsgServRsp(IMMsgServRsp other) : this() {
      resultCode_ = other.resultCode_;
      priorIp_ = other.priorIp_;
      backipIp_ = other.backipIp_;
      port_ = other.port_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMMsgServRsp Clone() {
      return new IMMsgServRsp(this);
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 1;
    private global::IM.BaseDefine.ResultType resultCode_ = 0;
    /// <summary>
    ///cmd id:		0x0102
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.ResultType ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "prior_ip" field.</summary>
    public const int PriorIpFieldNumber = 2;
    private string priorIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PriorIp {
      get { return priorIp_; }
      set {
        priorIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "backip_ip" field.</summary>
    public const int BackipIpFieldNumber = 3;
    private string backipIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BackipIp {
      get { return backipIp_; }
      set {
        backipIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 4;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMMsgServRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMMsgServRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResultCode != other.ResultCode) return false;
      if (PriorIp != other.PriorIp) return false;
      if (BackipIp != other.BackipIp) return false;
      if (Port != other.Port) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (PriorIp.Length != 0) hash ^= PriorIp.GetHashCode();
      if (BackipIp.Length != 0) hash ^= BackipIp.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResultCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ResultCode);
      }
      if (PriorIp.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PriorIp);
      }
      if (BackipIp.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BackipIp);
      }
      if (Port != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Port);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResultCode);
      }
      if (PriorIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PriorIp);
      }
      if (BackipIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BackipIp);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMMsgServRsp other) {
      if (other == null) {
        return;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.PriorIp.Length != 0) {
        PriorIp = other.PriorIp;
      }
      if (other.BackipIp.Length != 0) {
        BackipIp = other.BackipIp;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            resultCode_ = (global::IM.BaseDefine.ResultType) input.ReadEnum();
            break;
          }
          case 18: {
            PriorIp = input.ReadString();
            break;
          }
          case 26: {
            BackipIp = input.ReadString();
            break;
          }
          case 32: {
            Port = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMLoginReq : pb::IMessage<IMLoginReq> {
    private static readonly pb::MessageParser<IMLoginReq> _parser = new pb::MessageParser<IMLoginReq>(() => new IMLoginReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMLoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Login.IMLoginReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMLoginReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMLoginReq(IMLoginReq other) : this() {
      userName_ = other.userName_;
      password_ = other.password_;
      onlineStatus_ = other.onlineStatus_;
      clientType_ = other.clientType_;
      clientVersion_ = other.clientVersion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMLoginReq Clone() {
      return new IMLoginReq(this);
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    /// <summary>
    ///cmd id:		0x0103
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "online_status" field.</summary>
    public const int OnlineStatusFieldNumber = 3;
    private global::IM.BaseDefine.UserStatType onlineStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.UserStatType OnlineStatus {
      get { return onlineStatus_; }
      set {
        onlineStatus_ = value;
      }
    }

    /// <summary>Field number for the "client_type" field.</summary>
    public const int ClientTypeFieldNumber = 4;
    private global::IM.BaseDefine.ClientType clientType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.ClientType ClientType {
      get { return clientType_; }
      set {
        clientType_ = value;
      }
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 5;
    private string clientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMLoginReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMLoginReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (Password != other.Password) return false;
      if (OnlineStatus != other.OnlineStatus) return false;
      if (ClientType != other.ClientType) return false;
      if (ClientVersion != other.ClientVersion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (OnlineStatus != 0) hash ^= OnlineStatus.GetHashCode();
      if (ClientType != 0) hash ^= ClientType.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (OnlineStatus != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) OnlineStatus);
      }
      if (ClientType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ClientType);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ClientVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (OnlineStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OnlineStatus);
      }
      if (ClientType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClientType);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMLoginReq other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.OnlineStatus != 0) {
        OnlineStatus = other.OnlineStatus;
      }
      if (other.ClientType != 0) {
        ClientType = other.ClientType;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 24: {
            onlineStatus_ = (global::IM.BaseDefine.UserStatType) input.ReadEnum();
            break;
          }
          case 32: {
            clientType_ = (global::IM.BaseDefine.ClientType) input.ReadEnum();
            break;
          }
          case 42: {
            ClientVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMLoginRes : pb::IMessage<IMLoginRes> {
    private static readonly pb::MessageParser<IMLoginRes> _parser = new pb::MessageParser<IMLoginRes>(() => new IMLoginRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMLoginRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Login.IMLoginReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMLoginRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMLoginRes(IMLoginRes other) : this() {
      serverTime_ = other.serverTime_;
      resultCode_ = other.resultCode_;
      resultString_ = other.resultString_;
      onlineStatus_ = other.onlineStatus_;
      UserInfo = other.userInfo_ != null ? other.UserInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMLoginRes Clone() {
      return new IMLoginRes(this);
    }

    /// <summary>Field number for the "server_time" field.</summary>
    public const int ServerTimeFieldNumber = 1;
    private uint serverTime_;
    /// <summary>
    ///cmd id:		0x0104
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 2;
    private global::IM.BaseDefine.ResultType resultCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.ResultType ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "result_string" field.</summary>
    public const int ResultStringFieldNumber = 3;
    private string resultString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResultString {
      get { return resultString_; }
      set {
        resultString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "online_status" field.</summary>
    public const int OnlineStatusFieldNumber = 4;
    private global::IM.BaseDefine.UserStatType onlineStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.UserStatType OnlineStatus {
      get { return onlineStatus_; }
      set {
        onlineStatus_ = value;
      }
    }

    /// <summary>Field number for the "user_info" field.</summary>
    public const int UserInfoFieldNumber = 5;
    private global::IM.BaseDefine.UserInfo userInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.UserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMLoginRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMLoginRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerTime != other.ServerTime) return false;
      if (ResultCode != other.ResultCode) return false;
      if (ResultString != other.ResultString) return false;
      if (OnlineStatus != other.OnlineStatus) return false;
      if (!object.Equals(UserInfo, other.UserInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerTime != 0) hash ^= ServerTime.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (ResultString.Length != 0) hash ^= ResultString.GetHashCode();
      if (OnlineStatus != 0) hash ^= OnlineStatus.GetHashCode();
      if (userInfo_ != null) hash ^= UserInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerTime);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ResultCode);
      }
      if (ResultString.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ResultString);
      }
      if (OnlineStatus != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) OnlineStatus);
      }
      if (userInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UserInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerTime);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResultCode);
      }
      if (ResultString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResultString);
      }
      if (OnlineStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OnlineStatus);
      }
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMLoginRes other) {
      if (other == null) {
        return;
      }
      if (other.ServerTime != 0) {
        ServerTime = other.ServerTime;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.ResultString.Length != 0) {
        ResultString = other.ResultString;
      }
      if (other.OnlineStatus != 0) {
        OnlineStatus = other.OnlineStatus;
      }
      if (other.userInfo_ != null) {
        if (userInfo_ == null) {
          userInfo_ = new global::IM.BaseDefine.UserInfo();
        }
        UserInfo.MergeFrom(other.UserInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerTime = input.ReadUInt32();
            break;
          }
          case 16: {
            resultCode_ = (global::IM.BaseDefine.ResultType) input.ReadEnum();
            break;
          }
          case 26: {
            ResultString = input.ReadString();
            break;
          }
          case 32: {
            onlineStatus_ = (global::IM.BaseDefine.UserStatType) input.ReadEnum();
            break;
          }
          case 42: {
            if (userInfo_ == null) {
              userInfo_ = new global::IM.BaseDefine.UserInfo();
            }
            input.ReadMessage(userInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///cmd id:		0x0105
  /// </summary>
  public sealed partial class IMLogoutReq : pb::IMessage<IMLogoutReq> {
    private static readonly pb::MessageParser<IMLogoutReq> _parser = new pb::MessageParser<IMLogoutReq>(() => new IMLogoutReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMLogoutReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Login.IMLoginReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMLogoutReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMLogoutReq(IMLogoutReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMLogoutReq Clone() {
      return new IMLogoutReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMLogoutReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMLogoutReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMLogoutReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class IMLogoutRsp : pb::IMessage<IMLogoutRsp> {
    private static readonly pb::MessageParser<IMLogoutRsp> _parser = new pb::MessageParser<IMLogoutRsp>(() => new IMLogoutRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMLogoutRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Login.IMLoginReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMLogoutRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMLogoutRsp(IMLogoutRsp other) : this() {
      resultCode_ = other.resultCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMLogoutRsp Clone() {
      return new IMLogoutRsp(this);
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 1;
    private uint resultCode_;
    /// <summary>
    ///cmd id:		0x0106
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMLogoutRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMLogoutRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResultCode != other.ResultCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResultCode != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ResultCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMLogoutRsp other) {
      if (other == null) {
        return;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ResultCode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMKickUser : pb::IMessage<IMKickUser> {
    private static readonly pb::MessageParser<IMKickUser> _parser = new pb::MessageParser<IMKickUser>(() => new IMKickUser());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMKickUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Login.IMLoginReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMKickUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMKickUser(IMKickUser other) : this() {
      userId_ = other.userId_;
      kickReason_ = other.kickReason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMKickUser Clone() {
      return new IMKickUser(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x0107
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "kick_reason" field.</summary>
    public const int KickReasonFieldNumber = 2;
    private global::IM.BaseDefine.KickReasonType kickReason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.KickReasonType KickReason {
      get { return kickReason_; }
      set {
        kickReason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMKickUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMKickUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (KickReason != other.KickReason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (KickReason != 0) hash ^= KickReason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (KickReason != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) KickReason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (KickReason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) KickReason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMKickUser other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.KickReason != 0) {
        KickReason = other.KickReason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            kickReason_ = (global::IM.BaseDefine.KickReasonType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMDeviceTokenReq : pb::IMessage<IMDeviceTokenReq> {
    private static readonly pb::MessageParser<IMDeviceTokenReq> _parser = new pb::MessageParser<IMDeviceTokenReq>(() => new IMDeviceTokenReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMDeviceTokenReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Login.IMLoginReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMDeviceTokenReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMDeviceTokenReq(IMDeviceTokenReq other) : this() {
      userId_ = other.userId_;
      deviceToken_ = other.deviceToken_;
      clientType_ = other.clientType_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMDeviceTokenReq Clone() {
      return new IMDeviceTokenReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x0108
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "device_token" field.</summary>
    public const int DeviceTokenFieldNumber = 2;
    private string deviceToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceToken {
      get { return deviceToken_; }
      set {
        deviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_type" field.</summary>
    public const int ClientTypeFieldNumber = 3;
    private global::IM.BaseDefine.ClientType clientType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.ClientType ClientType {
      get { return clientType_; }
      set {
        clientType_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMDeviceTokenReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMDeviceTokenReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (DeviceToken != other.DeviceToken) return false;
      if (ClientType != other.ClientType) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (DeviceToken.Length != 0) hash ^= DeviceToken.GetHashCode();
      if (ClientType != 0) hash ^= ClientType.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (DeviceToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceToken);
      }
      if (ClientType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ClientType);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (DeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceToken);
      }
      if (ClientType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClientType);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMDeviceTokenReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.DeviceToken.Length != 0) {
        DeviceToken = other.DeviceToken;
      }
      if (other.ClientType != 0) {
        ClientType = other.ClientType;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 18: {
            DeviceToken = input.ReadString();
            break;
          }
          case 24: {
            clientType_ = (global::IM.BaseDefine.ClientType) input.ReadEnum();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMDeviceTokenRsp : pb::IMessage<IMDeviceTokenRsp> {
    private static readonly pb::MessageParser<IMDeviceTokenRsp> _parser = new pb::MessageParser<IMDeviceTokenRsp>(() => new IMDeviceTokenRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMDeviceTokenRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Login.IMLoginReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMDeviceTokenRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMDeviceTokenRsp(IMDeviceTokenRsp other) : this() {
      userId_ = other.userId_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMDeviceTokenRsp Clone() {
      return new IMDeviceTokenRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id: 		0x0109
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMDeviceTokenRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMDeviceTokenRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMDeviceTokenRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///只给移动端请求
  /// </summary>
  public sealed partial class IMKickPCClientReq : pb::IMessage<IMKickPCClientReq> {
    private static readonly pb::MessageParser<IMKickPCClientReq> _parser = new pb::MessageParser<IMKickPCClientReq>(() => new IMKickPCClientReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMKickPCClientReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Login.IMLoginReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMKickPCClientReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMKickPCClientReq(IMKickPCClientReq other) : this() {
      userId_ = other.userId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMKickPCClientReq Clone() {
      return new IMKickPCClientReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x010a
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMKickPCClientReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMKickPCClientReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMKickPCClientReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMKickPCClientRsp : pb::IMessage<IMKickPCClientRsp> {
    private static readonly pb::MessageParser<IMKickPCClientRsp> _parser = new pb::MessageParser<IMKickPCClientRsp>(() => new IMKickPCClientRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMKickPCClientRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Login.IMLoginReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMKickPCClientRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMKickPCClientRsp(IMKickPCClientRsp other) : this() {
      userId_ = other.userId_;
      resultCode_ = other.resultCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMKickPCClientRsp Clone() {
      return new IMKickPCClientRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id: 		0x010b
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 2;
    private uint resultCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMKickPCClientRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMKickPCClientRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ResultCode != other.ResultCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ResultCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMKickPCClientRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            ResultCode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 一旦设置以后，22:00 -- 07:00不发送
  /// </summary>
  public sealed partial class IMPushShieldReq : pb::IMessage<IMPushShieldReq> {
    private static readonly pb::MessageParser<IMPushShieldReq> _parser = new pb::MessageParser<IMPushShieldReq>(() => new IMPushShieldReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMPushShieldReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Login.IMLoginReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMPushShieldReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMPushShieldReq(IMPushShieldReq other) : this() {
      userId_ = other.userId_;
      shieldStatus_ = other.shieldStatus_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMPushShieldReq Clone() {
      return new IMPushShieldReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:			0x010c
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "shield_status" field.</summary>
    public const int ShieldStatusFieldNumber = 2;
    private uint shieldStatus_;
    /// <summary>
    /// 1:开启，0：关闭
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShieldStatus {
      get { return shieldStatus_; }
      set {
        shieldStatus_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    /// <summary>
    /// 服务端用，客户端不用设置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMPushShieldReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMPushShieldReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ShieldStatus != other.ShieldStatus) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (ShieldStatus != 0) hash ^= ShieldStatus.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (ShieldStatus != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ShieldStatus);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (ShieldStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShieldStatus);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMPushShieldReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.ShieldStatus != 0) {
        ShieldStatus = other.ShieldStatus;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            ShieldStatus = input.ReadUInt32();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMPushShieldRsp : pb::IMessage<IMPushShieldRsp> {
    private static readonly pb::MessageParser<IMPushShieldRsp> _parser = new pb::MessageParser<IMPushShieldRsp>(() => new IMPushShieldRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMPushShieldRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Login.IMLoginReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMPushShieldRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMPushShieldRsp(IMPushShieldRsp other) : this() {
      userId_ = other.userId_;
      resultCode_ = other.resultCode_;
      shieldStatus_ = other.shieldStatus_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMPushShieldRsp Clone() {
      return new IMPushShieldRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:			0x010d
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 2;
    private uint resultCode_;
    /// <summary>
    /// 值： 0:successed 1:failed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "shield_status" field.</summary>
    public const int ShieldStatusFieldNumber = 3;
    private uint shieldStatus_;
    /// <summary>
    /// 值： 如果result_code值为0(successed)，则shield_status值设置， 1:开启， 0:关闭
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShieldStatus {
      get { return shieldStatus_; }
      set {
        shieldStatus_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    /// <summary>
    /// 服务端用，客户端不用设置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMPushShieldRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMPushShieldRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ResultCode != other.ResultCode) return false;
      if (ShieldStatus != other.ShieldStatus) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (ShieldStatus != 0) hash ^= ShieldStatus.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ResultCode);
      }
      if (ShieldStatus != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ShieldStatus);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultCode);
      }
      if (ShieldStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShieldStatus);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMPushShieldRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.ShieldStatus != 0) {
        ShieldStatus = other.ShieldStatus;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            ResultCode = input.ReadUInt32();
            break;
          }
          case 24: {
            ShieldStatus = input.ReadUInt32();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 如果用户重新安装app，第一次启动登录成功后，app主动查询
  /// 服务端返回IMQueryPushShieldRsp
  /// </summary>
  public sealed partial class IMQueryPushShieldReq : pb::IMessage<IMQueryPushShieldReq> {
    private static readonly pb::MessageParser<IMQueryPushShieldReq> _parser = new pb::MessageParser<IMQueryPushShieldReq>(() => new IMQueryPushShieldReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMQueryPushShieldReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Login.IMLoginReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMQueryPushShieldReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMQueryPushShieldReq(IMQueryPushShieldReq other) : this() {
      userId_ = other.userId_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMQueryPushShieldReq Clone() {
      return new IMQueryPushShieldReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:			0x010e
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    /// <summary>
    /// 服务端用，客户端不用设置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMQueryPushShieldReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMQueryPushShieldReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMQueryPushShieldReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMQueryPushShieldRsp : pb::IMessage<IMQueryPushShieldRsp> {
    private static readonly pb::MessageParser<IMQueryPushShieldRsp> _parser = new pb::MessageParser<IMQueryPushShieldRsp>(() => new IMQueryPushShieldRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMQueryPushShieldRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Login.IMLoginReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMQueryPushShieldRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMQueryPushShieldRsp(IMQueryPushShieldRsp other) : this() {
      userId_ = other.userId_;
      resultCode_ = other.resultCode_;
      shieldStatus_ = other.shieldStatus_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMQueryPushShieldRsp Clone() {
      return new IMQueryPushShieldRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:			0x010f
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 2;
    private uint resultCode_;
    /// <summary>
    /// 值： 0:successed 1:failed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "shield_status" field.</summary>
    public const int ShieldStatusFieldNumber = 3;
    private uint shieldStatus_;
    /// <summary>
    /// 值： 如果result_code值为0(successed)，则shield_status值设置， 1:开启， 0:关闭
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShieldStatus {
      get { return shieldStatus_; }
      set {
        shieldStatus_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMQueryPushShieldRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMQueryPushShieldRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ResultCode != other.ResultCode) return false;
      if (ShieldStatus != other.ShieldStatus) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (ShieldStatus != 0) hash ^= ShieldStatus.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ResultCode);
      }
      if (ShieldStatus != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ShieldStatus);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultCode);
      }
      if (ShieldStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShieldStatus);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMQueryPushShieldRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.ShieldStatus != 0) {
        ShieldStatus = other.ShieldStatus;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            ResultCode = input.ReadUInt32();
            break;
          }
          case 24: {
            ShieldStatus = input.ReadUInt32();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
