// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Buddy.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IM.Buddy {

  /// <summary>Holder for reflection information generated from IM.Buddy.proto</summary>
  public static partial class IMBuddyReflection {

    #region Descriptor
    /// <summary>File descriptor for IM.Buddy.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IMBuddyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5JTS5CdWRkeS5wcm90bxIISU0uQnVkZHkaE0lNLkJhc2VEZWZpbmUucHJv",
            "dG8iXQoZSU1SZWNlbnRDb250YWN0U2Vzc2lvblJlcRIPCgd1c2VyX2lkGAEg",
            "ASgEEhoKEmxhdGVzdF91cGRhdGVfdGltZRgCIAEoDRITCgthdHRhY2hfZGF0",
            "YRgUIAEoDCKCAQoZSU1SZWNlbnRDb250YWN0U2Vzc2lvblJzcBIPCgd1c2Vy",
            "X2lkGAEgASgEEj8KFGNvbnRhY3Rfc2Vzc2lvbl9saXN0GAIgAygLMiEuSU0u",
            "QmFzZURlZmluZS5Db250YWN0U2Vzc2lvbkluZm8SEwoLYXR0YWNoX2RhdGEY",
            "FCABKAwiPgoQSU1Vc2VyU3RhdE5vdGlmeRIqCgl1c2VyX3N0YXQYASABKAsy",
            "Fy5JTS5CYXNlRGVmaW5lLlVzZXJTdGF0IkwKDklNVXNlcnNJbmZvUmVxEg8K",
            "B3VzZXJfaWQYASABKAQSFAoMdXNlcl9pZF9saXN0GAIgAygEEhMKC2F0dGFj",
            "aF9kYXRhGBQgASgMImcKDklNVXNlcnNJbmZvUnNwEg8KB3VzZXJfaWQYASAB",
            "KAQSLwoOdXNlcl9pbmZvX2xpc3QYAiADKAsyFy5JTS5CYXNlRGVmaW5lLlVz",
            "ZXJJbmZvEhMKC2F0dGFjaF9kYXRhGBQgASgMIoABChJJTVJlbW92ZVNlc3Np",
            "b25SZXESDwoHdXNlcl9pZBgBIAEoBBIwCgxzZXNzaW9uX3R5cGUYAiABKA4y",
            "Gi5JTS5CYXNlRGVmaW5lLlNlc3Npb25UeXBlEhIKCnNlc3Npb25faWQYAyAB",
            "KAQSEwoLYXR0YWNoX2RhdGEYFCABKAwilQEKEklNUmVtb3ZlU2Vzc2lvblJz",
            "cBIPCgd1c2VyX2lkGAEgASgEEhMKC3Jlc3VsdF9jb2RlGAIgASgNEjAKDHNl",
            "c3Npb25fdHlwZRgDIAEoDjIaLklNLkJhc2VEZWZpbmUuU2Vzc2lvblR5cGUS",
            "EgoKc2Vzc2lvbl9pZBgEIAEoBBITCgthdHRhY2hfZGF0YRgUIAEoDCJQCgxJ",
            "TUFsbFVzZXJSZXESDwoHdXNlcl9pZBgBIAEoBBIaChJsYXRlc3RfdXBkYXRl",
            "X3RpbWUYAiABKA0SEwoLYXR0YWNoX2RhdGEYFCABKAwifAoMSU1BbGxVc2Vy",
            "UnNwEg8KB3VzZXJfaWQYASABKAQSGgoSbGF0ZXN0X3VwZGF0ZV90aW1lGAIg",
            "ASgNEioKCXVzZXJfbGlzdBgDIAMoCzIXLklNLkJhc2VEZWZpbmUuVXNlcklu",
            "Zm8SEwoLYXR0YWNoX2RhdGEYFCABKAwiTAoOSU1Vc2Vyc1N0YXRSZXESDwoH",
            "dXNlcl9pZBgBIAEoBBIUCgx1c2VyX2lkX2xpc3QYAiADKAQSEwoLYXR0YWNo",
            "X2RhdGEYFCABKAwiZwoOSU1Vc2Vyc1N0YXRSc3ASDwoHdXNlcl9pZBgBIAEo",
            "BBIvCg51c2VyX3N0YXRfbGlzdBgCIAMoCzIXLklNLkJhc2VEZWZpbmUuVXNl",
            "clN0YXQSEwoLYXR0YWNoX2RhdGEYFCABKAwiTQoRSU1DaGFuZ2VBdmF0YXJS",
            "ZXESDwoHdXNlcl9pZBgBIAEoBBISCgphdmF0YXJfdXJsGAIgASgJEhMKC2F0",
            "dGFjaF9kYXRhGBQgASgMIk4KEUlNQ2hhbmdlQXZhdGFyUnNwEg8KB3VzZXJf",
            "aWQYASABKAQSEwoLcmVzdWx0X2NvZGUYAiABKA0SEwoLYXR0YWNoX2RhdGEY",
            "FCABKAwiWQoVSU1QQ0xvZ2luU3RhdHVzTm90aWZ5Eg8KB3VzZXJfaWQYASAB",
            "KAQSLwoKbG9naW5fc3RhdBgCIAEoDjIbLklNLkJhc2VEZWZpbmUuVXNlclN0",
            "YXRUeXBlIm4KFUlNUmVtb3ZlU2Vzc2lvbk5vdGlmeRIPCgd1c2VyX2lkGAEg",
            "ASgEEjAKDHNlc3Npb25fdHlwZRgCIAEoDjIaLklNLkJhc2VEZWZpbmUuU2Vz",
            "c2lvblR5cGUSEgoKc2Vzc2lvbl9pZBgDIAEoBCJTCg9JTURlcGFydG1lbnRS",
            "ZXESDwoHdXNlcl9pZBgBIAEoBBIaChJsYXRlc3RfdXBkYXRlX3RpbWUYAiAB",
            "KA0SEwoLYXR0YWNoX2RhdGEYFCABKAwigQEKD0lNRGVwYXJ0bWVudFJzcBIP",
            "Cgd1c2VyX2lkGAEgASgEEhoKEmxhdGVzdF91cGRhdGVfdGltZRgCIAEoDRIs",
            "CglkZXB0X2xpc3QYAyADKAsyGS5JTS5CYXNlRGVmaW5lLkRlcGFydEluZm8S",
            "EwoLYXR0YWNoX2RhdGEYFCABKAwiRAoVSU1BdmF0YXJDaGFuZ2VkTm90aWZ5",
            "EhcKD2NoYW5nZWRfdXNlcl9pZBgBIAEoBBISCgphdmF0YXJfdXJsGAIgASgJ",
            "Ik4KE0lNQ2hhbmdlU2lnbkluZm9SZXESDwoHdXNlcl9pZBgBIAEoBBIRCglz",
            "aWduX2luZm8YAiABKAkSEwoLYXR0YWNoX2RhdGEYFCABKAwiYwoTSU1DaGFu",
            "Z2VTaWduSW5mb1JzcBIPCgd1c2VyX2lkGAEgASgEEhMKC3Jlc3VsdF9jb2Rl",
            "GAIgASgNEhEKCXNpZ25faW5mbxgDIAEoCRITCgthdHRhY2hfZGF0YRgUIAEo",
            "DCJFChdJTVNpZ25JbmZvQ2hhbmdlZE5vdGlmeRIXCg9jaGFuZ2VkX3VzZXJf",
            "aWQYASABKAQSEQoJc2lnbl9pbmZvGAIgASgJIpABChNJTUNoYW5nZVVzZXJJ",
            "bmZvUmVxEg8KB3VzZXJfaWQYASABKAQSFQoNdGVsZXBob25lX251bRgCIAEo",
            "CRIVCg1lbWFpbF9hZGRyZXNzGAMgASgJEhEKCXNpZ25faW5mbxgEIAEoCRIS",
            "CgphdmF0YXJfdXJsGAUgASgJEhMKC2F0dGFjaF9kYXRhGBQgASgMIqUBChNJ",
            "TUNoYW5nZVVzZXJJbmZvUnNwEg8KB3VzZXJfaWQYASABKAQSEwoLcmVzdWx0",
            "X2NvZGUYAiABKA0SFQoNdGVsZXBob25lX251bRgDIAEoCRIVCg1lbWFpbF9h",
            "ZGRyZXNzGAQgASgJEhEKCXNpZ25faW5mbxgFIAEoCRISCgphdmF0YXJfdXJs",
            "GAYgASgJEhMKC2F0dGFjaF9kYXRhGBQgASgMIpwBChdJTVVzZXJJbmZvQ2hh",
            "bmdlZE5vdGlmeRIXCg9jaGFuZ2VkX3VzZXJfaWQYASABKAQSEwoLcmVzdWx0",
            "X2NvZGUYAiABKA0SFQoNdGVsZXBob25lX251bRgDIAEoCRIVCg1lbWFpbF9h",
            "ZGRyZXNzGAQgASgJEhEKCXNpZ25faW5mbxgFIAEoCRISCgphdmF0YXJfdXJs",
            "GAYgASgJQiIKHmNvbS5ibHQudGFsay5jb21tb24uY29kZS5wcm90b0gDYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::IM.BaseDefine.IMBaseDefineReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMRecentContactSessionReq), global::IM.Buddy.IMRecentContactSessionReq.Parser, new[]{ "UserId", "LatestUpdateTime", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMRecentContactSessionRsp), global::IM.Buddy.IMRecentContactSessionRsp.Parser, new[]{ "UserId", "ContactSessionList", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMUserStatNotify), global::IM.Buddy.IMUserStatNotify.Parser, new[]{ "UserStat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMUsersInfoReq), global::IM.Buddy.IMUsersInfoReq.Parser, new[]{ "UserId", "UserIdList", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMUsersInfoRsp), global::IM.Buddy.IMUsersInfoRsp.Parser, new[]{ "UserId", "UserInfoList", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMRemoveSessionReq), global::IM.Buddy.IMRemoveSessionReq.Parser, new[]{ "UserId", "SessionType", "SessionId", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMRemoveSessionRsp), global::IM.Buddy.IMRemoveSessionRsp.Parser, new[]{ "UserId", "ResultCode", "SessionType", "SessionId", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMAllUserReq), global::IM.Buddy.IMAllUserReq.Parser, new[]{ "UserId", "LatestUpdateTime", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMAllUserRsp), global::IM.Buddy.IMAllUserRsp.Parser, new[]{ "UserId", "LatestUpdateTime", "UserList", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMUsersStatReq), global::IM.Buddy.IMUsersStatReq.Parser, new[]{ "UserId", "UserIdList", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMUsersStatRsp), global::IM.Buddy.IMUsersStatRsp.Parser, new[]{ "UserId", "UserStatList", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMChangeAvatarReq), global::IM.Buddy.IMChangeAvatarReq.Parser, new[]{ "UserId", "AvatarUrl", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMChangeAvatarRsp), global::IM.Buddy.IMChangeAvatarRsp.Parser, new[]{ "UserId", "ResultCode", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMPCLoginStatusNotify), global::IM.Buddy.IMPCLoginStatusNotify.Parser, new[]{ "UserId", "LoginStat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMRemoveSessionNotify), global::IM.Buddy.IMRemoveSessionNotify.Parser, new[]{ "UserId", "SessionType", "SessionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMDepartmentReq), global::IM.Buddy.IMDepartmentReq.Parser, new[]{ "UserId", "LatestUpdateTime", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMDepartmentRsp), global::IM.Buddy.IMDepartmentRsp.Parser, new[]{ "UserId", "LatestUpdateTime", "DeptList", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMAvatarChangedNotify), global::IM.Buddy.IMAvatarChangedNotify.Parser, new[]{ "ChangedUserId", "AvatarUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMChangeSignInfoReq), global::IM.Buddy.IMChangeSignInfoReq.Parser, new[]{ "UserId", "SignInfo", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMChangeSignInfoRsp), global::IM.Buddy.IMChangeSignInfoRsp.Parser, new[]{ "UserId", "ResultCode", "SignInfo", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMSignInfoChangedNotify), global::IM.Buddy.IMSignInfoChangedNotify.Parser, new[]{ "ChangedUserId", "SignInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMChangeUserInfoReq), global::IM.Buddy.IMChangeUserInfoReq.Parser, new[]{ "UserId", "TelephoneNum", "EmailAddress", "SignInfo", "AvatarUrl", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMChangeUserInfoRsp), global::IM.Buddy.IMChangeUserInfoRsp.Parser, new[]{ "UserId", "ResultCode", "TelephoneNum", "EmailAddress", "SignInfo", "AvatarUrl", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Buddy.IMUserInfoChangedNotify), global::IM.Buddy.IMUserInfoChangedNotify.Parser, new[]{ "ChangedUserId", "ResultCode", "TelephoneNum", "EmailAddress", "SignInfo", "AvatarUrl" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class IMRecentContactSessionReq : pb::IMessage<IMRecentContactSessionReq> {
    private static readonly pb::MessageParser<IMRecentContactSessionReq> _parser = new pb::MessageParser<IMRecentContactSessionReq>(() => new IMRecentContactSessionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMRecentContactSessionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMRecentContactSessionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMRecentContactSessionReq(IMRecentContactSessionReq other) : this() {
      userId_ = other.userId_;
      latestUpdateTime_ = other.latestUpdateTime_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMRecentContactSessionReq Clone() {
      return new IMRecentContactSessionReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x0201
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "latest_update_time" field.</summary>
    public const int LatestUpdateTimeFieldNumber = 2;
    private uint latestUpdateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LatestUpdateTime {
      get { return latestUpdateTime_; }
      set {
        latestUpdateTime_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMRecentContactSessionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMRecentContactSessionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (LatestUpdateTime != other.LatestUpdateTime) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (LatestUpdateTime != 0) hash ^= LatestUpdateTime.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (LatestUpdateTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LatestUpdateTime);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (LatestUpdateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LatestUpdateTime);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMRecentContactSessionReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.LatestUpdateTime != 0) {
        LatestUpdateTime = other.LatestUpdateTime;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            LatestUpdateTime = input.ReadUInt32();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMRecentContactSessionRsp : pb::IMessage<IMRecentContactSessionRsp> {
    private static readonly pb::MessageParser<IMRecentContactSessionRsp> _parser = new pb::MessageParser<IMRecentContactSessionRsp>(() => new IMRecentContactSessionRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMRecentContactSessionRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMRecentContactSessionRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMRecentContactSessionRsp(IMRecentContactSessionRsp other) : this() {
      userId_ = other.userId_;
      contactSessionList_ = other.contactSessionList_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMRecentContactSessionRsp Clone() {
      return new IMRecentContactSessionRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x0202
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "contact_session_list" field.</summary>
    public const int ContactSessionListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::IM.BaseDefine.ContactSessionInfo> _repeated_contactSessionList_codec
        = pb::FieldCodec.ForMessage(18, global::IM.BaseDefine.ContactSessionInfo.Parser);
    private readonly pbc::RepeatedField<global::IM.BaseDefine.ContactSessionInfo> contactSessionList_ = new pbc::RepeatedField<global::IM.BaseDefine.ContactSessionInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IM.BaseDefine.ContactSessionInfo> ContactSessionList {
      get { return contactSessionList_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMRecentContactSessionRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMRecentContactSessionRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if(!contactSessionList_.Equals(other.contactSessionList_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      hash ^= contactSessionList_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      contactSessionList_.WriteTo(output, _repeated_contactSessionList_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      size += contactSessionList_.CalculateSize(_repeated_contactSessionList_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMRecentContactSessionRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      contactSessionList_.Add(other.contactSessionList_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 18: {
            contactSessionList_.AddEntriesFrom(input, _repeated_contactSessionList_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMUserStatNotify : pb::IMessage<IMUserStatNotify> {
    private static readonly pb::MessageParser<IMUserStatNotify> _parser = new pb::MessageParser<IMUserStatNotify>(() => new IMUserStatNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMUserStatNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUserStatNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUserStatNotify(IMUserStatNotify other) : this() {
      UserStat = other.userStat_ != null ? other.UserStat.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUserStatNotify Clone() {
      return new IMUserStatNotify(this);
    }

    /// <summary>Field number for the "user_stat" field.</summary>
    public const int UserStatFieldNumber = 1;
    private global::IM.BaseDefine.UserStat userStat_;
    /// <summary>
    ///cmd id:		0x0203
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.UserStat UserStat {
      get { return userStat_; }
      set {
        userStat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMUserStatNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMUserStatNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserStat, other.UserStat)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userStat_ != null) hash ^= UserStat.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userStat_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserStat);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userStat_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserStat);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMUserStatNotify other) {
      if (other == null) {
        return;
      }
      if (other.userStat_ != null) {
        if (userStat_ == null) {
          userStat_ = new global::IM.BaseDefine.UserStat();
        }
        UserStat.MergeFrom(other.UserStat);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userStat_ == null) {
              userStat_ = new global::IM.BaseDefine.UserStat();
            }
            input.ReadMessage(userStat_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMUsersInfoReq : pb::IMessage<IMUsersInfoReq> {
    private static readonly pb::MessageParser<IMUsersInfoReq> _parser = new pb::MessageParser<IMUsersInfoReq>(() => new IMUsersInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMUsersInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUsersInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUsersInfoReq(IMUsersInfoReq other) : this() {
      userId_ = other.userId_;
      userIdList_ = other.userIdList_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUsersInfoReq Clone() {
      return new IMUsersInfoReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x0204
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "user_id_list" field.</summary>
    public const int UserIdListFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_userIdList_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> userIdList_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> UserIdList {
      get { return userIdList_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMUsersInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMUsersInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if(!userIdList_.Equals(other.userIdList_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      hash ^= userIdList_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      userIdList_.WriteTo(output, _repeated_userIdList_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      size += userIdList_.CalculateSize(_repeated_userIdList_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMUsersInfoReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      userIdList_.Add(other.userIdList_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 18:
          case 16: {
            userIdList_.AddEntriesFrom(input, _repeated_userIdList_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMUsersInfoRsp : pb::IMessage<IMUsersInfoRsp> {
    private static readonly pb::MessageParser<IMUsersInfoRsp> _parser = new pb::MessageParser<IMUsersInfoRsp>(() => new IMUsersInfoRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMUsersInfoRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUsersInfoRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUsersInfoRsp(IMUsersInfoRsp other) : this() {
      userId_ = other.userId_;
      userInfoList_ = other.userInfoList_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUsersInfoRsp Clone() {
      return new IMUsersInfoRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x0205
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "user_info_list" field.</summary>
    public const int UserInfoListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::IM.BaseDefine.UserInfo> _repeated_userInfoList_codec
        = pb::FieldCodec.ForMessage(18, global::IM.BaseDefine.UserInfo.Parser);
    private readonly pbc::RepeatedField<global::IM.BaseDefine.UserInfo> userInfoList_ = new pbc::RepeatedField<global::IM.BaseDefine.UserInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IM.BaseDefine.UserInfo> UserInfoList {
      get { return userInfoList_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMUsersInfoRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMUsersInfoRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if(!userInfoList_.Equals(other.userInfoList_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      hash ^= userInfoList_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      userInfoList_.WriteTo(output, _repeated_userInfoList_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      size += userInfoList_.CalculateSize(_repeated_userInfoList_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMUsersInfoRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      userInfoList_.Add(other.userInfoList_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 18: {
            userInfoList_.AddEntriesFrom(input, _repeated_userInfoList_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMRemoveSessionReq : pb::IMessage<IMRemoveSessionReq> {
    private static readonly pb::MessageParser<IMRemoveSessionReq> _parser = new pb::MessageParser<IMRemoveSessionReq>(() => new IMRemoveSessionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMRemoveSessionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMRemoveSessionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMRemoveSessionReq(IMRemoveSessionReq other) : this() {
      userId_ = other.userId_;
      sessionType_ = other.sessionType_;
      sessionId_ = other.sessionId_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMRemoveSessionReq Clone() {
      return new IMRemoveSessionReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x0206
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "session_type" field.</summary>
    public const int SessionTypeFieldNumber = 2;
    private global::IM.BaseDefine.SessionType sessionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.SessionType SessionType {
      get { return sessionType_; }
      set {
        sessionType_ = value;
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 3;
    private ulong sessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMRemoveSessionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMRemoveSessionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (SessionType != other.SessionType) return false;
      if (SessionId != other.SessionId) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (SessionType != 0) hash ^= SessionType.GetHashCode();
      if (SessionId != 0UL) hash ^= SessionId.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (SessionType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SessionType);
      }
      if (SessionId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SessionId);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (SessionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SessionType);
      }
      if (SessionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SessionId);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMRemoveSessionReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.SessionType != 0) {
        SessionType = other.SessionType;
      }
      if (other.SessionId != 0UL) {
        SessionId = other.SessionId;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            sessionType_ = (global::IM.BaseDefine.SessionType) input.ReadEnum();
            break;
          }
          case 24: {
            SessionId = input.ReadUInt64();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMRemoveSessionRsp : pb::IMessage<IMRemoveSessionRsp> {
    private static readonly pb::MessageParser<IMRemoveSessionRsp> _parser = new pb::MessageParser<IMRemoveSessionRsp>(() => new IMRemoveSessionRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMRemoveSessionRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMRemoveSessionRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMRemoveSessionRsp(IMRemoveSessionRsp other) : this() {
      userId_ = other.userId_;
      resultCode_ = other.resultCode_;
      sessionType_ = other.sessionType_;
      sessionId_ = other.sessionId_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMRemoveSessionRsp Clone() {
      return new IMRemoveSessionRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x0207
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 2;
    private uint resultCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "session_type" field.</summary>
    public const int SessionTypeFieldNumber = 3;
    private global::IM.BaseDefine.SessionType sessionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.SessionType SessionType {
      get { return sessionType_; }
      set {
        sessionType_ = value;
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 4;
    private ulong sessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMRemoveSessionRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMRemoveSessionRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ResultCode != other.ResultCode) return false;
      if (SessionType != other.SessionType) return false;
      if (SessionId != other.SessionId) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (SessionType != 0) hash ^= SessionType.GetHashCode();
      if (SessionId != 0UL) hash ^= SessionId.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ResultCode);
      }
      if (SessionType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) SessionType);
      }
      if (SessionId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(SessionId);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultCode);
      }
      if (SessionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SessionType);
      }
      if (SessionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SessionId);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMRemoveSessionRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.SessionType != 0) {
        SessionType = other.SessionType;
      }
      if (other.SessionId != 0UL) {
        SessionId = other.SessionId;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            ResultCode = input.ReadUInt32();
            break;
          }
          case 24: {
            sessionType_ = (global::IM.BaseDefine.SessionType) input.ReadEnum();
            break;
          }
          case 32: {
            SessionId = input.ReadUInt64();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMAllUserReq : pb::IMessage<IMAllUserReq> {
    private static readonly pb::MessageParser<IMAllUserReq> _parser = new pb::MessageParser<IMAllUserReq>(() => new IMAllUserReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMAllUserReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAllUserReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAllUserReq(IMAllUserReq other) : this() {
      userId_ = other.userId_;
      latestUpdateTime_ = other.latestUpdateTime_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAllUserReq Clone() {
      return new IMAllUserReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x0208
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "latest_update_time" field.</summary>
    public const int LatestUpdateTimeFieldNumber = 2;
    private uint latestUpdateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LatestUpdateTime {
      get { return latestUpdateTime_; }
      set {
        latestUpdateTime_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMAllUserReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMAllUserReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (LatestUpdateTime != other.LatestUpdateTime) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (LatestUpdateTime != 0) hash ^= LatestUpdateTime.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (LatestUpdateTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LatestUpdateTime);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (LatestUpdateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LatestUpdateTime);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMAllUserReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.LatestUpdateTime != 0) {
        LatestUpdateTime = other.LatestUpdateTime;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            LatestUpdateTime = input.ReadUInt32();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMAllUserRsp : pb::IMessage<IMAllUserRsp> {
    private static readonly pb::MessageParser<IMAllUserRsp> _parser = new pb::MessageParser<IMAllUserRsp>(() => new IMAllUserRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMAllUserRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAllUserRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAllUserRsp(IMAllUserRsp other) : this() {
      userId_ = other.userId_;
      latestUpdateTime_ = other.latestUpdateTime_;
      userList_ = other.userList_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAllUserRsp Clone() {
      return new IMAllUserRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x0209
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "latest_update_time" field.</summary>
    public const int LatestUpdateTimeFieldNumber = 2;
    private uint latestUpdateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LatestUpdateTime {
      get { return latestUpdateTime_; }
      set {
        latestUpdateTime_ = value;
      }
    }

    /// <summary>Field number for the "user_list" field.</summary>
    public const int UserListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::IM.BaseDefine.UserInfo> _repeated_userList_codec
        = pb::FieldCodec.ForMessage(26, global::IM.BaseDefine.UserInfo.Parser);
    private readonly pbc::RepeatedField<global::IM.BaseDefine.UserInfo> userList_ = new pbc::RepeatedField<global::IM.BaseDefine.UserInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IM.BaseDefine.UserInfo> UserList {
      get { return userList_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMAllUserRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMAllUserRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (LatestUpdateTime != other.LatestUpdateTime) return false;
      if(!userList_.Equals(other.userList_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (LatestUpdateTime != 0) hash ^= LatestUpdateTime.GetHashCode();
      hash ^= userList_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (LatestUpdateTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LatestUpdateTime);
      }
      userList_.WriteTo(output, _repeated_userList_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (LatestUpdateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LatestUpdateTime);
      }
      size += userList_.CalculateSize(_repeated_userList_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMAllUserRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.LatestUpdateTime != 0) {
        LatestUpdateTime = other.LatestUpdateTime;
      }
      userList_.Add(other.userList_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            LatestUpdateTime = input.ReadUInt32();
            break;
          }
          case 26: {
            userList_.AddEntriesFrom(input, _repeated_userList_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMUsersStatReq : pb::IMessage<IMUsersStatReq> {
    private static readonly pb::MessageParser<IMUsersStatReq> _parser = new pb::MessageParser<IMUsersStatReq>(() => new IMUsersStatReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMUsersStatReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUsersStatReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUsersStatReq(IMUsersStatReq other) : this() {
      userId_ = other.userId_;
      userIdList_ = other.userIdList_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUsersStatReq Clone() {
      return new IMUsersStatReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x020a
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "user_id_list" field.</summary>
    public const int UserIdListFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_userIdList_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> userIdList_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> UserIdList {
      get { return userIdList_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMUsersStatReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMUsersStatReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if(!userIdList_.Equals(other.userIdList_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      hash ^= userIdList_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      userIdList_.WriteTo(output, _repeated_userIdList_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      size += userIdList_.CalculateSize(_repeated_userIdList_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMUsersStatReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      userIdList_.Add(other.userIdList_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 18:
          case 16: {
            userIdList_.AddEntriesFrom(input, _repeated_userIdList_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMUsersStatRsp : pb::IMessage<IMUsersStatRsp> {
    private static readonly pb::MessageParser<IMUsersStatRsp> _parser = new pb::MessageParser<IMUsersStatRsp>(() => new IMUsersStatRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMUsersStatRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUsersStatRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUsersStatRsp(IMUsersStatRsp other) : this() {
      userId_ = other.userId_;
      userStatList_ = other.userStatList_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUsersStatRsp Clone() {
      return new IMUsersStatRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x020b
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "user_stat_list" field.</summary>
    public const int UserStatListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::IM.BaseDefine.UserStat> _repeated_userStatList_codec
        = pb::FieldCodec.ForMessage(18, global::IM.BaseDefine.UserStat.Parser);
    private readonly pbc::RepeatedField<global::IM.BaseDefine.UserStat> userStatList_ = new pbc::RepeatedField<global::IM.BaseDefine.UserStat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IM.BaseDefine.UserStat> UserStatList {
      get { return userStatList_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMUsersStatRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMUsersStatRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if(!userStatList_.Equals(other.userStatList_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      hash ^= userStatList_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      userStatList_.WriteTo(output, _repeated_userStatList_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      size += userStatList_.CalculateSize(_repeated_userStatList_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMUsersStatRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      userStatList_.Add(other.userStatList_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 18: {
            userStatList_.AddEntriesFrom(input, _repeated_userStatList_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMChangeAvatarReq : pb::IMessage<IMChangeAvatarReq> {
    private static readonly pb::MessageParser<IMChangeAvatarReq> _parser = new pb::MessageParser<IMChangeAvatarReq>(() => new IMChangeAvatarReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMChangeAvatarReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMChangeAvatarReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMChangeAvatarReq(IMChangeAvatarReq other) : this() {
      userId_ = other.userId_;
      avatarUrl_ = other.avatarUrl_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMChangeAvatarReq Clone() {
      return new IMChangeAvatarReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x020c
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 2;
    private string avatarUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMChangeAvatarReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMChangeAvatarReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AvatarUrl);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMChangeAvatarReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 18: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMChangeAvatarRsp : pb::IMessage<IMChangeAvatarRsp> {
    private static readonly pb::MessageParser<IMChangeAvatarRsp> _parser = new pb::MessageParser<IMChangeAvatarRsp>(() => new IMChangeAvatarRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMChangeAvatarRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMChangeAvatarRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMChangeAvatarRsp(IMChangeAvatarRsp other) : this() {
      userId_ = other.userId_;
      resultCode_ = other.resultCode_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMChangeAvatarRsp Clone() {
      return new IMChangeAvatarRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x020d
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 2;
    private uint resultCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMChangeAvatarRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMChangeAvatarRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ResultCode != other.ResultCode) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ResultCode);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultCode);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMChangeAvatarRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            ResultCode = input.ReadUInt32();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///只给移动端通知
  /// </summary>
  public sealed partial class IMPCLoginStatusNotify : pb::IMessage<IMPCLoginStatusNotify> {
    private static readonly pb::MessageParser<IMPCLoginStatusNotify> _parser = new pb::MessageParser<IMPCLoginStatusNotify>(() => new IMPCLoginStatusNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMPCLoginStatusNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMPCLoginStatusNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMPCLoginStatusNotify(IMPCLoginStatusNotify other) : this() {
      userId_ = other.userId_;
      loginStat_ = other.loginStat_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMPCLoginStatusNotify Clone() {
      return new IMPCLoginStatusNotify(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x020e
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "login_stat" field.</summary>
    public const int LoginStatFieldNumber = 2;
    private global::IM.BaseDefine.UserStatType loginStat_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.UserStatType LoginStat {
      get { return loginStat_; }
      set {
        loginStat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMPCLoginStatusNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMPCLoginStatusNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (LoginStat != other.LoginStat) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (LoginStat != 0) hash ^= LoginStat.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (LoginStat != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LoginStat);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (LoginStat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginStat);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMPCLoginStatusNotify other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.LoginStat != 0) {
        LoginStat = other.LoginStat;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            loginStat_ = (global::IM.BaseDefine.UserStatType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMRemoveSessionNotify : pb::IMessage<IMRemoveSessionNotify> {
    private static readonly pb::MessageParser<IMRemoveSessionNotify> _parser = new pb::MessageParser<IMRemoveSessionNotify>(() => new IMRemoveSessionNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMRemoveSessionNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMRemoveSessionNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMRemoveSessionNotify(IMRemoveSessionNotify other) : this() {
      userId_ = other.userId_;
      sessionType_ = other.sessionType_;
      sessionId_ = other.sessionId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMRemoveSessionNotify Clone() {
      return new IMRemoveSessionNotify(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x020f
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "session_type" field.</summary>
    public const int SessionTypeFieldNumber = 2;
    private global::IM.BaseDefine.SessionType sessionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.SessionType SessionType {
      get { return sessionType_; }
      set {
        sessionType_ = value;
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 3;
    private ulong sessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMRemoveSessionNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMRemoveSessionNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (SessionType != other.SessionType) return false;
      if (SessionId != other.SessionId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (SessionType != 0) hash ^= SessionType.GetHashCode();
      if (SessionId != 0UL) hash ^= SessionId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (SessionType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SessionType);
      }
      if (SessionId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SessionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (SessionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SessionType);
      }
      if (SessionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SessionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMRemoveSessionNotify other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.SessionType != 0) {
        SessionType = other.SessionType;
      }
      if (other.SessionId != 0UL) {
        SessionId = other.SessionId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            sessionType_ = (global::IM.BaseDefine.SessionType) input.ReadEnum();
            break;
          }
          case 24: {
            SessionId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMDepartmentReq : pb::IMessage<IMDepartmentReq> {
    private static readonly pb::MessageParser<IMDepartmentReq> _parser = new pb::MessageParser<IMDepartmentReq>(() => new IMDepartmentReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMDepartmentReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMDepartmentReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMDepartmentReq(IMDepartmentReq other) : this() {
      userId_ = other.userId_;
      latestUpdateTime_ = other.latestUpdateTime_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMDepartmentReq Clone() {
      return new IMDepartmentReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x0210
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "latest_update_time" field.</summary>
    public const int LatestUpdateTimeFieldNumber = 2;
    private uint latestUpdateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LatestUpdateTime {
      get { return latestUpdateTime_; }
      set {
        latestUpdateTime_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMDepartmentReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMDepartmentReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (LatestUpdateTime != other.LatestUpdateTime) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (LatestUpdateTime != 0) hash ^= LatestUpdateTime.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (LatestUpdateTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LatestUpdateTime);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (LatestUpdateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LatestUpdateTime);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMDepartmentReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.LatestUpdateTime != 0) {
        LatestUpdateTime = other.LatestUpdateTime;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            LatestUpdateTime = input.ReadUInt32();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMDepartmentRsp : pb::IMessage<IMDepartmentRsp> {
    private static readonly pb::MessageParser<IMDepartmentRsp> _parser = new pb::MessageParser<IMDepartmentRsp>(() => new IMDepartmentRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMDepartmentRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMDepartmentRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMDepartmentRsp(IMDepartmentRsp other) : this() {
      userId_ = other.userId_;
      latestUpdateTime_ = other.latestUpdateTime_;
      deptList_ = other.deptList_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMDepartmentRsp Clone() {
      return new IMDepartmentRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x0211
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "latest_update_time" field.</summary>
    public const int LatestUpdateTimeFieldNumber = 2;
    private uint latestUpdateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LatestUpdateTime {
      get { return latestUpdateTime_; }
      set {
        latestUpdateTime_ = value;
      }
    }

    /// <summary>Field number for the "dept_list" field.</summary>
    public const int DeptListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::IM.BaseDefine.DepartInfo> _repeated_deptList_codec
        = pb::FieldCodec.ForMessage(26, global::IM.BaseDefine.DepartInfo.Parser);
    private readonly pbc::RepeatedField<global::IM.BaseDefine.DepartInfo> deptList_ = new pbc::RepeatedField<global::IM.BaseDefine.DepartInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IM.BaseDefine.DepartInfo> DeptList {
      get { return deptList_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMDepartmentRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMDepartmentRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (LatestUpdateTime != other.LatestUpdateTime) return false;
      if(!deptList_.Equals(other.deptList_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (LatestUpdateTime != 0) hash ^= LatestUpdateTime.GetHashCode();
      hash ^= deptList_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (LatestUpdateTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LatestUpdateTime);
      }
      deptList_.WriteTo(output, _repeated_deptList_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (LatestUpdateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LatestUpdateTime);
      }
      size += deptList_.CalculateSize(_repeated_deptList_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMDepartmentRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.LatestUpdateTime != 0) {
        LatestUpdateTime = other.LatestUpdateTime;
      }
      deptList_.Add(other.deptList_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            LatestUpdateTime = input.ReadUInt32();
            break;
          }
          case 26: {
            deptList_.AddEntriesFrom(input, _repeated_deptList_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMAvatarChangedNotify : pb::IMessage<IMAvatarChangedNotify> {
    private static readonly pb::MessageParser<IMAvatarChangedNotify> _parser = new pb::MessageParser<IMAvatarChangedNotify>(() => new IMAvatarChangedNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMAvatarChangedNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAvatarChangedNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAvatarChangedNotify(IMAvatarChangedNotify other) : this() {
      changedUserId_ = other.changedUserId_;
      avatarUrl_ = other.avatarUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAvatarChangedNotify Clone() {
      return new IMAvatarChangedNotify(this);
    }

    /// <summary>Field number for the "changed_user_id" field.</summary>
    public const int ChangedUserIdFieldNumber = 1;
    private ulong changedUserId_;
    /// <summary>
    ///cmd id:		0x02012
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChangedUserId {
      get { return changedUserId_; }
      set {
        changedUserId_ = value;
      }
    }

    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 2;
    private string avatarUrl_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMAvatarChangedNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMAvatarChangedNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChangedUserId != other.ChangedUserId) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChangedUserId != 0UL) hash ^= ChangedUserId.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChangedUserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChangedUserId);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AvatarUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChangedUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChangedUserId);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMAvatarChangedNotify other) {
      if (other == null) {
        return;
      }
      if (other.ChangedUserId != 0UL) {
        ChangedUserId = other.ChangedUserId;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChangedUserId = input.ReadUInt64();
            break;
          }
          case 18: {
            AvatarUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///cmd id:		0x0213
  /// </summary>
  public sealed partial class IMChangeSignInfoReq : pb::IMessage<IMChangeSignInfoReq> {
    private static readonly pb::MessageParser<IMChangeSignInfoReq> _parser = new pb::MessageParser<IMChangeSignInfoReq>(() => new IMChangeSignInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMChangeSignInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMChangeSignInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMChangeSignInfoReq(IMChangeSignInfoReq other) : this() {
      userId_ = other.userId_;
      signInfo_ = other.signInfo_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMChangeSignInfoReq Clone() {
      return new IMChangeSignInfoReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "sign_info" field.</summary>
    public const int SignInfoFieldNumber = 2;
    private string signInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SignInfo {
      get { return signInfo_; }
      set {
        signInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMChangeSignInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMChangeSignInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (SignInfo != other.SignInfo) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (SignInfo.Length != 0) hash ^= SignInfo.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (SignInfo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SignInfo);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (SignInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SignInfo);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMChangeSignInfoReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.SignInfo.Length != 0) {
        SignInfo = other.SignInfo;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 18: {
            SignInfo = input.ReadString();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMChangeSignInfoRsp : pb::IMessage<IMChangeSignInfoRsp> {
    private static readonly pb::MessageParser<IMChangeSignInfoRsp> _parser = new pb::MessageParser<IMChangeSignInfoRsp>(() => new IMChangeSignInfoRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMChangeSignInfoRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMChangeSignInfoRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMChangeSignInfoRsp(IMChangeSignInfoRsp other) : this() {
      userId_ = other.userId_;
      resultCode_ = other.resultCode_;
      signInfo_ = other.signInfo_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMChangeSignInfoRsp Clone() {
      return new IMChangeSignInfoRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x0214
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 2;
    private uint resultCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "sign_info" field.</summary>
    public const int SignInfoFieldNumber = 3;
    private string signInfo_ = "";
    /// <summary>
    /// 此字段服务端用，客户端直接忽略
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SignInfo {
      get { return signInfo_; }
      set {
        signInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMChangeSignInfoRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMChangeSignInfoRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ResultCode != other.ResultCode) return false;
      if (SignInfo != other.SignInfo) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (SignInfo.Length != 0) hash ^= SignInfo.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ResultCode);
      }
      if (SignInfo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SignInfo);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultCode);
      }
      if (SignInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SignInfo);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMChangeSignInfoRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.SignInfo.Length != 0) {
        SignInfo = other.SignInfo;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            ResultCode = input.ReadUInt32();
            break;
          }
          case 26: {
            SignInfo = input.ReadString();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 个性签名修改通知（广播）
  /// </summary>
  public sealed partial class IMSignInfoChangedNotify : pb::IMessage<IMSignInfoChangedNotify> {
    private static readonly pb::MessageParser<IMSignInfoChangedNotify> _parser = new pb::MessageParser<IMSignInfoChangedNotify>(() => new IMSignInfoChangedNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMSignInfoChangedNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMSignInfoChangedNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMSignInfoChangedNotify(IMSignInfoChangedNotify other) : this() {
      changedUserId_ = other.changedUserId_;
      signInfo_ = other.signInfo_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMSignInfoChangedNotify Clone() {
      return new IMSignInfoChangedNotify(this);
    }

    /// <summary>Field number for the "changed_user_id" field.</summary>
    public const int ChangedUserIdFieldNumber = 1;
    private ulong changedUserId_;
    /// <summary>
    ///cmd id:		0x0215
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChangedUserId {
      get { return changedUserId_; }
      set {
        changedUserId_ = value;
      }
    }

    /// <summary>Field number for the "sign_info" field.</summary>
    public const int SignInfoFieldNumber = 2;
    private string signInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SignInfo {
      get { return signInfo_; }
      set {
        signInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMSignInfoChangedNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMSignInfoChangedNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChangedUserId != other.ChangedUserId) return false;
      if (SignInfo != other.SignInfo) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChangedUserId != 0UL) hash ^= ChangedUserId.GetHashCode();
      if (SignInfo.Length != 0) hash ^= SignInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChangedUserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChangedUserId);
      }
      if (SignInfo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SignInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChangedUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChangedUserId);
      }
      if (SignInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SignInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMSignInfoChangedNotify other) {
      if (other == null) {
        return;
      }
      if (other.ChangedUserId != 0UL) {
        ChangedUserId = other.ChangedUserId;
      }
      if (other.SignInfo.Length != 0) {
        SignInfo = other.SignInfo;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChangedUserId = input.ReadUInt64();
            break;
          }
          case 18: {
            SignInfo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 修改用户信息REQ
  /// </summary>
  public sealed partial class IMChangeUserInfoReq : pb::IMessage<IMChangeUserInfoReq> {
    private static readonly pb::MessageParser<IMChangeUserInfoReq> _parser = new pb::MessageParser<IMChangeUserInfoReq>(() => new IMChangeUserInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMChangeUserInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMChangeUserInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMChangeUserInfoReq(IMChangeUserInfoReq other) : this() {
      userId_ = other.userId_;
      telephoneNum_ = other.telephoneNum_;
      emailAddress_ = other.emailAddress_;
      signInfo_ = other.signInfo_;
      avatarUrl_ = other.avatarUrl_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMChangeUserInfoReq Clone() {
      return new IMChangeUserInfoReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x0216
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "telephone_num" field.</summary>
    public const int TelephoneNumFieldNumber = 2;
    private string telephoneNum_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TelephoneNum {
      get { return telephoneNum_; }
      set {
        telephoneNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email_address" field.</summary>
    public const int EmailAddressFieldNumber = 3;
    private string emailAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EmailAddress {
      get { return emailAddress_; }
      set {
        emailAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sign_info" field.</summary>
    public const int SignInfoFieldNumber = 4;
    private string signInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SignInfo {
      get { return signInfo_; }
      set {
        signInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 5;
    private string avatarUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMChangeUserInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMChangeUserInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (TelephoneNum != other.TelephoneNum) return false;
      if (EmailAddress != other.EmailAddress) return false;
      if (SignInfo != other.SignInfo) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (TelephoneNum.Length != 0) hash ^= TelephoneNum.GetHashCode();
      if (EmailAddress.Length != 0) hash ^= EmailAddress.GetHashCode();
      if (SignInfo.Length != 0) hash ^= SignInfo.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (TelephoneNum.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TelephoneNum);
      }
      if (EmailAddress.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EmailAddress);
      }
      if (SignInfo.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SignInfo);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AvatarUrl);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (TelephoneNum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TelephoneNum);
      }
      if (EmailAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EmailAddress);
      }
      if (SignInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SignInfo);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMChangeUserInfoReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.TelephoneNum.Length != 0) {
        TelephoneNum = other.TelephoneNum;
      }
      if (other.EmailAddress.Length != 0) {
        EmailAddress = other.EmailAddress;
      }
      if (other.SignInfo.Length != 0) {
        SignInfo = other.SignInfo;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 18: {
            TelephoneNum = input.ReadString();
            break;
          }
          case 26: {
            EmailAddress = input.ReadString();
            break;
          }
          case 34: {
            SignInfo = input.ReadString();
            break;
          }
          case 42: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 修改用户信息RSP
  /// </summary>
  public sealed partial class IMChangeUserInfoRsp : pb::IMessage<IMChangeUserInfoRsp> {
    private static readonly pb::MessageParser<IMChangeUserInfoRsp> _parser = new pb::MessageParser<IMChangeUserInfoRsp>(() => new IMChangeUserInfoRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMChangeUserInfoRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMChangeUserInfoRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMChangeUserInfoRsp(IMChangeUserInfoRsp other) : this() {
      userId_ = other.userId_;
      resultCode_ = other.resultCode_;
      telephoneNum_ = other.telephoneNum_;
      emailAddress_ = other.emailAddress_;
      signInfo_ = other.signInfo_;
      avatarUrl_ = other.avatarUrl_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMChangeUserInfoRsp Clone() {
      return new IMChangeUserInfoRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x0217
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 2;
    private uint resultCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "telephone_num" field.</summary>
    public const int TelephoneNumFieldNumber = 3;
    private string telephoneNum_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TelephoneNum {
      get { return telephoneNum_; }
      set {
        telephoneNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email_address" field.</summary>
    public const int EmailAddressFieldNumber = 4;
    private string emailAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EmailAddress {
      get { return emailAddress_; }
      set {
        emailAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sign_info" field.</summary>
    public const int SignInfoFieldNumber = 5;
    private string signInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SignInfo {
      get { return signInfo_; }
      set {
        signInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 6;
    private string avatarUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMChangeUserInfoRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMChangeUserInfoRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ResultCode != other.ResultCode) return false;
      if (TelephoneNum != other.TelephoneNum) return false;
      if (EmailAddress != other.EmailAddress) return false;
      if (SignInfo != other.SignInfo) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (TelephoneNum.Length != 0) hash ^= TelephoneNum.GetHashCode();
      if (EmailAddress.Length != 0) hash ^= EmailAddress.GetHashCode();
      if (SignInfo.Length != 0) hash ^= SignInfo.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ResultCode);
      }
      if (TelephoneNum.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TelephoneNum);
      }
      if (EmailAddress.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EmailAddress);
      }
      if (SignInfo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SignInfo);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AvatarUrl);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultCode);
      }
      if (TelephoneNum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TelephoneNum);
      }
      if (EmailAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EmailAddress);
      }
      if (SignInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SignInfo);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMChangeUserInfoRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.TelephoneNum.Length != 0) {
        TelephoneNum = other.TelephoneNum;
      }
      if (other.EmailAddress.Length != 0) {
        EmailAddress = other.EmailAddress;
      }
      if (other.SignInfo.Length != 0) {
        SignInfo = other.SignInfo;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            ResultCode = input.ReadUInt32();
            break;
          }
          case 26: {
            TelephoneNum = input.ReadString();
            break;
          }
          case 34: {
            EmailAddress = input.ReadString();
            break;
          }
          case 42: {
            SignInfo = input.ReadString();
            break;
          }
          case 50: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 用户信息修改通知（广播）
  /// </summary>
  public sealed partial class IMUserInfoChangedNotify : pb::IMessage<IMUserInfoChangedNotify> {
    private static readonly pb::MessageParser<IMUserInfoChangedNotify> _parser = new pb::MessageParser<IMUserInfoChangedNotify>(() => new IMUserInfoChangedNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMUserInfoChangedNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Buddy.IMBuddyReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUserInfoChangedNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUserInfoChangedNotify(IMUserInfoChangedNotify other) : this() {
      changedUserId_ = other.changedUserId_;
      resultCode_ = other.resultCode_;
      telephoneNum_ = other.telephoneNum_;
      emailAddress_ = other.emailAddress_;
      signInfo_ = other.signInfo_;
      avatarUrl_ = other.avatarUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUserInfoChangedNotify Clone() {
      return new IMUserInfoChangedNotify(this);
    }

    /// <summary>Field number for the "changed_user_id" field.</summary>
    public const int ChangedUserIdFieldNumber = 1;
    private ulong changedUserId_;
    /// <summary>
    ///cmd id:		0x0218
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChangedUserId {
      get { return changedUserId_; }
      set {
        changedUserId_ = value;
      }
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 2;
    private uint resultCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "telephone_num" field.</summary>
    public const int TelephoneNumFieldNumber = 3;
    private string telephoneNum_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TelephoneNum {
      get { return telephoneNum_; }
      set {
        telephoneNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email_address" field.</summary>
    public const int EmailAddressFieldNumber = 4;
    private string emailAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EmailAddress {
      get { return emailAddress_; }
      set {
        emailAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sign_info" field.</summary>
    public const int SignInfoFieldNumber = 5;
    private string signInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SignInfo {
      get { return signInfo_; }
      set {
        signInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 6;
    private string avatarUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMUserInfoChangedNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMUserInfoChangedNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChangedUserId != other.ChangedUserId) return false;
      if (ResultCode != other.ResultCode) return false;
      if (TelephoneNum != other.TelephoneNum) return false;
      if (EmailAddress != other.EmailAddress) return false;
      if (SignInfo != other.SignInfo) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChangedUserId != 0UL) hash ^= ChangedUserId.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (TelephoneNum.Length != 0) hash ^= TelephoneNum.GetHashCode();
      if (EmailAddress.Length != 0) hash ^= EmailAddress.GetHashCode();
      if (SignInfo.Length != 0) hash ^= SignInfo.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChangedUserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChangedUserId);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ResultCode);
      }
      if (TelephoneNum.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TelephoneNum);
      }
      if (EmailAddress.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EmailAddress);
      }
      if (SignInfo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SignInfo);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AvatarUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChangedUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChangedUserId);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultCode);
      }
      if (TelephoneNum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TelephoneNum);
      }
      if (EmailAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EmailAddress);
      }
      if (SignInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SignInfo);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMUserInfoChangedNotify other) {
      if (other == null) {
        return;
      }
      if (other.ChangedUserId != 0UL) {
        ChangedUserId = other.ChangedUserId;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.TelephoneNum.Length != 0) {
        TelephoneNum = other.TelephoneNum;
      }
      if (other.EmailAddress.Length != 0) {
        EmailAddress = other.EmailAddress;
      }
      if (other.SignInfo.Length != 0) {
        SignInfo = other.SignInfo;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChangedUserId = input.ReadUInt64();
            break;
          }
          case 16: {
            ResultCode = input.ReadUInt32();
            break;
          }
          case 26: {
            TelephoneNum = input.ReadString();
            break;
          }
          case 34: {
            EmailAddress = input.ReadString();
            break;
          }
          case 42: {
            SignInfo = input.ReadString();
            break;
          }
          case 50: {
            AvatarUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
