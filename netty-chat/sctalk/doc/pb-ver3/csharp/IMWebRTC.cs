// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.WebRTC.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IM.WebRTC {

  /// <summary>Holder for reflection information generated from IM.WebRTC.proto</summary>
  public static partial class IMWebRTCReflection {

    #region Descriptor
    /// <summary>File descriptor for IM.WebRTC.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IMWebRTCReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9JTS5XZWJSVEMucHJvdG8SCUlNLldlYlJUQxoTSU0uQmFzZURlZmluZS5w",
            "cm90byKgAQoTSU1BVkNhbGxJbml0aWF0ZVJlcRIPCgdmcm9tX2lkGAEgASgE",
            "Eg0KBXRvX2lkGAIgASgEEg8KB2NhbGxfaWQYAyABKAQSNQoSY2FsbGVyX2Ns",
            "aWVudF90eXBlGAQgASgOMhkuSU0uQmFzZURlZmluZS5DbGllbnRUeXBlEgwK",
            "BGJvZHkYBSABKAwSEwoLYXR0YWNoX2RhdGEYFCABKAwivgEKE0lNQVZDYWxs",
            "SW5pdGlhdGVSZXMSDwoHZnJvbV9pZBgBIAEoBBINCgV0b19pZBgCIAEoBBIP",
            "CgdjYWxsX2lkGAMgASgEEjUKEmNhbGxlZF9jbGllbnRfdHlwZRgEIAEoDjIZ",
            "LklNLkJhc2VEZWZpbmUuQ2xpZW50VHlwZRIMCgRjb2RlGAUgASgNEg4KBnJl",
            "YXNvbhgGIAEoCRIMCgRib2R5GAcgASgMEhMKC2F0dGFjaF9kYXRhGBQgASgM",
            "IlkKEUlNQVZDYWxsSHVuZ1VwUmVxEg8KB2Zyb21faWQYASABKAQSDQoFdG9f",
            "aWQYAiABKAQSDwoHY2FsbF9pZBgDIAEoBBITCgthdHRhY2hfZGF0YRgUIAEo",
            "DCJnChFJTUFWQ2FsbEh1bmdVcFJlcxIPCgdmcm9tX2lkGAEgASgEEg0KBXRv",
            "X2lkGAIgASgEEg8KB2NhbGxfaWQYAyABKAQSDAoEY29kZRgEIAEoDRITCgth",
            "dHRhY2hfZGF0YRgUIAEoDCJZChFJTUFWQ2FsbENhbmNlbFJlcRIPCgdmcm9t",
            "X2lkGAEgASgEEg0KBXRvX2lkGAIgASgEEg8KB2NhbGxfaWQYAyABKAQSEwoL",
            "YXR0YWNoX2RhdGEYFCABKAwiWQoRSU1BVkNhbGxDYW5jZWxSZXMSDwoHZnJv",
            "bV9pZBgBIAEoDRINCgV0b19pZBgCIAEoDRIPCgdjYWxsX2lkGAMgASgEEhMK",
            "C2F0dGFjaF9kYXRhGBQgASgMQiIKHmNvbS5ibHQudGFsay5jb21tb24uY29k",
            "ZS5wcm90b0gDYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::IM.BaseDefine.IMBaseDefineReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.WebRTC.IMAVCallInitiateReq), global::IM.WebRTC.IMAVCallInitiateReq.Parser, new[]{ "FromId", "ToId", "CallId", "CallerClientType", "Body", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.WebRTC.IMAVCallInitiateRes), global::IM.WebRTC.IMAVCallInitiateRes.Parser, new[]{ "FromId", "ToId", "CallId", "CalledClientType", "Code", "Reason", "Body", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.WebRTC.IMAVCallHungUpReq), global::IM.WebRTC.IMAVCallHungUpReq.Parser, new[]{ "FromId", "ToId", "CallId", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.WebRTC.IMAVCallHungUpRes), global::IM.WebRTC.IMAVCallHungUpRes.Parser, new[]{ "FromId", "ToId", "CallId", "Code", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.WebRTC.IMAVCallCancelReq), global::IM.WebRTC.IMAVCallCancelReq.Parser, new[]{ "FromId", "ToId", "CallId", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.WebRTC.IMAVCallCancelRes), global::IM.WebRTC.IMAVCallCancelRes.Parser, new[]{ "FromId", "ToId", "CallId", "AttachData" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class IMAVCallInitiateReq : pb::IMessage<IMAVCallInitiateReq> {
    private static readonly pb::MessageParser<IMAVCallInitiateReq> _parser = new pb::MessageParser<IMAVCallInitiateReq>(() => new IMAVCallInitiateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMAVCallInitiateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.WebRTC.IMWebRTCReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAVCallInitiateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAVCallInitiateReq(IMAVCallInitiateReq other) : this() {
      fromId_ = other.fromId_;
      toId_ = other.toId_;
      callId_ = other.callId_;
      callerClientType_ = other.callerClientType_;
      body_ = other.body_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAVCallInitiateReq Clone() {
      return new IMAVCallInitiateReq(this);
    }

    /// <summary>Field number for the "from_id" field.</summary>
    public const int FromIdFieldNumber = 1;
    private ulong fromId_;
    /// <summary>
    ///cmd id:		0x0901
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromId {
      get { return fromId_; }
      set {
        fromId_ = value;
      }
    }

    /// <summary>Field number for the "to_id" field.</summary>
    public const int ToIdFieldNumber = 2;
    private ulong toId_;
    /// <summary>
    /// 被呼叫一方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ToId {
      get { return toId_; }
      set {
        toId_ = value;
      }
    }

    /// <summary>Field number for the "call_id" field.</summary>
    public const int CallIdFieldNumber = 3;
    private ulong callId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CallId {
      get { return callId_; }
      set {
        callId_ = value;
      }
    }

    /// <summary>Field number for the "caller_client_type" field.</summary>
    public const int CallerClientTypeFieldNumber = 4;
    private global::IM.BaseDefine.ClientType callerClientType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.ClientType CallerClientType {
      get { return callerClientType_; }
      set {
        callerClientType_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 5;
    private pb::ByteString body_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMAVCallInitiateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMAVCallInitiateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromId != other.FromId) return false;
      if (ToId != other.ToId) return false;
      if (CallId != other.CallId) return false;
      if (CallerClientType != other.CallerClientType) return false;
      if (Body != other.Body) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromId != 0UL) hash ^= FromId.GetHashCode();
      if (ToId != 0UL) hash ^= ToId.GetHashCode();
      if (CallId != 0UL) hash ^= CallId.GetHashCode();
      if (CallerClientType != 0) hash ^= CallerClientType.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FromId);
      }
      if (ToId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ToId);
      }
      if (CallId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CallId);
      }
      if (CallerClientType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CallerClientType);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Body);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromId);
      }
      if (ToId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ToId);
      }
      if (CallId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CallId);
      }
      if (CallerClientType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CallerClientType);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMAVCallInitiateReq other) {
      if (other == null) {
        return;
      }
      if (other.FromId != 0UL) {
        FromId = other.FromId;
      }
      if (other.ToId != 0UL) {
        ToId = other.ToId;
      }
      if (other.CallId != 0UL) {
        CallId = other.CallId;
      }
      if (other.CallerClientType != 0) {
        CallerClientType = other.CallerClientType;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromId = input.ReadUInt64();
            break;
          }
          case 16: {
            ToId = input.ReadUInt64();
            break;
          }
          case 24: {
            CallId = input.ReadUInt64();
            break;
          }
          case 32: {
            callerClientType_ = (global::IM.BaseDefine.ClientType) input.ReadEnum();
            break;
          }
          case 42: {
            Body = input.ReadBytes();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMAVCallInitiateRes : pb::IMessage<IMAVCallInitiateRes> {
    private static readonly pb::MessageParser<IMAVCallInitiateRes> _parser = new pb::MessageParser<IMAVCallInitiateRes>(() => new IMAVCallInitiateRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMAVCallInitiateRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.WebRTC.IMWebRTCReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAVCallInitiateRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAVCallInitiateRes(IMAVCallInitiateRes other) : this() {
      fromId_ = other.fromId_;
      toId_ = other.toId_;
      callId_ = other.callId_;
      calledClientType_ = other.calledClientType_;
      code_ = other.code_;
      reason_ = other.reason_;
      body_ = other.body_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAVCallInitiateRes Clone() {
      return new IMAVCallInitiateRes(this);
    }

    /// <summary>Field number for the "from_id" field.</summary>
    public const int FromIdFieldNumber = 1;
    private ulong fromId_;
    /// <summary>
    ///cmd id:		0x0902
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromId {
      get { return fromId_; }
      set {
        fromId_ = value;
      }
    }

    /// <summary>Field number for the "to_id" field.</summary>
    public const int ToIdFieldNumber = 2;
    private ulong toId_;
    /// <summary>
    /// 被呼叫的一方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ToId {
      get { return toId_; }
      set {
        toId_ = value;
      }
    }

    /// <summary>Field number for the "call_id" field.</summary>
    public const int CallIdFieldNumber = 3;
    private ulong callId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CallId {
      get { return callId_; }
      set {
        callId_ = value;
      }
    }

    /// <summary>Field number for the "called_client_type" field.</summary>
    public const int CalledClientTypeFieldNumber = 4;
    private global::IM.BaseDefine.ClientType calledClientType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.ClientType CalledClientType {
      get { return calledClientType_; }
      set {
        calledClientType_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 5;
    private uint code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 6;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 7;
    private pb::ByteString body_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMAVCallInitiateRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMAVCallInitiateRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromId != other.FromId) return false;
      if (ToId != other.ToId) return false;
      if (CallId != other.CallId) return false;
      if (CalledClientType != other.CalledClientType) return false;
      if (Code != other.Code) return false;
      if (Reason != other.Reason) return false;
      if (Body != other.Body) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromId != 0UL) hash ^= FromId.GetHashCode();
      if (ToId != 0UL) hash ^= ToId.GetHashCode();
      if (CallId != 0UL) hash ^= CallId.GetHashCode();
      if (CalledClientType != 0) hash ^= CalledClientType.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FromId);
      }
      if (ToId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ToId);
      }
      if (CallId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CallId);
      }
      if (CalledClientType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CalledClientType);
      }
      if (Code != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Code);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Reason);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Body);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromId);
      }
      if (ToId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ToId);
      }
      if (CallId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CallId);
      }
      if (CalledClientType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CalledClientType);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMAVCallInitiateRes other) {
      if (other == null) {
        return;
      }
      if (other.FromId != 0UL) {
        FromId = other.FromId;
      }
      if (other.ToId != 0UL) {
        ToId = other.ToId;
      }
      if (other.CallId != 0UL) {
        CallId = other.CallId;
      }
      if (other.CalledClientType != 0) {
        CalledClientType = other.CalledClientType;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromId = input.ReadUInt64();
            break;
          }
          case 16: {
            ToId = input.ReadUInt64();
            break;
          }
          case 24: {
            CallId = input.ReadUInt64();
            break;
          }
          case 32: {
            calledClientType_ = (global::IM.BaseDefine.ClientType) input.ReadEnum();
            break;
          }
          case 40: {
            Code = input.ReadUInt32();
            break;
          }
          case 50: {
            Reason = input.ReadString();
            break;
          }
          case 58: {
            Body = input.ReadBytes();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMAVCallHungUpReq : pb::IMessage<IMAVCallHungUpReq> {
    private static readonly pb::MessageParser<IMAVCallHungUpReq> _parser = new pb::MessageParser<IMAVCallHungUpReq>(() => new IMAVCallHungUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMAVCallHungUpReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.WebRTC.IMWebRTCReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAVCallHungUpReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAVCallHungUpReq(IMAVCallHungUpReq other) : this() {
      fromId_ = other.fromId_;
      toId_ = other.toId_;
      callId_ = other.callId_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAVCallHungUpReq Clone() {
      return new IMAVCallHungUpReq(this);
    }

    /// <summary>Field number for the "from_id" field.</summary>
    public const int FromIdFieldNumber = 1;
    private ulong fromId_;
    /// <summary>
    ///cmd id: 		0x0903
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromId {
      get { return fromId_; }
      set {
        fromId_ = value;
      }
    }

    /// <summary>Field number for the "to_id" field.</summary>
    public const int ToIdFieldNumber = 2;
    private ulong toId_;
    /// <summary>
    /// 被挂断的一方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ToId {
      get { return toId_; }
      set {
        toId_ = value;
      }
    }

    /// <summary>Field number for the "call_id" field.</summary>
    public const int CallIdFieldNumber = 3;
    private ulong callId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CallId {
      get { return callId_; }
      set {
        callId_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMAVCallHungUpReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMAVCallHungUpReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromId != other.FromId) return false;
      if (ToId != other.ToId) return false;
      if (CallId != other.CallId) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromId != 0UL) hash ^= FromId.GetHashCode();
      if (ToId != 0UL) hash ^= ToId.GetHashCode();
      if (CallId != 0UL) hash ^= CallId.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FromId);
      }
      if (ToId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ToId);
      }
      if (CallId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CallId);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromId);
      }
      if (ToId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ToId);
      }
      if (CallId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CallId);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMAVCallHungUpReq other) {
      if (other == null) {
        return;
      }
      if (other.FromId != 0UL) {
        FromId = other.FromId;
      }
      if (other.ToId != 0UL) {
        ToId = other.ToId;
      }
      if (other.CallId != 0UL) {
        CallId = other.CallId;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromId = input.ReadUInt64();
            break;
          }
          case 16: {
            ToId = input.ReadUInt64();
            break;
          }
          case 24: {
            CallId = input.ReadUInt64();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMAVCallHungUpRes : pb::IMessage<IMAVCallHungUpRes> {
    private static readonly pb::MessageParser<IMAVCallHungUpRes> _parser = new pb::MessageParser<IMAVCallHungUpRes>(() => new IMAVCallHungUpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMAVCallHungUpRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.WebRTC.IMWebRTCReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAVCallHungUpRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAVCallHungUpRes(IMAVCallHungUpRes other) : this() {
      fromId_ = other.fromId_;
      toId_ = other.toId_;
      callId_ = other.callId_;
      code_ = other.code_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAVCallHungUpRes Clone() {
      return new IMAVCallHungUpRes(this);
    }

    /// <summary>Field number for the "from_id" field.</summary>
    public const int FromIdFieldNumber = 1;
    private ulong fromId_;
    /// <summary>
    ///cmd id: 		0x0904
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromId {
      get { return fromId_; }
      set {
        fromId_ = value;
      }
    }

    /// <summary>Field number for the "to_id" field.</summary>
    public const int ToIdFieldNumber = 2;
    private ulong toId_;
    /// <summary>
    /// 被挂断的一方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ToId {
      get { return toId_; }
      set {
        toId_ = value;
      }
    }

    /// <summary>Field number for the "call_id" field.</summary>
    public const int CallIdFieldNumber = 3;
    private ulong callId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CallId {
      get { return callId_; }
      set {
        callId_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 4;
    private uint code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMAVCallHungUpRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMAVCallHungUpRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromId != other.FromId) return false;
      if (ToId != other.ToId) return false;
      if (CallId != other.CallId) return false;
      if (Code != other.Code) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromId != 0UL) hash ^= FromId.GetHashCode();
      if (ToId != 0UL) hash ^= ToId.GetHashCode();
      if (CallId != 0UL) hash ^= CallId.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FromId);
      }
      if (ToId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ToId);
      }
      if (CallId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CallId);
      }
      if (Code != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Code);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromId);
      }
      if (ToId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ToId);
      }
      if (CallId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CallId);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMAVCallHungUpRes other) {
      if (other == null) {
        return;
      }
      if (other.FromId != 0UL) {
        FromId = other.FromId;
      }
      if (other.ToId != 0UL) {
        ToId = other.ToId;
      }
      if (other.CallId != 0UL) {
        CallId = other.CallId;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromId = input.ReadUInt64();
            break;
          }
          case 16: {
            ToId = input.ReadUInt64();
            break;
          }
          case 24: {
            CallId = input.ReadUInt64();
            break;
          }
          case 32: {
            Code = input.ReadUInt32();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMAVCallCancelReq : pb::IMessage<IMAVCallCancelReq> {
    private static readonly pb::MessageParser<IMAVCallCancelReq> _parser = new pb::MessageParser<IMAVCallCancelReq>(() => new IMAVCallCancelReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMAVCallCancelReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.WebRTC.IMWebRTCReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAVCallCancelReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAVCallCancelReq(IMAVCallCancelReq other) : this() {
      fromId_ = other.fromId_;
      toId_ = other.toId_;
      callId_ = other.callId_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAVCallCancelReq Clone() {
      return new IMAVCallCancelReq(this);
    }

    /// <summary>Field number for the "from_id" field.</summary>
    public const int FromIdFieldNumber = 1;
    private ulong fromId_;
    /// <summary>
    ///cmd id: 		0x0905
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromId {
      get { return fromId_; }
      set {
        fromId_ = value;
      }
    }

    /// <summary>Field number for the "to_id" field.</summary>
    public const int ToIdFieldNumber = 2;
    private ulong toId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ToId {
      get { return toId_; }
      set {
        toId_ = value;
      }
    }

    /// <summary>Field number for the "call_id" field.</summary>
    public const int CallIdFieldNumber = 3;
    private ulong callId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CallId {
      get { return callId_; }
      set {
        callId_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMAVCallCancelReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMAVCallCancelReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromId != other.FromId) return false;
      if (ToId != other.ToId) return false;
      if (CallId != other.CallId) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromId != 0UL) hash ^= FromId.GetHashCode();
      if (ToId != 0UL) hash ^= ToId.GetHashCode();
      if (CallId != 0UL) hash ^= CallId.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FromId);
      }
      if (ToId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ToId);
      }
      if (CallId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CallId);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromId);
      }
      if (ToId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ToId);
      }
      if (CallId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CallId);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMAVCallCancelReq other) {
      if (other == null) {
        return;
      }
      if (other.FromId != 0UL) {
        FromId = other.FromId;
      }
      if (other.ToId != 0UL) {
        ToId = other.ToId;
      }
      if (other.CallId != 0UL) {
        CallId = other.CallId;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromId = input.ReadUInt64();
            break;
          }
          case 16: {
            ToId = input.ReadUInt64();
            break;
          }
          case 24: {
            CallId = input.ReadUInt64();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMAVCallCancelRes : pb::IMessage<IMAVCallCancelRes> {
    private static readonly pb::MessageParser<IMAVCallCancelRes> _parser = new pb::MessageParser<IMAVCallCancelRes>(() => new IMAVCallCancelRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMAVCallCancelRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.WebRTC.IMWebRTCReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAVCallCancelRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAVCallCancelRes(IMAVCallCancelRes other) : this() {
      fromId_ = other.fromId_;
      toId_ = other.toId_;
      callId_ = other.callId_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMAVCallCancelRes Clone() {
      return new IMAVCallCancelRes(this);
    }

    /// <summary>Field number for the "from_id" field.</summary>
    public const int FromIdFieldNumber = 1;
    private uint fromId_;
    /// <summary>
    ///cmd id: 		0x0906
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FromId {
      get { return fromId_; }
      set {
        fromId_ = value;
      }
    }

    /// <summary>Field number for the "to_id" field.</summary>
    public const int ToIdFieldNumber = 2;
    private uint toId_;
    /// <summary>
    /// 对方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ToId {
      get { return toId_; }
      set {
        toId_ = value;
      }
    }

    /// <summary>Field number for the "call_id" field.</summary>
    public const int CallIdFieldNumber = 3;
    private ulong callId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CallId {
      get { return callId_; }
      set {
        callId_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMAVCallCancelRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMAVCallCancelRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromId != other.FromId) return false;
      if (ToId != other.ToId) return false;
      if (CallId != other.CallId) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromId != 0) hash ^= FromId.GetHashCode();
      if (ToId != 0) hash ^= ToId.GetHashCode();
      if (CallId != 0UL) hash ^= CallId.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FromId);
      }
      if (ToId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ToId);
      }
      if (CallId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CallId);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FromId);
      }
      if (ToId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToId);
      }
      if (CallId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CallId);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMAVCallCancelRes other) {
      if (other == null) {
        return;
      }
      if (other.FromId != 0) {
        FromId = other.FromId;
      }
      if (other.ToId != 0) {
        ToId = other.ToId;
      }
      if (other.CallId != 0UL) {
        CallId = other.CallId;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromId = input.ReadUInt32();
            break;
          }
          case 16: {
            ToId = input.ReadUInt32();
            break;
          }
          case 24: {
            CallId = input.ReadUInt64();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
