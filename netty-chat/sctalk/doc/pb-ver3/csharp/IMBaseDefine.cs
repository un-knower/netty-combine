// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.BaseDefine.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IM.BaseDefine {

  /// <summary>Holder for reflection information generated from IM.BaseDefine.proto</summary>
  public static partial class IMBaseDefineReflection {

    #region Descriptor
    /// <summary>File descriptor for IM.BaseDefine.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IMBaseDefineReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNJTS5CYXNlRGVmaW5lLnByb3RvEg1JTS5CYXNlRGVmaW5lIiIKBklwQWRk",
            "chIKCgJpcBgBIAEoCRIMCgRwb3J0GAIgASgNIuQBCghVc2VySW5mbxIPCgd1",
            "c2VyX2lkGAEgASgEEhMKC3VzZXJfZ2VuZGVyGAIgASgNEhYKDnVzZXJfbmlj",
            "a19uYW1lGAMgASgJEhIKCmF2YXRhcl91cmwYBCABKAkSFQoNZGVwYXJ0bWVu",
            "dF9pZBgFIAEoBBINCgVlbWFpbBgGIAEoCRIWCg51c2VyX3JlYWxfbmFtZRgH",
            "IAEoCRIQCgh1c2VyX3RlbBgIIAEoCRITCgt1c2VyX2RvbWFpbhgJIAEoCRIO",
            "CgZzdGF0dXMYCiABKA0SEQoJc2lnbl9pbmZvGAsgASgJIqwCChJDb250YWN0",
            "U2Vzc2lvbkluZm8SEgoKc2Vzc2lvbl9pZBgBIAEoBBIwCgxzZXNzaW9uX3R5",
            "cGUYAiABKA4yGi5JTS5CYXNlRGVmaW5lLlNlc3Npb25UeXBlEjgKDnNlc3Np",
            "b25fc3RhdHVzGAMgASgOMiAuSU0uQmFzZURlZmluZS5TZXNzaW9uU3RhdHVz",
            "VHlwZRIUCgx1cGRhdGVkX3RpbWUYBCABKA0SFQoNbGF0ZXN0X21zZ19pZBgF",
            "IAEoBBIXCg9sYXRlc3RfbXNnX2RhdGEYBiABKAwSLwoPbGF0ZXN0X21zZ190",
            "eXBlGAcgASgOMhYuSU0uQmFzZURlZmluZS5Nc2dUeXBlEh8KF2xhdGVzdF9t",
            "c2dfZnJvbV91c2VyX2lkGAggASgEIkgKCFVzZXJTdGF0Eg8KB3VzZXJfaWQY",
            "ASABKAQSKwoGc3RhdHVzGAIgASgOMhsuSU0uQmFzZURlZmluZS5Vc2VyU3Rh",
            "dFR5cGUifgoOU2VydmVyVXNlclN0YXQSDwoHdXNlcl9pZBgBIAEoBBIrCgZz",
            "dGF0dXMYAiABKA4yGy5JTS5CYXNlRGVmaW5lLlVzZXJTdGF0VHlwZRIuCgtj",
            "bGllbnRfdHlwZRgDIAEoDjIZLklNLkJhc2VEZWZpbmUuQ2xpZW50VHlwZSLo",
            "AQoKVW5yZWFkSW5mbxISCgpzZXNzaW9uX2lkGAEgASgEEjAKDHNlc3Npb25f",
            "dHlwZRgCIAEoDjIaLklNLkJhc2VEZWZpbmUuU2Vzc2lvblR5cGUSEgoKdW5y",
            "ZWFkX2NudBgDIAEoDRIVCg1sYXRlc3RfbXNnX2lkGAQgASgEEhcKD2xhdGVz",
            "dF9tc2dfZGF0YRgFIAEoDBIvCg9sYXRlc3RfbXNnX3R5cGUYBiABKA4yFi5J",
            "TS5CYXNlRGVmaW5lLk1zZ1R5cGUSHwoXbGF0ZXN0X21zZ19mcm9tX3VzZXJf",
            "aWQYByABKAQigwEKB01zZ0luZm8SDgoGbXNnX2lkGAEgASgEEhcKD2Zyb21f",
            "c2Vzc2lvbl9pZBgCIAEoBBITCgtjcmVhdGVfdGltZRgDIAEoDRIoCghtc2df",
            "dHlwZRgEIAEoDjIWLklNLkJhc2VEZWZpbmUuTXNnVHlwZRIQCghtc2dfZGF0",
            "YRgFIAEoDCI1ChBHcm91cFZlcnNpb25JbmZvEhAKCGdyb3VwX2lkGAEgASgE",
            "Eg8KB3ZlcnNpb24YAiABKA0i0gEKCUdyb3VwSW5mbxIQCghncm91cF9pZBgB",
            "IAEoBBIPCgd2ZXJzaW9uGAIgASgNEhIKCmdyb3VwX25hbWUYAyABKAkSFAoM",
            "Z3JvdXBfYXZhdGFyGAQgASgJEhgKEGdyb3VwX2NyZWF0b3JfaWQYBSABKAQS",
            "LAoKZ3JvdXBfdHlwZRgGIAEoDjIYLklNLkJhc2VEZWZpbmUuR3JvdXBUeXBl",
            "EhUKDXNoaWVsZF9zdGF0dXMYByABKA0SGQoRZ3JvdXBfbWVtYmVyX2xpc3QY",
            "CCADKAQihAEKDVVzZXJUb2tlbkluZm8SDwoHdXNlcl9pZBgBIAEoBBIsCgl1",
            "c2VyX3R5cGUYAiABKA4yGS5JTS5CYXNlRGVmaW5lLkNsaWVudFR5cGUSDQoF",
            "dG9rZW4YAyABKAkSEgoKcHVzaF9jb3VudBgEIAEoDRIRCglwdXNoX3R5cGUY",
            "BSABKA0iNQoKUHVzaFJlc3VsdBISCgp1c2VyX3Rva2VuGAEgASgJEhMKC3Jl",
            "c3VsdF9jb2RlGAIgASgNIkgKDFNoaWVsZFN0YXR1cxIPCgd1c2VyX2lkGAEg",
            "ASgEEhAKCGdyb3VwX2lkGAIgASgEEhUKDXNoaWVsZF9zdGF0dXMYAyABKA0i",
            "XgoPT2ZmbGluZUZpbGVJbmZvEhQKDGZyb21fdXNlcl9pZBgBIAEoBBIPCgd0",
            "YXNrX2lkGAIgASgJEhEKCWZpbGVfbmFtZRgDIAEoCRIRCglmaWxlX3NpemUY",
            "BCABKA0ilAEKCkRlcGFydEluZm8SDwoHZGVwdF9pZBgBIAEoBBIQCghwcmlv",
            "cml0eRgCIAEoDRIRCglkZXB0X25hbWUYAyABKAkSFgoOcGFyZW50X2RlcHRf",
            "aWQYBCABKAQSOAoLZGVwdF9zdGF0dXMYBSABKA4yIy5JTS5CYXNlRGVmaW5l",
            "LkRlcGFydG1lbnRTdGF0dXNUeXBlIjoKEFB1c2hTaGllbGRTdGF0dXMSDwoH",
            "dXNlcl9pZBgBIAEoBBIVCg1zaGllbGRfc3RhdHVzGAIgASgNKq8BCglTZXJ2",
            "aWNlSUQSDAoIU0lEX05PTkUQABINCglTSURfTE9HSU4QARISCg5TSURfQlVE",
            "RFlfTElTVBACEgsKB1NJRF9NU0cQAxINCglTSURfR1JPVVAQBBIMCghTSURf",
            "RklMRRAFEhYKElNJRF9TV0lUQ0hfU0VSVklDRRAGEg0KCVNJRF9PVEhFUhAH",
            "EhAKDFNJRF9JTlRFUk5BTBAIEg4KClNJRF9BVkNBTEwQCSr6AwoKTG9naW5D",
            "bWRJRBISCg5DSURfTE9HSU5fTk9ORRAAEhwKF0NJRF9MT0dJTl9SRVFfTVNH",
            "U0VSVkVSEIECEhwKF0NJRF9MT0dJTl9SRVNfTVNHU0VSVkVSEIICEhwKF0NJ",
            "RF9MT0dJTl9SRVFfVVNFUkxPR0lOEIMCEhwKF0NJRF9MT0dJTl9SRVNfVVNF",
            "UkxPR0lOEIQCEhsKFkNJRF9MT0dJTl9SRVFfTE9HSU5PVVQQhQISGwoWQ0lE",
            "X0xPR0lOX1JFU19MT0dJTk9VVBCGAhIYChNDSURfTE9HSU5fS0lDS19VU0VS",
            "EIcCEh4KGUNJRF9MT0dJTl9SRVFfREVWSUNFVE9LRU4QiAISHgoZQ0lEX0xP",
            "R0lOX1JFU19ERVZJQ0VUT0tFThCJAhIfChpDSURfTE9HSU5fUkVRX0tJQ0tQ",
            "Q0NMSUVOVBCKAhIfChpDSURfTE9HSU5fUkVTX0tJQ0tQQ0NMSUVOVBCLAhIe",
            "ChlDSURfTE9HSU5fUkVRX1BVU0hfU0hJRUxEEIwCEh4KGUNJRF9MT0dJTl9S",
            "RVNfUFVTSF9TSElFTEQQjQISJAofQ0lEX0xPR0lOX1JFUV9RVUVSWV9QVVNI",
            "X1NISUVMRBCOAhIkCh9DSURfTE9HSU5fUkVTX1FVRVJZX1BVU0hfU0hJRUxE",
            "EI8CKrEICg5CdWRkeUxpc3RDbWRJRBISCg5DSURfQlVERFlfTk9ORRAAEjIK",
            "LUNJRF9CVUREWV9MSVNUX1JFQ0VOVF9DT05UQUNUX1NFU1NJT05fUkVRVUVT",
            "VBCBBBIzCi5DSURfQlVERFlfTElTVF9SRUNFTlRfQ09OVEFDVF9TRVNTSU9O",
            "X1JFU1BPTlNFEIIEEiEKHENJRF9CVUREWV9MSVNUX1NUQVRVU19OT1RJRlkQ",
            "gwQSJQogQ0lEX0JVRERZX0xJU1RfVVNFUl9JTkZPX1JFUVVFU1QQhAQSJgoh",
            "Q0lEX0JVRERZX0xJU1RfVVNFUl9JTkZPX1JFU1BPTlNFEIUEEiYKIUNJRF9C",
            "VUREWV9MSVNUX1JFTU9WRV9TRVNTSU9OX1JFURCGBBImCiFDSURfQlVERFlf",
            "TElTVF9SRU1PVkVfU0VTU0lPTl9SRVMQhwQSJAofQ0lEX0JVRERZX0xJU1Rf",
            "QUxMX1VTRVJfUkVRVUVTVBCIBBIlCiBDSURfQlVERFlfTElTVF9BTExfVVNF",
            "Ul9SRVNQT05TRRCJBBIoCiNDSURfQlVERFlfTElTVF9VU0VSU19TVEFUVVNf",
            "UkVRVUVTVBCKBBIpCiRDSURfQlVERFlfTElTVF9VU0VSU19TVEFUVVNfUkVT",
            "UE9OU0UQiwQSKQokQ0lEX0JVRERZX0xJU1RfQ0hBTkdFX0FWQVRBUl9SRVFV",
            "RVNUEIwEEioKJUNJRF9CVUREWV9MSVNUX0NIQU5HRV9BVkFUQVJfUkVTUE9O",
            "U0UQjQQSKgolQ0lEX0JVRERZX0xJU1RfUENfTE9HSU5fU1RBVFVTX05PVElG",
            "WRCOBBIpCiRDSURfQlVERFlfTElTVF9SRU1PVkVfU0VTU0lPTl9OT1RJRlkQ",
            "jwQSJgohQ0lEX0JVRERZX0xJU1RfREVQQVJUTUVOVF9SRVFVRVNUEJAEEicK",
            "IkNJRF9CVUREWV9MSVNUX0RFUEFSVE1FTlRfUkVTUE9OU0UQkQQSKQokQ0lE",
            "X0JVRERZX0xJU1RfQVZBVEFSX0NIQU5HRURfTk9USUZZEJIEEiwKJ0NJRF9C",
            "VUREWV9MSVNUX0NIQU5HRV9TSUdOX0lORk9fUkVRVUVTVBCTBBItCihDSURf",
            "QlVERFlfTElTVF9DSEFOR0VfU0lHTl9JTkZPX1JFU1BPTlNFEJQEEiwKJ0NJ",
            "RF9CVUREWV9MSVNUX1NJR05fSU5GT19DSEFOR0VEX05PVElGWRCVBBIsCidD",
            "SURfQlVERFlfTElTVF9DSEFOR0VfVVNFUl9JTkZPX1JFUVVFU1QQlgQSLQoo",
            "Q0lEX0JVRERZX0xJU1RfQ0hBTkdFX1VTRVJfSU5GT19SRVNQT05TRRCXBBIs",
            "CidDSURfQlVERFlfTElTVF9VU0VSX0lORk9fQ0hBTkdFRF9OT1RJRlkQmAQq",
            "tAMKDE1lc3NhZ2VDbWRJRBIQCgxDSURfTVNHX05PTkUQABIRCgxDSURfTVNH",
            "X0RBVEEQgQYSFQoQQ0lEX01TR19EQVRBX0FDSxCCBhIVChBDSURfTVNHX1JF",
            "QURfQUNLEIMGEhgKE0NJRF9NU0dfUkVBRF9OT1RJRlkQhAYSGQoUQ0lEX01T",
            "R19USU1FX1JFUVVFU1QQhQYSGgoVQ0lEX01TR19USU1FX1JFU1BPTlNFEIYG",
            "Eh8KGkNJRF9NU0dfVU5SRUFEX0NOVF9SRVFVRVNUEIcGEiAKG0NJRF9NU0df",
            "VU5SRUFEX0NOVF9SRVNQT05TRRCIBhIZChRDSURfTVNHX0xJU1RfUkVRVUVT",
            "VBCJBhIaChVDSURfTVNHX0xJU1RfUkVTUE9OU0UQigYSIgodQ0lEX01TR19H",
            "RVRfTEFURVNUX01TR19JRF9SRVEQiwYSIgodQ0lEX01TR19HRVRfTEFURVNU",
            "X01TR19JRF9SU1AQjAYSHgoZQ0lEX01TR19HRVRfQllfTVNHX0lEX1JFURCN",
            "BhIeChlDSURfTVNHX0dFVF9CWV9NU0dfSURfUkVTEI4GKqADCgpHcm91cENt",
            "ZElEEhIKDkNJRF9HUk9VUF9OT05FEAASIgodQ0lEX0dST1VQX05PUk1BTF9M",
            "SVNUX1JFUVVFU1QQgQgSIwoeQ0lEX0dST1VQX05PUk1BTF9MSVNUX1JFU1BP",
            "TlNFEIIIEhsKFkNJRF9HUk9VUF9JTkZPX1JFUVVFU1QQgwgSHAoXQ0lEX0dS",
            "T1VQX0lORk9fUkVTUE9OU0UQhAgSHQoYQ0lEX0dST1VQX0NSRUFURV9SRVFV",
            "RVNUEIUIEh4KGUNJRF9HUk9VUF9DUkVBVEVfUkVTUE9OU0UQhggSJAofQ0lE",
            "X0dST1VQX0NIQU5HRV9NRU1CRVJfUkVRVUVTVBCHCBIlCiBDSURfR1JPVVBf",
            "Q0hBTkdFX01FTUJFUl9SRVNQT05TRRCICBIjCh5DSURfR1JPVVBfU0hJRUxE",
            "X0dST1VQX1JFUVVFU1QQiQgSJAofQ0lEX0dST1VQX1NISUVMRF9HUk9VUF9S",
            "RVNQT05TRRCKCBIjCh5DSURfR1JPVVBfQ0hBTkdFX01FTUJFUl9OT1RJRlkQ",
            "iwgq4AIKCUZpbGVDbWRJRBIRCg1DSURfRklMRV9OT05FEAASFwoSQ0lEX0ZJ",
            "TEVfTE9HSU5fUkVREIEKEhcKEkNJRF9GSUxFX0xPR0lOX1JFUxCCChITCg5D",
            "SURfRklMRV9TVEFURRCDChIbChZDSURfRklMRV9QVUxMX0RBVEFfUkVREIQK",
            "EhsKFkNJRF9GSUxFX1BVTExfREFUQV9SU1AQhQoSFQoQQ0lEX0ZJTEVfUkVR",
            "VUVTVBCGChIWChFDSURfRklMRV9SRVNQT05TRRCHChIUCg9DSURfRklMRV9O",
            "T1RJRlkQiAoSHQoYQ0lEX0ZJTEVfSEFTX09GRkxJTkVfUkVREIkKEh0KGENJ",
            "RF9GSUxFX0hBU19PRkZMSU5FX1JFUxCKChIdChhDSURfRklMRV9BRERfT0ZG",
            "TElORV9SRVEQiwoSHQoYQ0lEX0ZJTEVfREVMX09GRkxJTkVfUkVREIwKKkIK",
            "ElN3aXRjaFNlcnZpY2VDbWRJRBITCg9DSURfU1dJVENIX05PTkUQABIXChJD",
            "SURfU1dJVENIX1AyUF9DTUQQgQwqyQUKCk90aGVyQ21kSUQSEgoOQ0lEX09U",
            "SEVSX05PTkUQABIYChNDSURfT1RIRVJfSEVBUlRCRUFUEIEOEh8KGkNJRF9P",
            "VEhFUl9TVE9QX1JFQ1ZfUEFDS0VUEIIOEhsKFkNJRF9PVEhFUl9WQUxJREFU",
            "RV9SRVEQgw4SGwoWQ0lEX09USEVSX1ZBTElEQVRFX1JTUBCEDhIjCh5DSURf",
            "T1RIRVJfR0VUX0RFVklDRV9UT0tFTl9SRVEQhQ4SIwoeQ0lEX09USEVSX0dF",
            "VF9ERVZJQ0VfVE9LRU5fUlNQEIYOEhcKEkNJRF9PVEhFUl9ST0xFX1NFVBCH",
            "DhIfChpDSURfT1RIRVJfT05MSU5FX1VTRVJfSU5GTxCIDhIcChdDSURfT1RI",
            "RVJfTVNHX1NFUlZfSU5GTxCJDhIhChxDSURfT1RIRVJfVVNFUl9TVEFUVVNf",
            "VVBEQVRFEIoOEh4KGUNJRF9PVEhFUl9VU0VSX0NOVF9VUERBVEUQiw4SHwoa",
            "Q0lEX09USEVSX1NFUlZFUl9LSUNLX1VTRVIQjQ4SIgodQ0lEX09USEVSX0xP",
            "R0lOX1NUQVRVU19OT1RJRlkQjg4SHwoaQ0lEX09USEVSX1BVU0hfVE9fVVNF",
            "Ul9SRVEQjw4SHwoaQ0lEX09USEVSX1BVU0hfVE9fVVNFUl9SU1AQkA4SHQoY",
            "Q0lEX09USEVSX0dFVF9TSElFTERfUkVREJEOEh0KGENJRF9PVEhFUl9HRVRf",
            "U0hJRUxEX1JTUBCSDhIgChtDSURfT1RIRVJfRklMRV9UUkFOU0ZFUl9SRVEQ",
            "sQ4SIAobQ0lEX09USEVSX0ZJTEVfVFJBTlNGRVJfUlNQELIOEiEKHENJRF9P",
            "VEhFUl9GSUxFX1NFUlZFUl9JUF9SRVEQsw4SIQocQ0lEX09USEVSX0ZJTEVf",
            "U0VSVkVSX0lQX1JTUBC0DirOAQoLQVZDYWxsQ21kSWQSEwoPQ0lEX0FWQ0FM",
            "TF9OT05FEAASHAoXQ0lEX0FWQ0FMTF9JTklUSUFURV9SRVEQgRISHAoXQ0lE",
            "X0FWQ0FMTF9JTklUSUFURV9SRVMQghISGgoVQ0lEX0FWQ0FMTF9IVU5HVVBf",
            "UkVREIMSEhoKFUNJRF9BVkNBTExfSFVOR1VQX1JFUxCEEhIaChVDSURfQVZD",
            "QUxMX0NBTkNFTF9SRVEQhRISGgoVQ0lEX0FWQ0FMTF9DQU5DRUxfUkVTEIYS",
            "KpcCCgpSZXN1bHRUeXBlEhYKElJFRlVTRV9SRUFTT05fTk9ORRAAEh8KG1JF",
            "RlVTRV9SRUFTT05fTk9fTVNHX1NFUlZFUhABEiEKHVJFRlVTRV9SRUFTT05f",
            "TVNHX1NFUlZFUl9GVUxMEAISHgoaUkVGVVNFX1JFQVNPTl9OT19EQl9TRVJW",
            "RVIQAxIhCh1SRUZVU0VfUkVBU09OX05PX0xPR0lOX1NFUlZFUhAEEiEKHVJF",
            "RlVTRV9SRUFTT05fTk9fUk9VVEVfU0VSVkVSEAUSJAogUkVGVVNFX1JFQVNP",
            "Tl9EQl9WQUxJREFURV9GQUlMRUQQBhIhCh1SRUZVU0VfUkVBU09OX1ZFUlNJ",
            "T05fVE9PX09MRBAHKmMKDktpY2tSZWFzb25UeXBlEhQKEEtJQ0tfUkVBU09O",
            "X05PTkUQABIeChpLSUNLX1JFQVNPTl9EVVBMSUNBVEVfVVNFUhABEhsKF0tJ",
            "Q0tfUkVBU09OX01PQklMRV9LSUNLEAIqTQoOT25saW5lTGlzdFR5cGUSGQoV",
            "T05MSU5FX0xJU1RfVFlQRV9OT05FEAASIAocT05MSU5FX0xJU1RfVFlQRV9G",
            "UklFTkRfTElTVBABKmwKDFVzZXJTdGF0VHlwZRIUChBVU0VSX1NUQVRVU19O",
            "T05FEAASFgoSVVNFUl9TVEFUVVNfT05MSU5FEAESFwoTVVNFUl9TVEFUVVNf",
            "T0ZGTElORRACEhUKEVVTRVJfU1RBVFVTX0xFQVZFEAMqVQoLU2Vzc2lvblR5",
            "cGUSFQoRU0VTU0lPTl9UWVBFX05PTkUQABIXChNTRVNTSU9OX1RZUEVfU0lO",
            "R0xFEAESFgoSU0VTU0lPTl9UWVBFX0dST1VQEAIqiwEKB01zZ1R5cGUSGAoU",
            "TVNHX1RZUEVfU0lOR0xFX05PTkUQABIYChRNU0dfVFlQRV9TSU5HTEVfVEVY",
            "VBABEhkKFU1TR19UWVBFX1NJTkdMRV9BVURJTxACEhcKE01TR19UWVBFX0dS",
            "T1VQX1RFWFQQERIYChRNU0dfVFlQRV9HUk9VUF9BVURJTxASKn4KCkNsaWVu",
            "dFR5cGUSFAoQQ0xJRU5UX1RZUEVfTk9ORRAAEhcKE0NMSUVOVF9UWVBFX1dJ",
            "TkRPV1MQARITCg9DTElFTlRfVFlQRV9NQUMQAhITCg9DTElFTlRfVFlQRV9J",
            "T1MQERIXChNDTElFTlRfVFlQRV9BTkRST0lEEBIqSwoJR3JvdXBUeXBlEhMK",
            "D0dST1VQX1RZUEVfTk9ORRAAEhUKEUdST1VQX1RZUEVfTk9STUFMEAESEgoO",
            "R1JPVVBfVFlQRV9UTVAQAipjCg9Hcm91cE1vZGlmeVR5cGUSGgoWR1JPVVBf",
            "TU9ESUZZX1RZUEVfTk9ORRAAEhkKFUdST1VQX01PRElGWV9UWVBFX0FERBAB",
            "EhkKFUdST1VQX01PRElGWV9UWVBFX0RFTBACKlMKEFRyYW5zZmVyRmlsZVR5",
            "cGUSEgoORklMRV9UWVBFX05PTkUQABIUChBGSUxFX1RZUEVfT05MSU5FEAES",
            "FQoRRklMRV9UWVBFX09GRkxJTkUQAipzCg9DbGllbnRGaWxlU3RhdGUSGgoW",
            "Q0xJRU5UX0ZJTEVfUEVFUl9SRUFEWRAAEhYKEkNMSUVOVF9GSUxFX0NBTkNF",
            "TBABEhYKEkNMSUVOVF9GSUxFX1JFRlVTRRACEhQKEENMSUVOVF9GSUxFX0RP",
            "TkUQAyqaAQoOQ2xpZW50RmlsZVJvbGUSGAoUQ0xJRU5UX1JFQUxUSU1FX05P",
            "TkUQABIaChZDTElFTlRfUkVBTFRJTUVfU0VOREVSEAESGgoWQ0xJRU5UX1JF",
            "QUxUSU1FX1JFQ1ZFUhACEhkKFUNMSUVOVF9PRkZMSU5FX1VQTE9BRBADEhsK",
            "F0NMSUVOVF9PRkZMSU5FX0RPV05MT0FEEAQq4QQKD0ZpbGVTZXJ2ZXJFcnJv",
            "chIYChRGSUxFX1NFUlZFUl9FUlJOT19PSxAAEioKJkZJTEVfU0VSVkVSX0VS",
            "Uk5PX0NSRUFURV9UQVNLX0lEX0VSUk9SEAESJwojRklMRV9TRVJWRVJfRVJS",
            "Tk9fQ1JFQVRFX1RBU0tfRVJST1IQAhIpCiVGSUxFX1NFUlZFUl9FUlJOT19M",
            "T0dJTl9JTlZBTElEX1RPS0VOEAMSKwonRklMRV9TRVJWRVJfRVJSTk9fSU5W",
            "QUxJRF9VU0VSX0ZPUl9UQVNLEAQSNAowRklMRV9TRVJWRVJfRVJSTk9fUFVM",
            "TF9EQVRBX1dJVEhfSU5WQUxJRF9UQVNLX0lEEAUSLQopRklMRV9TRVJWRVJf",
            "RVJSTk9fUFVMTF9EQVRBX0lMTElFQUdFX1VTRVIQBhIrCidGSUxFX1NFUlZF",
            "Ul9FUlJOT19QVUxMX0RBVEFfTUtESVJfRVJST1IQBxIvCitGSUxFX1NFUlZF",
            "Ul9FUlJOT19QVUxMX0RBVEFfT1BFTl9GSUxFX0VSUk9SEAgSNgoyRklMRV9T",
            "RVJWRVJfRVJSTk9fUFVMTF9EQVRBX1JFQURfRklMRV9IRUFERVJfRVJST1IQ",
            "CRIvCitGSUxFX1NFUlZFUl9FUlJOT19QVUxMX0RBVEFfQUxMT0NfTUVNX0VS",
            "Uk9SEAoSMQotRklMRV9TRVJWRVJfRVJSTk9fUFVMTF9EQVRBX1NFRUtfT0ZG",
            "U0VUX0VSUk9SEAsSKAokRklMRV9TRVJWRVJfRVJSTk9fUFVMTF9EQVRBX0ZJ",
            "TklTSEVEEAwqRQoRU2Vzc2lvblN0YXR1c1R5cGUSFQoRU0VTU0lPTl9TVEFU",
            "VVNfT0sQABIZChVTRVNTSU9OX1NUQVRVU19ERUxFVEUQASpCChREZXBhcnRt",
            "ZW50U3RhdHVzVHlwZRISCg5ERVBUX1NUQVRVU19PSxAAEhYKEkRFUFRfU1RB",
            "VFVTX0RFTEVURRABQiIKHmNvbS5ibHQudGFsay5jb21tb24uY29kZS5wcm90",
            "b0gDYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::IM.BaseDefine.ServiceID), typeof(global::IM.BaseDefine.LoginCmdID), typeof(global::IM.BaseDefine.BuddyListCmdID), typeof(global::IM.BaseDefine.MessageCmdID), typeof(global::IM.BaseDefine.GroupCmdID), typeof(global::IM.BaseDefine.FileCmdID), typeof(global::IM.BaseDefine.SwitchServiceCmdID), typeof(global::IM.BaseDefine.OtherCmdID), typeof(global::IM.BaseDefine.AVCallCmdId), typeof(global::IM.BaseDefine.ResultType), typeof(global::IM.BaseDefine.KickReasonType), typeof(global::IM.BaseDefine.OnlineListType), typeof(global::IM.BaseDefine.UserStatType), typeof(global::IM.BaseDefine.SessionType), typeof(global::IM.BaseDefine.MsgType), typeof(global::IM.BaseDefine.ClientType), typeof(global::IM.BaseDefine.GroupType), typeof(global::IM.BaseDefine.GroupModifyType), typeof(global::IM.BaseDefine.TransferFileType), typeof(global::IM.BaseDefine.ClientFileState), typeof(global::IM.BaseDefine.ClientFileRole), typeof(global::IM.BaseDefine.FileServerError), typeof(global::IM.BaseDefine.SessionStatusType), typeof(global::IM.BaseDefine.DepartmentStatusType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.BaseDefine.IpAddr), global::IM.BaseDefine.IpAddr.Parser, new[]{ "Ip", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.BaseDefine.UserInfo), global::IM.BaseDefine.UserInfo.Parser, new[]{ "UserId", "UserGender", "UserNickName", "AvatarUrl", "DepartmentId", "Email", "UserRealName", "UserTel", "UserDomain", "Status", "SignInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.BaseDefine.ContactSessionInfo), global::IM.BaseDefine.ContactSessionInfo.Parser, new[]{ "SessionId", "SessionType", "SessionStatus", "UpdatedTime", "LatestMsgId", "LatestMsgData", "LatestMsgType", "LatestMsgFromUserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.BaseDefine.UserStat), global::IM.BaseDefine.UserStat.Parser, new[]{ "UserId", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.BaseDefine.ServerUserStat), global::IM.BaseDefine.ServerUserStat.Parser, new[]{ "UserId", "Status", "ClientType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.BaseDefine.UnreadInfo), global::IM.BaseDefine.UnreadInfo.Parser, new[]{ "SessionId", "SessionType", "UnreadCnt", "LatestMsgId", "LatestMsgData", "LatestMsgType", "LatestMsgFromUserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.BaseDefine.MsgInfo), global::IM.BaseDefine.MsgInfo.Parser, new[]{ "MsgId", "FromSessionId", "CreateTime", "MsgType", "MsgData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.BaseDefine.GroupVersionInfo), global::IM.BaseDefine.GroupVersionInfo.Parser, new[]{ "GroupId", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.BaseDefine.GroupInfo), global::IM.BaseDefine.GroupInfo.Parser, new[]{ "GroupId", "Version", "GroupName", "GroupAvatar", "GroupCreatorId", "GroupType", "ShieldStatus", "GroupMemberList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.BaseDefine.UserTokenInfo), global::IM.BaseDefine.UserTokenInfo.Parser, new[]{ "UserId", "UserType", "Token", "PushCount", "PushType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.BaseDefine.PushResult), global::IM.BaseDefine.PushResult.Parser, new[]{ "UserToken", "ResultCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.BaseDefine.ShieldStatus), global::IM.BaseDefine.ShieldStatus.Parser, new[]{ "UserId", "GroupId", "ShieldStatus_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.BaseDefine.OfflineFileInfo), global::IM.BaseDefine.OfflineFileInfo.Parser, new[]{ "FromUserId", "TaskId", "FileName", "FileSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.BaseDefine.DepartInfo), global::IM.BaseDefine.DepartInfo.Parser, new[]{ "DeptId", "Priority", "DeptName", "ParentDeptId", "DeptStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.BaseDefine.PushShieldStatus), global::IM.BaseDefine.PushShieldStatus.Parser, new[]{ "UserId", "ShieldStatus" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// service id
  /// </summary>
  public enum ServiceID {
    [pbr::OriginalName("SID_NONE")] SidNone = 0,
    /// <summary>
    /// for login
    /// </summary>
    [pbr::OriginalName("SID_LOGIN")] SidLogin = 1,
    /// <summary>
    /// for friend list
    /// </summary>
    [pbr::OriginalName("SID_BUDDY_LIST")] SidBuddyList = 2,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("SID_MSG")] SidMsg = 3,
    /// <summary>
    /// for group message
    /// </summary>
    [pbr::OriginalName("SID_GROUP")] SidGroup = 4,
    [pbr::OriginalName("SID_FILE")] SidFile = 5,
    [pbr::OriginalName("SID_SWITCH_SERVICE")] SidSwitchService = 6,
    [pbr::OriginalName("SID_OTHER")] SidOther = 7,
    [pbr::OriginalName("SID_INTERNAL")] SidInternal = 8,
    /// <summary>
    /// audio or vedio call
    /// </summary>
    [pbr::OriginalName("SID_AVCALL")] SidAvcall = 9,
  }

  /// <summary>
  /// command id for login
  /// </summary>
  public enum LoginCmdID {
    [pbr::OriginalName("CID_LOGIN_NONE")] CidLoginNone = 0,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CID_LOGIN_REQ_MSGSERVER")] CidLoginReqMsgserver = 257,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CID_LOGIN_RES_MSGSERVER")] CidLoginResMsgserver = 258,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CID_LOGIN_REQ_USERLOGIN")] CidLoginReqUserlogin = 259,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CID_LOGIN_RES_USERLOGIN")] CidLoginResUserlogin = 260,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CID_LOGIN_REQ_LOGINOUT")] CidLoginReqLoginout = 261,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CID_LOGIN_RES_LOGINOUT")] CidLoginResLoginout = 262,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CID_LOGIN_KICK_USER")] CidLoginKickUser = 263,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CID_LOGIN_REQ_DEVICETOKEN")] CidLoginReqDevicetoken = 264,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CID_LOGIN_RES_DEVICETOKEN")] CidLoginResDevicetoken = 265,
    [pbr::OriginalName("CID_LOGIN_REQ_KICKPCCLIENT")] CidLoginReqKickpcclient = 266,
    [pbr::OriginalName("CID_LOGIN_RES_KICKPCCLIENT")] CidLoginResKickpcclient = 267,
    /// <summary>
    ///勿扰
    /// </summary>
    [pbr::OriginalName("CID_LOGIN_REQ_PUSH_SHIELD")] CidLoginReqPushShield = 268,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CID_LOGIN_RES_PUSH_SHIELD")] CidLoginResPushShield = 269,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CID_LOGIN_REQ_QUERY_PUSH_SHIELD")] CidLoginReqQueryPushShield = 270,
    [pbr::OriginalName("CID_LOGIN_RES_QUERY_PUSH_SHIELD")] CidLoginResQueryPushShield = 271,
  }

  /// <summary>
  /// command id for buddy list
  /// </summary>
  public enum BuddyListCmdID {
    [pbr::OriginalName("CID_BUDDY_NONE")] CidBuddyNone = 0,
    [pbr::OriginalName("CID_BUDDY_LIST_RECENT_CONTACT_SESSION_REQUEST")] CidBuddyListRecentContactSessionRequest = 513,
    [pbr::OriginalName("CID_BUDDY_LIST_RECENT_CONTACT_SESSION_RESPONSE")] CidBuddyListRecentContactSessionResponse = 514,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CID_BUDDY_LIST_STATUS_NOTIFY")] CidBuddyListStatusNotify = 515,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CID_BUDDY_LIST_USER_INFO_REQUEST")] CidBuddyListUserInfoRequest = 516,
    [pbr::OriginalName("CID_BUDDY_LIST_USER_INFO_RESPONSE")] CidBuddyListUserInfoResponse = 517,
    [pbr::OriginalName("CID_BUDDY_LIST_REMOVE_SESSION_REQ")] CidBuddyListRemoveSessionReq = 518,
    [pbr::OriginalName("CID_BUDDY_LIST_REMOVE_SESSION_RES")] CidBuddyListRemoveSessionRes = 519,
    [pbr::OriginalName("CID_BUDDY_LIST_ALL_USER_REQUEST")] CidBuddyListAllUserRequest = 520,
    [pbr::OriginalName("CID_BUDDY_LIST_ALL_USER_RESPONSE")] CidBuddyListAllUserResponse = 521,
    [pbr::OriginalName("CID_BUDDY_LIST_USERS_STATUS_REQUEST")] CidBuddyListUsersStatusRequest = 522,
    [pbr::OriginalName("CID_BUDDY_LIST_USERS_STATUS_RESPONSE")] CidBuddyListUsersStatusResponse = 523,
    [pbr::OriginalName("CID_BUDDY_LIST_CHANGE_AVATAR_REQUEST")] CidBuddyListChangeAvatarRequest = 524,
    [pbr::OriginalName("CID_BUDDY_LIST_CHANGE_AVATAR_RESPONSE")] CidBuddyListChangeAvatarResponse = 525,
    [pbr::OriginalName("CID_BUDDY_LIST_PC_LOGIN_STATUS_NOTIFY")] CidBuddyListPcLoginStatusNotify = 526,
    [pbr::OriginalName("CID_BUDDY_LIST_REMOVE_SESSION_NOTIFY")] CidBuddyListRemoveSessionNotify = 527,
    [pbr::OriginalName("CID_BUDDY_LIST_DEPARTMENT_REQUEST")] CidBuddyListDepartmentRequest = 528,
    [pbr::OriginalName("CID_BUDDY_LIST_DEPARTMENT_RESPONSE")] CidBuddyListDepartmentResponse = 529,
    /// <summary>
    ///头像更改通知
    /// </summary>
    [pbr::OriginalName("CID_BUDDY_LIST_AVATAR_CHANGED_NOTIFY")] CidBuddyListAvatarChangedNotify = 530,
    /// <summary>
    ///修改个性签名请求
    /// </summary>
    [pbr::OriginalName("CID_BUDDY_LIST_CHANGE_SIGN_INFO_REQUEST")] CidBuddyListChangeSignInfoRequest = 531,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CID_BUDDY_LIST_CHANGE_SIGN_INFO_RESPONSE")] CidBuddyListChangeSignInfoResponse = 532,
    /// <summary>
    ///签名修改通知
    /// </summary>
    [pbr::OriginalName("CID_BUDDY_LIST_SIGN_INFO_CHANGED_NOTIFY")] CidBuddyListSignInfoChangedNotify = 533,
    /// <summary>
    ///修改用户信息REQ
    /// </summary>
    [pbr::OriginalName("CID_BUDDY_LIST_CHANGE_USER_INFO_REQUEST")] CidBuddyListChangeUserInfoRequest = 534,
    /// <summary>
    ///修改用户信息RSP
    /// </summary>
    [pbr::OriginalName("CID_BUDDY_LIST_CHANGE_USER_INFO_RESPONSE")] CidBuddyListChangeUserInfoResponse = 535,
    /// <summary>
    ///修改用户信息通知
    /// </summary>
    [pbr::OriginalName("CID_BUDDY_LIST_USER_INFO_CHANGED_NOTIFY")] CidBuddyListUserInfoChangedNotify = 536,
  }

  /// <summary>
  /// command id for msg
  /// </summary>
  public enum MessageCmdID {
    [pbr::OriginalName("CID_MSG_NONE")] CidMsgNone = 0,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CID_MSG_DATA")] CidMsgData = 769,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CID_MSG_DATA_ACK")] CidMsgDataAck = 770,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CID_MSG_READ_ACK")] CidMsgReadAck = 771,
    /// <summary>
    ///  已读消息通知
    /// </summary>
    [pbr::OriginalName("CID_MSG_READ_NOTIFY")] CidMsgReadNotify = 772,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CID_MSG_TIME_REQUEST")] CidMsgTimeRequest = 773,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CID_MSG_TIME_RESPONSE")] CidMsgTimeResponse = 774,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CID_MSG_UNREAD_CNT_REQUEST")] CidMsgUnreadCntRequest = 775,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CID_MSG_UNREAD_CNT_RESPONSE")] CidMsgUnreadCntResponse = 776,
    /// <summary>
    ///获取指定队列消息
    /// </summary>
    [pbr::OriginalName("CID_MSG_LIST_REQUEST")] CidMsgListRequest = 777,
    [pbr::OriginalName("CID_MSG_LIST_RESPONSE")] CidMsgListResponse = 778,
    [pbr::OriginalName("CID_MSG_GET_LATEST_MSG_ID_REQ")] CidMsgGetLatestMsgIdReq = 779,
    [pbr::OriginalName("CID_MSG_GET_LATEST_MSG_ID_RSP")] CidMsgGetLatestMsgIdRsp = 780,
    [pbr::OriginalName("CID_MSG_GET_BY_MSG_ID_REQ")] CidMsgGetByMsgIdReq = 781,
    [pbr::OriginalName("CID_MSG_GET_BY_MSG_ID_RES")] CidMsgGetByMsgIdRes = 782,
  }

  /// <summary>
  /// command id for group message
  /// </summary>
  public enum GroupCmdID {
    [pbr::OriginalName("CID_GROUP_NONE")] CidGroupNone = 0,
    [pbr::OriginalName("CID_GROUP_NORMAL_LIST_REQUEST")] CidGroupNormalListRequest = 1025,
    [pbr::OriginalName("CID_GROUP_NORMAL_LIST_RESPONSE")] CidGroupNormalListResponse = 1026,
    [pbr::OriginalName("CID_GROUP_INFO_REQUEST")] CidGroupInfoRequest = 1027,
    [pbr::OriginalName("CID_GROUP_INFO_RESPONSE")] CidGroupInfoResponse = 1028,
    [pbr::OriginalName("CID_GROUP_CREATE_REQUEST")] CidGroupCreateRequest = 1029,
    [pbr::OriginalName("CID_GROUP_CREATE_RESPONSE")] CidGroupCreateResponse = 1030,
    [pbr::OriginalName("CID_GROUP_CHANGE_MEMBER_REQUEST")] CidGroupChangeMemberRequest = 1031,
    [pbr::OriginalName("CID_GROUP_CHANGE_MEMBER_RESPONSE")] CidGroupChangeMemberResponse = 1032,
    [pbr::OriginalName("CID_GROUP_SHIELD_GROUP_REQUEST")] CidGroupShieldGroupRequest = 1033,
    [pbr::OriginalName("CID_GROUP_SHIELD_GROUP_RESPONSE")] CidGroupShieldGroupResponse = 1034,
    [pbr::OriginalName("CID_GROUP_CHANGE_MEMBER_NOTIFY")] CidGroupChangeMemberNotify = 1035,
  }

  public enum FileCmdID {
    [pbr::OriginalName("CID_FILE_NONE")] CidFileNone = 0,
    /// <summary>
    /// sender/receiver need to login to
    /// </summary>
    [pbr::OriginalName("CID_FILE_LOGIN_REQ")] CidFileLoginReq = 1281,
    /// <summary>
    /// login success or failure
    /// </summary>
    [pbr::OriginalName("CID_FILE_LOGIN_RES")] CidFileLoginRes = 1282,
    [pbr::OriginalName("CID_FILE_STATE")] CidFileState = 1283,
    [pbr::OriginalName("CID_FILE_PULL_DATA_REQ")] CidFilePullDataReq = 1284,
    [pbr::OriginalName("CID_FILE_PULL_DATA_RSP")] CidFilePullDataRsp = 1285,
    /// <summary>
    /// To MsgServer
    /// </summary>
    [pbr::OriginalName("CID_FILE_REQUEST")] CidFileRequest = 1286,
    /// <summary>
    /// receiver -> sender
    /// </summary>
    [pbr::OriginalName("CID_FILE_RESPONSE")] CidFileResponse = 1287,
    [pbr::OriginalName("CID_FILE_NOTIFY")] CidFileNotify = 1288,
    [pbr::OriginalName("CID_FILE_HAS_OFFLINE_REQ")] CidFileHasOfflineReq = 1289,
    [pbr::OriginalName("CID_FILE_HAS_OFFLINE_RES")] CidFileHasOfflineRes = 1290,
    [pbr::OriginalName("CID_FILE_ADD_OFFLINE_REQ")] CidFileAddOfflineReq = 1291,
    [pbr::OriginalName("CID_FILE_DEL_OFFLINE_REQ")] CidFileDelOfflineReq = 1292,
  }

  /// <summary>
  /// command id for switch service
  /// </summary>
  public enum SwitchServiceCmdID {
    [pbr::OriginalName("CID_SWITCH_NONE")] CidSwitchNone = 0,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CID_SWITCH_P2P_CMD")] CidSwitchP2PCmd = 1537,
  }

  public enum OtherCmdID {
    [pbr::OriginalName("CID_OTHER_NONE")] CidOtherNone = 0,
    [pbr::OriginalName("CID_OTHER_HEARTBEAT")] CidOtherHeartbeat = 1793,
    [pbr::OriginalName("CID_OTHER_STOP_RECV_PACKET")] CidOtherStopRecvPacket = 1794,
    [pbr::OriginalName("CID_OTHER_VALIDATE_REQ")] CidOtherValidateReq = 1795,
    [pbr::OriginalName("CID_OTHER_VALIDATE_RSP")] CidOtherValidateRsp = 1796,
    [pbr::OriginalName("CID_OTHER_GET_DEVICE_TOKEN_REQ")] CidOtherGetDeviceTokenReq = 1797,
    [pbr::OriginalName("CID_OTHER_GET_DEVICE_TOKEN_RSP")] CidOtherGetDeviceTokenRsp = 1798,
    [pbr::OriginalName("CID_OTHER_ROLE_SET")] CidOtherRoleSet = 1799,
    [pbr::OriginalName("CID_OTHER_ONLINE_USER_INFO")] CidOtherOnlineUserInfo = 1800,
    [pbr::OriginalName("CID_OTHER_MSG_SERV_INFO")] CidOtherMsgServInfo = 1801,
    [pbr::OriginalName("CID_OTHER_USER_STATUS_UPDATE")] CidOtherUserStatusUpdate = 1802,
    [pbr::OriginalName("CID_OTHER_USER_CNT_UPDATE")] CidOtherUserCntUpdate = 1803,
    [pbr::OriginalName("CID_OTHER_SERVER_KICK_USER")] CidOtherServerKickUser = 1805,
    [pbr::OriginalName("CID_OTHER_LOGIN_STATUS_NOTIFY")] CidOtherLoginStatusNotify = 1806,
    [pbr::OriginalName("CID_OTHER_PUSH_TO_USER_REQ")] CidOtherPushToUserReq = 1807,
    [pbr::OriginalName("CID_OTHER_PUSH_TO_USER_RSP")] CidOtherPushToUserRsp = 1808,
    [pbr::OriginalName("CID_OTHER_GET_SHIELD_REQ")] CidOtherGetShieldReq = 1809,
    [pbr::OriginalName("CID_OTHER_GET_SHIELD_RSP")] CidOtherGetShieldRsp = 1810,
    [pbr::OriginalName("CID_OTHER_FILE_TRANSFER_REQ")] CidOtherFileTransferReq = 1841,
    [pbr::OriginalName("CID_OTHER_FILE_TRANSFER_RSP")] CidOtherFileTransferRsp = 1842,
    [pbr::OriginalName("CID_OTHER_FILE_SERVER_IP_REQ")] CidOtherFileServerIpReq = 1843,
    [pbr::OriginalName("CID_OTHER_FILE_SERVER_IP_RSP")] CidOtherFileServerIpRsp = 1844,
  }

  public enum AVCallCmdId {
    [pbr::OriginalName("CID_AVCALL_NONE")] CidAvcallNone = 0,
    [pbr::OriginalName("CID_AVCALL_INITIATE_REQ")] CidAvcallInitiateReq = 2305,
    [pbr::OriginalName("CID_AVCALL_INITIATE_RES")] CidAvcallInitiateRes = 2306,
    [pbr::OriginalName("CID_AVCALL_HUNGUP_REQ")] CidAvcallHungupReq = 2307,
    [pbr::OriginalName("CID_AVCALL_HUNGUP_RES")] CidAvcallHungupRes = 2308,
    [pbr::OriginalName("CID_AVCALL_CANCEL_REQ")] CidAvcallCancelReq = 2309,
    [pbr::OriginalName("CID_AVCALL_CANCEL_RES")] CidAvcallCancelRes = 2310,
  }

  public enum ResultType {
    [pbr::OriginalName("REFUSE_REASON_NONE")] RefuseReasonNone = 0,
    [pbr::OriginalName("REFUSE_REASON_NO_MSG_SERVER")] RefuseReasonNoMsgServer = 1,
    [pbr::OriginalName("REFUSE_REASON_MSG_SERVER_FULL")] RefuseReasonMsgServerFull = 2,
    [pbr::OriginalName("REFUSE_REASON_NO_DB_SERVER")] RefuseReasonNoDbServer = 3,
    [pbr::OriginalName("REFUSE_REASON_NO_LOGIN_SERVER")] RefuseReasonNoLoginServer = 4,
    [pbr::OriginalName("REFUSE_REASON_NO_ROUTE_SERVER")] RefuseReasonNoRouteServer = 5,
    [pbr::OriginalName("REFUSE_REASON_DB_VALIDATE_FAILED")] RefuseReasonDbValidateFailed = 6,
    [pbr::OriginalName("REFUSE_REASON_VERSION_TOO_OLD")] RefuseReasonVersionTooOld = 7,
  }

  public enum KickReasonType {
    [pbr::OriginalName("KICK_REASON_NONE")] KickReasonNone = 0,
    [pbr::OriginalName("KICK_REASON_DUPLICATE_USER")] KickReasonDuplicateUser = 1,
    [pbr::OriginalName("KICK_REASON_MOBILE_KICK")] KickReasonMobileKick = 2,
  }

  public enum OnlineListType {
    [pbr::OriginalName("ONLINE_LIST_TYPE_NONE")] None = 0,
    [pbr::OriginalName("ONLINE_LIST_TYPE_FRIEND_LIST")] FriendList = 1,
  }

  public enum UserStatType {
    [pbr::OriginalName("USER_STATUS_NONE")] UserStatusNone = 0,
    [pbr::OriginalName("USER_STATUS_ONLINE")] UserStatusOnline = 1,
    [pbr::OriginalName("USER_STATUS_OFFLINE")] UserStatusOffline = 2,
    [pbr::OriginalName("USER_STATUS_LEAVE")] UserStatusLeave = 3,
  }

  public enum SessionType {
    [pbr::OriginalName("SESSION_TYPE_NONE")] None = 0,
    /// <summary>
    ///单个用户会话
    /// </summary>
    [pbr::OriginalName("SESSION_TYPE_SINGLE")] Single = 1,
    /// <summary>
    ///群会话
    /// </summary>
    [pbr::OriginalName("SESSION_TYPE_GROUP")] Group = 2,
  }

  public enum MsgType {
    [pbr::OriginalName("MSG_TYPE_SINGLE_NONE")] SingleNone = 0,
    [pbr::OriginalName("MSG_TYPE_SINGLE_TEXT")] SingleText = 1,
    [pbr::OriginalName("MSG_TYPE_SINGLE_AUDIO")] SingleAudio = 2,
    [pbr::OriginalName("MSG_TYPE_GROUP_TEXT")] GroupText = 17,
    [pbr::OriginalName("MSG_TYPE_GROUP_AUDIO")] GroupAudio = 18,
  }

  public enum ClientType {
    [pbr::OriginalName("CLIENT_TYPE_NONE")] None = 0,
    [pbr::OriginalName("CLIENT_TYPE_WINDOWS")] Windows = 1,
    [pbr::OriginalName("CLIENT_TYPE_MAC")] Mac = 2,
    [pbr::OriginalName("CLIENT_TYPE_IOS")] Ios = 17,
    [pbr::OriginalName("CLIENT_TYPE_ANDROID")] Android = 18,
  }

  public enum GroupType {
    [pbr::OriginalName("GROUP_TYPE_NONE")] None = 0,
    [pbr::OriginalName("GROUP_TYPE_NORMAL")] Normal = 1,
    [pbr::OriginalName("GROUP_TYPE_TMP")] Tmp = 2,
  }

  public enum GroupModifyType {
    [pbr::OriginalName("GROUP_MODIFY_TYPE_NONE")] None = 0,
    [pbr::OriginalName("GROUP_MODIFY_TYPE_ADD")] Add = 1,
    [pbr::OriginalName("GROUP_MODIFY_TYPE_DEL")] Del = 2,
  }

  public enum TransferFileType {
    [pbr::OriginalName("FILE_TYPE_NONE")] FileTypeNone = 0,
    [pbr::OriginalName("FILE_TYPE_ONLINE")] FileTypeOnline = 1,
    [pbr::OriginalName("FILE_TYPE_OFFLINE")] FileTypeOffline = 2,
  }

  public enum ClientFileState {
    [pbr::OriginalName("CLIENT_FILE_PEER_READY")] ClientFilePeerReady = 0,
    [pbr::OriginalName("CLIENT_FILE_CANCEL")] ClientFileCancel = 1,
    [pbr::OriginalName("CLIENT_FILE_REFUSE")] ClientFileRefuse = 2,
    [pbr::OriginalName("CLIENT_FILE_DONE")] ClientFileDone = 3,
  }

  public enum ClientFileRole {
    [pbr::OriginalName("CLIENT_REALTIME_NONE")] ClientRealtimeNone = 0,
    [pbr::OriginalName("CLIENT_REALTIME_SENDER")] ClientRealtimeSender = 1,
    [pbr::OriginalName("CLIENT_REALTIME_RECVER")] ClientRealtimeRecver = 2,
    [pbr::OriginalName("CLIENT_OFFLINE_UPLOAD")] ClientOfflineUpload = 3,
    [pbr::OriginalName("CLIENT_OFFLINE_DOWNLOAD")] ClientOfflineDownload = 4,
  }

  public enum FileServerError {
    [pbr::OriginalName("FILE_SERVER_ERRNO_OK")] FileServerErrnoOk = 0,
    [pbr::OriginalName("FILE_SERVER_ERRNO_CREATE_TASK_ID_ERROR")] FileServerErrnoCreateTaskIdError = 1,
    [pbr::OriginalName("FILE_SERVER_ERRNO_CREATE_TASK_ERROR")] FileServerErrnoCreateTaskError = 2,
    [pbr::OriginalName("FILE_SERVER_ERRNO_LOGIN_INVALID_TOKEN")] FileServerErrnoLoginInvalidToken = 3,
    [pbr::OriginalName("FILE_SERVER_ERRNO_INVALID_USER_FOR_TASK")] FileServerErrnoInvalidUserForTask = 4,
    [pbr::OriginalName("FILE_SERVER_ERRNO_PULL_DATA_WITH_INVALID_TASK_ID")] FileServerErrnoPullDataWithInvalidTaskId = 5,
    [pbr::OriginalName("FILE_SERVER_ERRNO_PULL_DATA_ILLIEAGE_USER")] FileServerErrnoPullDataIllieageUser = 6,
    [pbr::OriginalName("FILE_SERVER_ERRNO_PULL_DATA_MKDIR_ERROR")] FileServerErrnoPullDataMkdirError = 7,
    [pbr::OriginalName("FILE_SERVER_ERRNO_PULL_DATA_OPEN_FILE_ERROR")] FileServerErrnoPullDataOpenFileError = 8,
    [pbr::OriginalName("FILE_SERVER_ERRNO_PULL_DATA_READ_FILE_HEADER_ERROR")] FileServerErrnoPullDataReadFileHeaderError = 9,
    [pbr::OriginalName("FILE_SERVER_ERRNO_PULL_DATA_ALLOC_MEM_ERROR")] FileServerErrnoPullDataAllocMemError = 10,
    [pbr::OriginalName("FILE_SERVER_ERRNO_PULL_DATA_SEEK_OFFSET_ERROR")] FileServerErrnoPullDataSeekOffsetError = 11,
    [pbr::OriginalName("FILE_SERVER_ERRNO_PULL_DATA_FINISHED")] FileServerErrnoPullDataFinished = 12,
  }

  public enum SessionStatusType {
    [pbr::OriginalName("SESSION_STATUS_OK")] SessionStatusOk = 0,
    [pbr::OriginalName("SESSION_STATUS_DELETE")] SessionStatusDelete = 1,
  }

  public enum DepartmentStatusType {
    [pbr::OriginalName("DEPT_STATUS_OK")] DeptStatusOk = 0,
    [pbr::OriginalName("DEPT_STATUS_DELETE")] DeptStatusDelete = 1,
  }

  #endregion

  #region Messages
  public sealed partial class IpAddr : pb::IMessage<IpAddr> {
    private static readonly pb::MessageParser<IpAddr> _parser = new pb::MessageParser<IpAddr>(() => new IpAddr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IpAddr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.BaseDefine.IMBaseDefineReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IpAddr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IpAddr(IpAddr other) : this() {
      ip_ = other.ip_;
      port_ = other.port_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IpAddr Clone() {
      return new IpAddr(this);
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 1;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IpAddr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IpAddr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Port);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IpAddr other) {
      if (other == null) {
        return;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserInfo : pb::IMessage<UserInfo> {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.BaseDefine.IMBaseDefineReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo(UserInfo other) : this() {
      userId_ = other.userId_;
      userGender_ = other.userGender_;
      userNickName_ = other.userNickName_;
      avatarUrl_ = other.avatarUrl_;
      departmentId_ = other.departmentId_;
      email_ = other.email_;
      userRealName_ = other.userRealName_;
      userTel_ = other.userTel_;
      userDomain_ = other.userDomain_;
      status_ = other.status_;
      signInfo_ = other.signInfo_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo Clone() {
      return new UserInfo(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "user_gender" field.</summary>
    public const int UserGenderFieldNumber = 2;
    private uint userGender_;
    /// <summary>
    ///// 用户性别,男：1 女：2 人妖/外星人：0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserGender {
      get { return userGender_; }
      set {
        userGender_ = value;
      }
    }

    /// <summary>Field number for the "user_nick_name" field.</summary>
    public const int UserNickNameFieldNumber = 3;
    private string userNickName_ = "";
    /// <summary>
    ///绰号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserNickName {
      get { return userNickName_; }
      set {
        userNickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 4;
    private string avatarUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "department_id" field.</summary>
    public const int DepartmentIdFieldNumber = 5;
    private ulong departmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DepartmentId {
      get { return departmentId_; }
      set {
        departmentId_ = value;
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 6;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_real_name" field.</summary>
    public const int UserRealNameFieldNumber = 7;
    private string userRealName_ = "";
    /// <summary>
    ///真名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserRealName {
      get { return userRealName_; }
      set {
        userRealName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_tel" field.</summary>
    public const int UserTelFieldNumber = 8;
    private string userTel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserTel {
      get { return userTel_; }
      set {
        userTel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_domain" field.</summary>
    public const int UserDomainFieldNumber = 9;
    private string userDomain_ = "";
    /// <summary>
    ///用户名拼音
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserDomain {
      get { return userDomain_; }
      set {
        userDomain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 10;
    private uint status_;
    /// <summary>
    ///0:在职  1. 试用期 2. 正式 3. 离职 4.实习,  client端需要对“离职”进行不展示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "sign_info" field.</summary>
    public const int SignInfoFieldNumber = 11;
    private string signInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SignInfo {
      get { return signInfo_; }
      set {
        signInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (UserGender != other.UserGender) return false;
      if (UserNickName != other.UserNickName) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if (DepartmentId != other.DepartmentId) return false;
      if (Email != other.Email) return false;
      if (UserRealName != other.UserRealName) return false;
      if (UserTel != other.UserTel) return false;
      if (UserDomain != other.UserDomain) return false;
      if (Status != other.Status) return false;
      if (SignInfo != other.SignInfo) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (UserGender != 0) hash ^= UserGender.GetHashCode();
      if (UserNickName.Length != 0) hash ^= UserNickName.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      if (DepartmentId != 0UL) hash ^= DepartmentId.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (UserRealName.Length != 0) hash ^= UserRealName.GetHashCode();
      if (UserTel.Length != 0) hash ^= UserTel.GetHashCode();
      if (UserDomain.Length != 0) hash ^= UserDomain.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (SignInfo.Length != 0) hash ^= SignInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (UserGender != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserGender);
      }
      if (UserNickName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserNickName);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AvatarUrl);
      }
      if (DepartmentId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(DepartmentId);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Email);
      }
      if (UserRealName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(UserRealName);
      }
      if (UserTel.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(UserTel);
      }
      if (UserDomain.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(UserDomain);
      }
      if (Status != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Status);
      }
      if (SignInfo.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SignInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (UserGender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserGender);
      }
      if (UserNickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserNickName);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      if (DepartmentId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DepartmentId);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (UserRealName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserRealName);
      }
      if (UserTel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserTel);
      }
      if (UserDomain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserDomain);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (SignInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SignInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.UserGender != 0) {
        UserGender = other.UserGender;
      }
      if (other.UserNickName.Length != 0) {
        UserNickName = other.UserNickName;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      if (other.DepartmentId != 0UL) {
        DepartmentId = other.DepartmentId;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.UserRealName.Length != 0) {
        UserRealName = other.UserRealName;
      }
      if (other.UserTel.Length != 0) {
        UserTel = other.UserTel;
      }
      if (other.UserDomain.Length != 0) {
        UserDomain = other.UserDomain;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.SignInfo.Length != 0) {
        SignInfo = other.SignInfo;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            UserGender = input.ReadUInt32();
            break;
          }
          case 26: {
            UserNickName = input.ReadString();
            break;
          }
          case 34: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 40: {
            DepartmentId = input.ReadUInt64();
            break;
          }
          case 50: {
            Email = input.ReadString();
            break;
          }
          case 58: {
            UserRealName = input.ReadString();
            break;
          }
          case 66: {
            UserTel = input.ReadString();
            break;
          }
          case 74: {
            UserDomain = input.ReadString();
            break;
          }
          case 80: {
            Status = input.ReadUInt32();
            break;
          }
          case 90: {
            SignInfo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContactSessionInfo : pb::IMessage<ContactSessionInfo> {
    private static readonly pb::MessageParser<ContactSessionInfo> _parser = new pb::MessageParser<ContactSessionInfo>(() => new ContactSessionInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContactSessionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.BaseDefine.IMBaseDefineReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContactSessionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContactSessionInfo(ContactSessionInfo other) : this() {
      sessionId_ = other.sessionId_;
      sessionType_ = other.sessionType_;
      sessionStatus_ = other.sessionStatus_;
      updatedTime_ = other.updatedTime_;
      latestMsgId_ = other.latestMsgId_;
      latestMsgData_ = other.latestMsgData_;
      latestMsgType_ = other.latestMsgType_;
      latestMsgFromUserId_ = other.latestMsgFromUserId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContactSessionInfo Clone() {
      return new ContactSessionInfo(this);
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 1;
    private ulong sessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = value;
      }
    }

    /// <summary>Field number for the "session_type" field.</summary>
    public const int SessionTypeFieldNumber = 2;
    private global::IM.BaseDefine.SessionType sessionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.SessionType SessionType {
      get { return sessionType_; }
      set {
        sessionType_ = value;
      }
    }

    /// <summary>Field number for the "session_status" field.</summary>
    public const int SessionStatusFieldNumber = 3;
    private global::IM.BaseDefine.SessionStatusType sessionStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.SessionStatusType SessionStatus {
      get { return sessionStatus_; }
      set {
        sessionStatus_ = value;
      }
    }

    /// <summary>Field number for the "updated_time" field.</summary>
    public const int UpdatedTimeFieldNumber = 4;
    private uint updatedTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UpdatedTime {
      get { return updatedTime_; }
      set {
        updatedTime_ = value;
      }
    }

    /// <summary>Field number for the "latest_msg_id" field.</summary>
    public const int LatestMsgIdFieldNumber = 5;
    private ulong latestMsgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LatestMsgId {
      get { return latestMsgId_; }
      set {
        latestMsgId_ = value;
      }
    }

    /// <summary>Field number for the "latest_msg_data" field.</summary>
    public const int LatestMsgDataFieldNumber = 6;
    private pb::ByteString latestMsgData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LatestMsgData {
      get { return latestMsgData_; }
      set {
        latestMsgData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latest_msg_type" field.</summary>
    public const int LatestMsgTypeFieldNumber = 7;
    private global::IM.BaseDefine.MsgType latestMsgType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.MsgType LatestMsgType {
      get { return latestMsgType_; }
      set {
        latestMsgType_ = value;
      }
    }

    /// <summary>Field number for the "latest_msg_from_user_id" field.</summary>
    public const int LatestMsgFromUserIdFieldNumber = 8;
    private ulong latestMsgFromUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LatestMsgFromUserId {
      get { return latestMsgFromUserId_; }
      set {
        latestMsgFromUserId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContactSessionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContactSessionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionId != other.SessionId) return false;
      if (SessionType != other.SessionType) return false;
      if (SessionStatus != other.SessionStatus) return false;
      if (UpdatedTime != other.UpdatedTime) return false;
      if (LatestMsgId != other.LatestMsgId) return false;
      if (LatestMsgData != other.LatestMsgData) return false;
      if (LatestMsgType != other.LatestMsgType) return false;
      if (LatestMsgFromUserId != other.LatestMsgFromUserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionId != 0UL) hash ^= SessionId.GetHashCode();
      if (SessionType != 0) hash ^= SessionType.GetHashCode();
      if (SessionStatus != 0) hash ^= SessionStatus.GetHashCode();
      if (UpdatedTime != 0) hash ^= UpdatedTime.GetHashCode();
      if (LatestMsgId != 0UL) hash ^= LatestMsgId.GetHashCode();
      if (LatestMsgData.Length != 0) hash ^= LatestMsgData.GetHashCode();
      if (LatestMsgType != 0) hash ^= LatestMsgType.GetHashCode();
      if (LatestMsgFromUserId != 0UL) hash ^= LatestMsgFromUserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SessionId);
      }
      if (SessionType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SessionType);
      }
      if (SessionStatus != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) SessionStatus);
      }
      if (UpdatedTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UpdatedTime);
      }
      if (LatestMsgId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(LatestMsgId);
      }
      if (LatestMsgData.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(LatestMsgData);
      }
      if (LatestMsgType != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) LatestMsgType);
      }
      if (LatestMsgFromUserId != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(LatestMsgFromUserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SessionId);
      }
      if (SessionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SessionType);
      }
      if (SessionStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SessionStatus);
      }
      if (UpdatedTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UpdatedTime);
      }
      if (LatestMsgId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LatestMsgId);
      }
      if (LatestMsgData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LatestMsgData);
      }
      if (LatestMsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LatestMsgType);
      }
      if (LatestMsgFromUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LatestMsgFromUserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContactSessionInfo other) {
      if (other == null) {
        return;
      }
      if (other.SessionId != 0UL) {
        SessionId = other.SessionId;
      }
      if (other.SessionType != 0) {
        SessionType = other.SessionType;
      }
      if (other.SessionStatus != 0) {
        SessionStatus = other.SessionStatus;
      }
      if (other.UpdatedTime != 0) {
        UpdatedTime = other.UpdatedTime;
      }
      if (other.LatestMsgId != 0UL) {
        LatestMsgId = other.LatestMsgId;
      }
      if (other.LatestMsgData.Length != 0) {
        LatestMsgData = other.LatestMsgData;
      }
      if (other.LatestMsgType != 0) {
        LatestMsgType = other.LatestMsgType;
      }
      if (other.LatestMsgFromUserId != 0UL) {
        LatestMsgFromUserId = other.LatestMsgFromUserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SessionId = input.ReadUInt64();
            break;
          }
          case 16: {
            sessionType_ = (global::IM.BaseDefine.SessionType) input.ReadEnum();
            break;
          }
          case 24: {
            sessionStatus_ = (global::IM.BaseDefine.SessionStatusType) input.ReadEnum();
            break;
          }
          case 32: {
            UpdatedTime = input.ReadUInt32();
            break;
          }
          case 40: {
            LatestMsgId = input.ReadUInt64();
            break;
          }
          case 50: {
            LatestMsgData = input.ReadBytes();
            break;
          }
          case 56: {
            latestMsgType_ = (global::IM.BaseDefine.MsgType) input.ReadEnum();
            break;
          }
          case 64: {
            LatestMsgFromUserId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserStat : pb::IMessage<UserStat> {
    private static readonly pb::MessageParser<UserStat> _parser = new pb::MessageParser<UserStat>(() => new UserStat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserStat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.BaseDefine.IMBaseDefineReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserStat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserStat(UserStat other) : this() {
      userId_ = other.userId_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserStat Clone() {
      return new UserStat(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::IM.BaseDefine.UserStatType status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.UserStatType Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserStat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserStat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserStat other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            status_ = (global::IM.BaseDefine.UserStatType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerUserStat : pb::IMessage<ServerUserStat> {
    private static readonly pb::MessageParser<ServerUserStat> _parser = new pb::MessageParser<ServerUserStat>(() => new ServerUserStat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerUserStat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.BaseDefine.IMBaseDefineReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerUserStat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerUserStat(ServerUserStat other) : this() {
      userId_ = other.userId_;
      status_ = other.status_;
      clientType_ = other.clientType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerUserStat Clone() {
      return new ServerUserStat(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::IM.BaseDefine.UserStatType status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.UserStatType Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "client_type" field.</summary>
    public const int ClientTypeFieldNumber = 3;
    private global::IM.BaseDefine.ClientType clientType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.ClientType ClientType {
      get { return clientType_; }
      set {
        clientType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerUserStat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerUserStat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Status != other.Status) return false;
      if (ClientType != other.ClientType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (ClientType != 0) hash ^= ClientType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (ClientType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ClientType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (ClientType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClientType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerUserStat other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.ClientType != 0) {
        ClientType = other.ClientType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            status_ = (global::IM.BaseDefine.UserStatType) input.ReadEnum();
            break;
          }
          case 24: {
            clientType_ = (global::IM.BaseDefine.ClientType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnreadInfo : pb::IMessage<UnreadInfo> {
    private static readonly pb::MessageParser<UnreadInfo> _parser = new pb::MessageParser<UnreadInfo>(() => new UnreadInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnreadInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.BaseDefine.IMBaseDefineReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnreadInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnreadInfo(UnreadInfo other) : this() {
      sessionId_ = other.sessionId_;
      sessionType_ = other.sessionType_;
      unreadCnt_ = other.unreadCnt_;
      latestMsgId_ = other.latestMsgId_;
      latestMsgData_ = other.latestMsgData_;
      latestMsgType_ = other.latestMsgType_;
      latestMsgFromUserId_ = other.latestMsgFromUserId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnreadInfo Clone() {
      return new UnreadInfo(this);
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 1;
    private ulong sessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = value;
      }
    }

    /// <summary>Field number for the "session_type" field.</summary>
    public const int SessionTypeFieldNumber = 2;
    private global::IM.BaseDefine.SessionType sessionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.SessionType SessionType {
      get { return sessionType_; }
      set {
        sessionType_ = value;
      }
    }

    /// <summary>Field number for the "unread_cnt" field.</summary>
    public const int UnreadCntFieldNumber = 3;
    private uint unreadCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnreadCnt {
      get { return unreadCnt_; }
      set {
        unreadCnt_ = value;
      }
    }

    /// <summary>Field number for the "latest_msg_id" field.</summary>
    public const int LatestMsgIdFieldNumber = 4;
    private ulong latestMsgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LatestMsgId {
      get { return latestMsgId_; }
      set {
        latestMsgId_ = value;
      }
    }

    /// <summary>Field number for the "latest_msg_data" field.</summary>
    public const int LatestMsgDataFieldNumber = 5;
    private pb::ByteString latestMsgData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LatestMsgData {
      get { return latestMsgData_; }
      set {
        latestMsgData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latest_msg_type" field.</summary>
    public const int LatestMsgTypeFieldNumber = 6;
    private global::IM.BaseDefine.MsgType latestMsgType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.MsgType LatestMsgType {
      get { return latestMsgType_; }
      set {
        latestMsgType_ = value;
      }
    }

    /// <summary>Field number for the "latest_msg_from_user_id" field.</summary>
    public const int LatestMsgFromUserIdFieldNumber = 7;
    private ulong latestMsgFromUserId_;
    /// <summary>
    ///发送得用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LatestMsgFromUserId {
      get { return latestMsgFromUserId_; }
      set {
        latestMsgFromUserId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnreadInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnreadInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionId != other.SessionId) return false;
      if (SessionType != other.SessionType) return false;
      if (UnreadCnt != other.UnreadCnt) return false;
      if (LatestMsgId != other.LatestMsgId) return false;
      if (LatestMsgData != other.LatestMsgData) return false;
      if (LatestMsgType != other.LatestMsgType) return false;
      if (LatestMsgFromUserId != other.LatestMsgFromUserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionId != 0UL) hash ^= SessionId.GetHashCode();
      if (SessionType != 0) hash ^= SessionType.GetHashCode();
      if (UnreadCnt != 0) hash ^= UnreadCnt.GetHashCode();
      if (LatestMsgId != 0UL) hash ^= LatestMsgId.GetHashCode();
      if (LatestMsgData.Length != 0) hash ^= LatestMsgData.GetHashCode();
      if (LatestMsgType != 0) hash ^= LatestMsgType.GetHashCode();
      if (LatestMsgFromUserId != 0UL) hash ^= LatestMsgFromUserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SessionId);
      }
      if (SessionType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SessionType);
      }
      if (UnreadCnt != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UnreadCnt);
      }
      if (LatestMsgId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(LatestMsgId);
      }
      if (LatestMsgData.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(LatestMsgData);
      }
      if (LatestMsgType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) LatestMsgType);
      }
      if (LatestMsgFromUserId != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(LatestMsgFromUserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SessionId);
      }
      if (SessionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SessionType);
      }
      if (UnreadCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnreadCnt);
      }
      if (LatestMsgId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LatestMsgId);
      }
      if (LatestMsgData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LatestMsgData);
      }
      if (LatestMsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LatestMsgType);
      }
      if (LatestMsgFromUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LatestMsgFromUserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnreadInfo other) {
      if (other == null) {
        return;
      }
      if (other.SessionId != 0UL) {
        SessionId = other.SessionId;
      }
      if (other.SessionType != 0) {
        SessionType = other.SessionType;
      }
      if (other.UnreadCnt != 0) {
        UnreadCnt = other.UnreadCnt;
      }
      if (other.LatestMsgId != 0UL) {
        LatestMsgId = other.LatestMsgId;
      }
      if (other.LatestMsgData.Length != 0) {
        LatestMsgData = other.LatestMsgData;
      }
      if (other.LatestMsgType != 0) {
        LatestMsgType = other.LatestMsgType;
      }
      if (other.LatestMsgFromUserId != 0UL) {
        LatestMsgFromUserId = other.LatestMsgFromUserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SessionId = input.ReadUInt64();
            break;
          }
          case 16: {
            sessionType_ = (global::IM.BaseDefine.SessionType) input.ReadEnum();
            break;
          }
          case 24: {
            UnreadCnt = input.ReadUInt32();
            break;
          }
          case 32: {
            LatestMsgId = input.ReadUInt64();
            break;
          }
          case 42: {
            LatestMsgData = input.ReadBytes();
            break;
          }
          case 48: {
            latestMsgType_ = (global::IM.BaseDefine.MsgType) input.ReadEnum();
            break;
          }
          case 56: {
            LatestMsgFromUserId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgInfo : pb::IMessage<MsgInfo> {
    private static readonly pb::MessageParser<MsgInfo> _parser = new pb::MessageParser<MsgInfo>(() => new MsgInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.BaseDefine.IMBaseDefineReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgInfo(MsgInfo other) : this() {
      msgId_ = other.msgId_;
      fromSessionId_ = other.fromSessionId_;
      createTime_ = other.createTime_;
      msgType_ = other.msgType_;
      msgData_ = other.msgData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgInfo Clone() {
      return new MsgInfo(this);
    }

    /// <summary>Field number for the "msg_id" field.</summary>
    public const int MsgIdFieldNumber = 1;
    private ulong msgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    /// <summary>Field number for the "from_session_id" field.</summary>
    public const int FromSessionIdFieldNumber = 2;
    private ulong fromSessionId_;
    /// <summary>
    ///发送的用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromSessionId {
      get { return fromSessionId_; }
      set {
        fromSessionId_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 3;
    private uint createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "msg_type" field.</summary>
    public const int MsgTypeFieldNumber = 4;
    private global::IM.BaseDefine.MsgType msgType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.MsgType MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    /// <summary>Field number for the "msg_data" field.</summary>
    public const int MsgDataFieldNumber = 5;
    private pb::ByteString msgData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MsgData {
      get { return msgData_; }
      set {
        msgData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgId != other.MsgId) return false;
      if (FromSessionId != other.FromSessionId) return false;
      if (CreateTime != other.CreateTime) return false;
      if (MsgType != other.MsgType) return false;
      if (MsgData != other.MsgData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgId != 0UL) hash ^= MsgId.GetHashCode();
      if (FromSessionId != 0UL) hash ^= FromSessionId.GetHashCode();
      if (CreateTime != 0) hash ^= CreateTime.GetHashCode();
      if (MsgType != 0) hash ^= MsgType.GetHashCode();
      if (MsgData.Length != 0) hash ^= MsgData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MsgId);
      }
      if (FromSessionId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(FromSessionId);
      }
      if (CreateTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CreateTime);
      }
      if (MsgType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) MsgType);
      }
      if (MsgData.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(MsgData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgId);
      }
      if (FromSessionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromSessionId);
      }
      if (CreateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateTime);
      }
      if (MsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MsgType);
      }
      if (MsgData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MsgData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgInfo other) {
      if (other == null) {
        return;
      }
      if (other.MsgId != 0UL) {
        MsgId = other.MsgId;
      }
      if (other.FromSessionId != 0UL) {
        FromSessionId = other.FromSessionId;
      }
      if (other.CreateTime != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.MsgType != 0) {
        MsgType = other.MsgType;
      }
      if (other.MsgData.Length != 0) {
        MsgData = other.MsgData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MsgId = input.ReadUInt64();
            break;
          }
          case 16: {
            FromSessionId = input.ReadUInt64();
            break;
          }
          case 24: {
            CreateTime = input.ReadUInt32();
            break;
          }
          case 32: {
            msgType_ = (global::IM.BaseDefine.MsgType) input.ReadEnum();
            break;
          }
          case 42: {
            MsgData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GroupVersionInfo : pb::IMessage<GroupVersionInfo> {
    private static readonly pb::MessageParser<GroupVersionInfo> _parser = new pb::MessageParser<GroupVersionInfo>(() => new GroupVersionInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupVersionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.BaseDefine.IMBaseDefineReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupVersionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupVersionInfo(GroupVersionInfo other) : this() {
      groupId_ = other.groupId_;
      version_ = other.version_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupVersionInfo Clone() {
      return new GroupVersionInfo(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private ulong groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupVersionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupVersionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (Version != other.Version) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId != 0UL) hash ^= GroupId.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GroupId);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GroupId);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupVersionInfo other) {
      if (other == null) {
        return;
      }
      if (other.GroupId != 0UL) {
        GroupId = other.GroupId;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadUInt64();
            break;
          }
          case 16: {
            Version = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GroupInfo : pb::IMessage<GroupInfo> {
    private static readonly pb::MessageParser<GroupInfo> _parser = new pb::MessageParser<GroupInfo>(() => new GroupInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.BaseDefine.IMBaseDefineReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupInfo(GroupInfo other) : this() {
      groupId_ = other.groupId_;
      version_ = other.version_;
      groupName_ = other.groupName_;
      groupAvatar_ = other.groupAvatar_;
      groupCreatorId_ = other.groupCreatorId_;
      groupType_ = other.groupType_;
      shieldStatus_ = other.shieldStatus_;
      groupMemberList_ = other.groupMemberList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupInfo Clone() {
      return new GroupInfo(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private ulong groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "group_name" field.</summary>
    public const int GroupNameFieldNumber = 3;
    private string groupName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupName {
      get { return groupName_; }
      set {
        groupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group_avatar" field.</summary>
    public const int GroupAvatarFieldNumber = 4;
    private string groupAvatar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupAvatar {
      get { return groupAvatar_; }
      set {
        groupAvatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group_creator_id" field.</summary>
    public const int GroupCreatorIdFieldNumber = 5;
    private ulong groupCreatorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GroupCreatorId {
      get { return groupCreatorId_; }
      set {
        groupCreatorId_ = value;
      }
    }

    /// <summary>Field number for the "group_type" field.</summary>
    public const int GroupTypeFieldNumber = 6;
    private global::IM.BaseDefine.GroupType groupType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.GroupType GroupType {
      get { return groupType_; }
      set {
        groupType_ = value;
      }
    }

    /// <summary>Field number for the "shield_status" field.</summary>
    public const int ShieldStatusFieldNumber = 7;
    private uint shieldStatus_;
    /// <summary>
    ///1: shield  0: not shield
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShieldStatus {
      get { return shieldStatus_; }
      set {
        shieldStatus_ = value;
      }
    }

    /// <summary>Field number for the "group_member_list" field.</summary>
    public const int GroupMemberListFieldNumber = 8;
    private static readonly pb::FieldCodec<ulong> _repeated_groupMemberList_codec
        = pb::FieldCodec.ForUInt64(66);
    private readonly pbc::RepeatedField<ulong> groupMemberList_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> GroupMemberList {
      get { return groupMemberList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (Version != other.Version) return false;
      if (GroupName != other.GroupName) return false;
      if (GroupAvatar != other.GroupAvatar) return false;
      if (GroupCreatorId != other.GroupCreatorId) return false;
      if (GroupType != other.GroupType) return false;
      if (ShieldStatus != other.ShieldStatus) return false;
      if(!groupMemberList_.Equals(other.groupMemberList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId != 0UL) hash ^= GroupId.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (GroupName.Length != 0) hash ^= GroupName.GetHashCode();
      if (GroupAvatar.Length != 0) hash ^= GroupAvatar.GetHashCode();
      if (GroupCreatorId != 0UL) hash ^= GroupCreatorId.GetHashCode();
      if (GroupType != 0) hash ^= GroupType.GetHashCode();
      if (ShieldStatus != 0) hash ^= ShieldStatus.GetHashCode();
      hash ^= groupMemberList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GroupId);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Version);
      }
      if (GroupName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GroupName);
      }
      if (GroupAvatar.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GroupAvatar);
      }
      if (GroupCreatorId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(GroupCreatorId);
      }
      if (GroupType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) GroupType);
      }
      if (ShieldStatus != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ShieldStatus);
      }
      groupMemberList_.WriteTo(output, _repeated_groupMemberList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GroupId);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (GroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupName);
      }
      if (GroupAvatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupAvatar);
      }
      if (GroupCreatorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GroupCreatorId);
      }
      if (GroupType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GroupType);
      }
      if (ShieldStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShieldStatus);
      }
      size += groupMemberList_.CalculateSize(_repeated_groupMemberList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupInfo other) {
      if (other == null) {
        return;
      }
      if (other.GroupId != 0UL) {
        GroupId = other.GroupId;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.GroupName.Length != 0) {
        GroupName = other.GroupName;
      }
      if (other.GroupAvatar.Length != 0) {
        GroupAvatar = other.GroupAvatar;
      }
      if (other.GroupCreatorId != 0UL) {
        GroupCreatorId = other.GroupCreatorId;
      }
      if (other.GroupType != 0) {
        GroupType = other.GroupType;
      }
      if (other.ShieldStatus != 0) {
        ShieldStatus = other.ShieldStatus;
      }
      groupMemberList_.Add(other.groupMemberList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadUInt64();
            break;
          }
          case 16: {
            Version = input.ReadUInt32();
            break;
          }
          case 26: {
            GroupName = input.ReadString();
            break;
          }
          case 34: {
            GroupAvatar = input.ReadString();
            break;
          }
          case 40: {
            GroupCreatorId = input.ReadUInt64();
            break;
          }
          case 48: {
            groupType_ = (global::IM.BaseDefine.GroupType) input.ReadEnum();
            break;
          }
          case 56: {
            ShieldStatus = input.ReadUInt32();
            break;
          }
          case 66:
          case 64: {
            groupMemberList_.AddEntriesFrom(input, _repeated_groupMemberList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserTokenInfo : pb::IMessage<UserTokenInfo> {
    private static readonly pb::MessageParser<UserTokenInfo> _parser = new pb::MessageParser<UserTokenInfo>(() => new UserTokenInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserTokenInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.BaseDefine.IMBaseDefineReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserTokenInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserTokenInfo(UserTokenInfo other) : this() {
      userId_ = other.userId_;
      userType_ = other.userType_;
      token_ = other.token_;
      pushCount_ = other.pushCount_;
      pushType_ = other.pushType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserTokenInfo Clone() {
      return new UserTokenInfo(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "user_type" field.</summary>
    public const int UserTypeFieldNumber = 2;
    private global::IM.BaseDefine.ClientType userType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.ClientType UserType {
      get { return userType_; }
      set {
        userType_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "push_count" field.</summary>
    public const int PushCountFieldNumber = 4;
    private uint pushCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PushCount {
      get { return pushCount_; }
      set {
        pushCount_ = value;
      }
    }

    /// <summary>Field number for the "push_type" field.</summary>
    public const int PushTypeFieldNumber = 5;
    private uint pushType_;
    /// <summary>
    ///1: 正常推送  	2:无打扰式推送
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PushType {
      get { return pushType_; }
      set {
        pushType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserTokenInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserTokenInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (UserType != other.UserType) return false;
      if (Token != other.Token) return false;
      if (PushCount != other.PushCount) return false;
      if (PushType != other.PushType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (UserType != 0) hash ^= UserType.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (PushCount != 0) hash ^= PushCount.GetHashCode();
      if (PushType != 0) hash ^= PushType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (UserType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) UserType);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (PushCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PushCount);
      }
      if (PushType != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(PushType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (UserType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UserType);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (PushCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PushCount);
      }
      if (PushType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PushType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserTokenInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.UserType != 0) {
        UserType = other.UserType;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.PushCount != 0) {
        PushCount = other.PushCount;
      }
      if (other.PushType != 0) {
        PushType = other.PushType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            userType_ = (global::IM.BaseDefine.ClientType) input.ReadEnum();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 32: {
            PushCount = input.ReadUInt32();
            break;
          }
          case 40: {
            PushType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PushResult : pb::IMessage<PushResult> {
    private static readonly pb::MessageParser<PushResult> _parser = new pb::MessageParser<PushResult>(() => new PushResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PushResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.BaseDefine.IMBaseDefineReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushResult(PushResult other) : this() {
      userToken_ = other.userToken_;
      resultCode_ = other.resultCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushResult Clone() {
      return new PushResult(this);
    }

    /// <summary>Field number for the "user_token" field.</summary>
    public const int UserTokenFieldNumber = 1;
    private string userToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserToken {
      get { return userToken_; }
      set {
        userToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 2;
    private uint resultCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PushResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PushResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserToken != other.UserToken) return false;
      if (ResultCode != other.ResultCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserToken.Length != 0) hash ^= UserToken.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserToken);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ResultCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserToken);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PushResult other) {
      if (other == null) {
        return;
      }
      if (other.UserToken.Length != 0) {
        UserToken = other.UserToken;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserToken = input.ReadString();
            break;
          }
          case 16: {
            ResultCode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShieldStatus : pb::IMessage<ShieldStatus> {
    private static readonly pb::MessageParser<ShieldStatus> _parser = new pb::MessageParser<ShieldStatus>(() => new ShieldStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShieldStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.BaseDefine.IMBaseDefineReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShieldStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShieldStatus(ShieldStatus other) : this() {
      userId_ = other.userId_;
      groupId_ = other.groupId_;
      shieldStatus_ = other.shieldStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShieldStatus Clone() {
      return new ShieldStatus(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private ulong groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "shield_status" field.</summary>
    public const int ShieldStatus_FieldNumber = 3;
    private uint shieldStatus_;
    /// <summary>
    ///1: shield  0: not shield
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShieldStatus_ {
      get { return shieldStatus_; }
      set {
        shieldStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShieldStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShieldStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (GroupId != other.GroupId) return false;
      if (ShieldStatus_ != other.ShieldStatus_) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (GroupId != 0UL) hash ^= GroupId.GetHashCode();
      if (ShieldStatus_ != 0) hash ^= ShieldStatus_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (GroupId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GroupId);
      }
      if (ShieldStatus_ != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ShieldStatus_);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (GroupId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GroupId);
      }
      if (ShieldStatus_ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShieldStatus_);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShieldStatus other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.GroupId != 0UL) {
        GroupId = other.GroupId;
      }
      if (other.ShieldStatus_ != 0) {
        ShieldStatus_ = other.ShieldStatus_;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            GroupId = input.ReadUInt64();
            break;
          }
          case 24: {
            ShieldStatus_ = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OfflineFileInfo : pb::IMessage<OfflineFileInfo> {
    private static readonly pb::MessageParser<OfflineFileInfo> _parser = new pb::MessageParser<OfflineFileInfo>(() => new OfflineFileInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OfflineFileInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.BaseDefine.IMBaseDefineReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OfflineFileInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OfflineFileInfo(OfflineFileInfo other) : this() {
      fromUserId_ = other.fromUserId_;
      taskId_ = other.taskId_;
      fileName_ = other.fileName_;
      fileSize_ = other.fileSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OfflineFileInfo Clone() {
      return new OfflineFileInfo(this);
    }

    /// <summary>Field number for the "from_user_id" field.</summary>
    public const int FromUserIdFieldNumber = 1;
    private ulong fromUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromUserId {
      get { return fromUserId_; }
      set {
        fromUserId_ = value;
      }
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file_name" field.</summary>
    public const int FileNameFieldNumber = 3;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file_size" field.</summary>
    public const int FileSizeFieldNumber = 4;
    private uint fileSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FileSize {
      get { return fileSize_; }
      set {
        fileSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OfflineFileInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OfflineFileInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromUserId != other.FromUserId) return false;
      if (TaskId != other.TaskId) return false;
      if (FileName != other.FileName) return false;
      if (FileSize != other.FileSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromUserId != 0UL) hash ^= FromUserId.GetHashCode();
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (FileSize != 0) hash ^= FileSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromUserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FromUserId);
      }
      if (TaskId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TaskId);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FileName);
      }
      if (FileSize != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FileSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromUserId);
      }
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (FileSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FileSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OfflineFileInfo other) {
      if (other == null) {
        return;
      }
      if (other.FromUserId != 0UL) {
        FromUserId = other.FromUserId;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.FileSize != 0) {
        FileSize = other.FileSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromUserId = input.ReadUInt64();
            break;
          }
          case 18: {
            TaskId = input.ReadString();
            break;
          }
          case 26: {
            FileName = input.ReadString();
            break;
          }
          case 32: {
            FileSize = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DepartInfo : pb::IMessage<DepartInfo> {
    private static readonly pb::MessageParser<DepartInfo> _parser = new pb::MessageParser<DepartInfo>(() => new DepartInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DepartInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.BaseDefine.IMBaseDefineReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartInfo(DepartInfo other) : this() {
      deptId_ = other.deptId_;
      priority_ = other.priority_;
      deptName_ = other.deptName_;
      parentDeptId_ = other.parentDeptId_;
      deptStatus_ = other.deptStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepartInfo Clone() {
      return new DepartInfo(this);
    }

    /// <summary>Field number for the "dept_id" field.</summary>
    public const int DeptIdFieldNumber = 1;
    private ulong deptId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DeptId {
      get { return deptId_; }
      set {
        deptId_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 2;
    private uint priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "dept_name" field.</summary>
    public const int DeptNameFieldNumber = 3;
    private string deptName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeptName {
      get { return deptName_; }
      set {
        deptName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent_dept_id" field.</summary>
    public const int ParentDeptIdFieldNumber = 4;
    private ulong parentDeptId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ParentDeptId {
      get { return parentDeptId_; }
      set {
        parentDeptId_ = value;
      }
    }

    /// <summary>Field number for the "dept_status" field.</summary>
    public const int DeptStatusFieldNumber = 5;
    private global::IM.BaseDefine.DepartmentStatusType deptStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.DepartmentStatusType DeptStatus {
      get { return deptStatus_; }
      set {
        deptStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DepartInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DepartInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeptId != other.DeptId) return false;
      if (Priority != other.Priority) return false;
      if (DeptName != other.DeptName) return false;
      if (ParentDeptId != other.ParentDeptId) return false;
      if (DeptStatus != other.DeptStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeptId != 0UL) hash ^= DeptId.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (DeptName.Length != 0) hash ^= DeptName.GetHashCode();
      if (ParentDeptId != 0UL) hash ^= ParentDeptId.GetHashCode();
      if (DeptStatus != 0) hash ^= DeptStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeptId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(DeptId);
      }
      if (Priority != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Priority);
      }
      if (DeptName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeptName);
      }
      if (ParentDeptId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ParentDeptId);
      }
      if (DeptStatus != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) DeptStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeptId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DeptId);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
      }
      if (DeptName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeptName);
      }
      if (ParentDeptId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ParentDeptId);
      }
      if (DeptStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeptStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DepartInfo other) {
      if (other == null) {
        return;
      }
      if (other.DeptId != 0UL) {
        DeptId = other.DeptId;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.DeptName.Length != 0) {
        DeptName = other.DeptName;
      }
      if (other.ParentDeptId != 0UL) {
        ParentDeptId = other.ParentDeptId;
      }
      if (other.DeptStatus != 0) {
        DeptStatus = other.DeptStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DeptId = input.ReadUInt64();
            break;
          }
          case 16: {
            Priority = input.ReadUInt32();
            break;
          }
          case 26: {
            DeptName = input.ReadString();
            break;
          }
          case 32: {
            ParentDeptId = input.ReadUInt64();
            break;
          }
          case 40: {
            deptStatus_ = (global::IM.BaseDefine.DepartmentStatusType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PushShieldStatus : pb::IMessage<PushShieldStatus> {
    private static readonly pb::MessageParser<PushShieldStatus> _parser = new pb::MessageParser<PushShieldStatus>(() => new PushShieldStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PushShieldStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.BaseDefine.IMBaseDefineReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushShieldStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushShieldStatus(PushShieldStatus other) : this() {
      userId_ = other.userId_;
      shieldStatus_ = other.shieldStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushShieldStatus Clone() {
      return new PushShieldStatus(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "shield_status" field.</summary>
    public const int ShieldStatusFieldNumber = 2;
    private uint shieldStatus_;
    /// <summary>
    ///1: shield  0: not shield
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShieldStatus {
      get { return shieldStatus_; }
      set {
        shieldStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PushShieldStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PushShieldStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ShieldStatus != other.ShieldStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (ShieldStatus != 0) hash ^= ShieldStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (ShieldStatus != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ShieldStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (ShieldStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShieldStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PushShieldStatus other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.ShieldStatus != 0) {
        ShieldStatus = other.ShieldStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            ShieldStatus = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
