// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.SwitchService.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IM.SwitchService {

  /// <summary>Holder for reflection information generated from IM.SwitchService.proto</summary>
  public static partial class IMSwitchServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for IM.SwitchService.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IMSwitchServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZJTS5Td2l0Y2hTZXJ2aWNlLnByb3RvEhBJTS5Td2l0Y2hTZXJ2aWNlIk0K",
            "C0lNUDJQQ21kTXNnEhQKDGZyb21fdXNlcl9pZBgBIAEoBBISCgp0b191c2Vy",
            "X2lkGAIgASgEEhQKDGNtZF9tc2dfZGF0YRgDIAEoCUIiCh5jb20uYmx0LnRh",
            "bGsuY29tbW9uLmNvZGUucHJvdG9IA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.SwitchService.IMP2PCmdMsg), global::IM.SwitchService.IMP2PCmdMsg.Parser, new[]{ "FromUserId", "ToUserId", "CmdMsgData" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class IMP2PCmdMsg : pb::IMessage<IMP2PCmdMsg> {
    private static readonly pb::MessageParser<IMP2PCmdMsg> _parser = new pb::MessageParser<IMP2PCmdMsg>(() => new IMP2PCmdMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMP2PCmdMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.SwitchService.IMSwitchServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMP2PCmdMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMP2PCmdMsg(IMP2PCmdMsg other) : this() {
      fromUserId_ = other.fromUserId_;
      toUserId_ = other.toUserId_;
      cmdMsgData_ = other.cmdMsgData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMP2PCmdMsg Clone() {
      return new IMP2PCmdMsg(this);
    }

    /// <summary>Field number for the "from_user_id" field.</summary>
    public const int FromUserIdFieldNumber = 1;
    private ulong fromUserId_;
    /// <summary>
    ///cmd id:		0x0601
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromUserId {
      get { return fromUserId_; }
      set {
        fromUserId_ = value;
      }
    }

    /// <summary>Field number for the "to_user_id" field.</summary>
    public const int ToUserIdFieldNumber = 2;
    private ulong toUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ToUserId {
      get { return toUserId_; }
      set {
        toUserId_ = value;
      }
    }

    /// <summary>Field number for the "cmd_msg_data" field.</summary>
    public const int CmdMsgDataFieldNumber = 3;
    private string cmdMsgData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdMsgData {
      get { return cmdMsgData_; }
      set {
        cmdMsgData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMP2PCmdMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMP2PCmdMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromUserId != other.FromUserId) return false;
      if (ToUserId != other.ToUserId) return false;
      if (CmdMsgData != other.CmdMsgData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromUserId != 0UL) hash ^= FromUserId.GetHashCode();
      if (ToUserId != 0UL) hash ^= ToUserId.GetHashCode();
      if (CmdMsgData.Length != 0) hash ^= CmdMsgData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromUserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FromUserId);
      }
      if (ToUserId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ToUserId);
      }
      if (CmdMsgData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CmdMsgData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromUserId);
      }
      if (ToUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ToUserId);
      }
      if (CmdMsgData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdMsgData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMP2PCmdMsg other) {
      if (other == null) {
        return;
      }
      if (other.FromUserId != 0UL) {
        FromUserId = other.FromUserId;
      }
      if (other.ToUserId != 0UL) {
        ToUserId = other.ToUserId;
      }
      if (other.CmdMsgData.Length != 0) {
        CmdMsgData = other.CmdMsgData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromUserId = input.ReadUInt64();
            break;
          }
          case 16: {
            ToUserId = input.ReadUInt64();
            break;
          }
          case 26: {
            CmdMsgData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
