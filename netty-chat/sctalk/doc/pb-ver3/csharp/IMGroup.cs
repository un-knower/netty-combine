// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Group.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IM.Group {

  /// <summary>Holder for reflection information generated from IM.Group.proto</summary>
  public static partial class IMGroupReflection {

    #region Descriptor
    /// <summary>File descriptor for IM.Group.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IMGroupReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5JTS5Hcm91cC5wcm90bxIISU0uR3JvdXAaE0lNLkJhc2VEZWZpbmUucHJv",
            "dG8iPAoUSU1Ob3JtYWxHcm91cExpc3RSZXESDwoHdXNlcl9pZBgBIAEoBBIT",
            "CgthdHRhY2hfZGF0YRgUIAEoDCJ5ChRJTU5vcm1hbEdyb3VwTGlzdFJzcBIP",
            "Cgd1c2VyX2lkGAEgASgEEjsKEmdyb3VwX3ZlcnNpb25fbGlzdBgCIAMoCzIf",
            "LklNLkJhc2VEZWZpbmUuR3JvdXBWZXJzaW9uSW5mbxITCgthdHRhY2hfZGF0",
            "YRgUIAEoDCJ3ChJJTUdyb3VwSW5mb0xpc3RSZXESDwoHdXNlcl9pZBgBIAEo",
            "BBI7ChJncm91cF92ZXJzaW9uX2xpc3QYAiADKAsyHy5JTS5CYXNlRGVmaW5l",
            "Lkdyb3VwVmVyc2lvbkluZm8SEwoLYXR0YWNoX2RhdGEYFCABKAwibQoSSU1H",
            "cm91cEluZm9MaXN0UnNwEg8KB3VzZXJfaWQYASABKAQSMQoPZ3JvdXBfaW5m",
            "b19saXN0GAIgAygLMhguSU0uQmFzZURlZmluZS5Hcm91cEluZm8SEwoLYXR0",
            "YWNoX2RhdGEYFCABKAwiqAEKEElNR3JvdXBDcmVhdGVSZXESDwoHdXNlcl9p",
            "ZBgBIAEoBBIsCgpncm91cF90eXBlGAIgASgOMhguSU0uQmFzZURlZmluZS5H",
            "cm91cFR5cGUSEgoKZ3JvdXBfbmFtZRgDIAEoCRIUCgxncm91cF9hdmF0YXIY",
            "BCABKAkSFgoObWVtYmVyX2lkX2xpc3QYBSADKAQSEwoLYXR0YWNoX2RhdGEY",
            "FCABKAwiiQEKEElNR3JvdXBDcmVhdGVSc3ASDwoHdXNlcl9pZBgBIAEoBBIT",
            "CgtyZXN1bHRfY29kZRgCIAEoDRIQCghncm91cF9pZBgDIAEoBBISCgpncm91",
            "cF9uYW1lGAQgASgJEhQKDHVzZXJfaWRfbGlzdBgFIAMoBBITCgthdHRhY2hf",
            "ZGF0YRgUIAEoDCKdAQoWSU1Hcm91cENoYW5nZU1lbWJlclJlcRIPCgd1c2Vy",
            "X2lkGAEgASgEEjMKC2NoYW5nZV90eXBlGAIgASgOMh4uSU0uQmFzZURlZmlu",
            "ZS5Hcm91cE1vZGlmeVR5cGUSEAoIZ3JvdXBfaWQYAyABKAQSFgoObWVtYmVy",
            "X2lkX2xpc3QYBCADKAQSEwoLYXR0YWNoX2RhdGEYFCABKAwizgEKFklNR3Jv",
            "dXBDaGFuZ2VNZW1iZXJSc3ASDwoHdXNlcl9pZBgBIAEoBBIzCgtjaGFuZ2Vf",
            "dHlwZRgCIAEoDjIeLklNLkJhc2VEZWZpbmUuR3JvdXBNb2RpZnlUeXBlEhMK",
            "C3Jlc3VsdF9jb2RlGAMgASgNEhAKCGdyb3VwX2lkGAQgASgEEhgKEGN1cl91",
            "c2VyX2lkX2xpc3QYBSADKAQSGAoQY2hnX3VzZXJfaWRfbGlzdBgGIAMoBBIT",
            "CgthdHRhY2hfZGF0YRgUIAEoDCJhChBJTUdyb3VwU2hpZWxkUmVxEg8KB3Vz",
            "ZXJfaWQYASABKAQSEAoIZ3JvdXBfaWQYAiABKAQSFQoNc2hpZWxkX3N0YXR1",
            "cxgDIAEoDRITCgthdHRhY2hfZGF0YRgUIAEoDCJfChBJTUdyb3VwU2hpZWxk",
            "UnNwEg8KB3VzZXJfaWQYASABKAQSEAoIZ3JvdXBfaWQYAiABKAQSEwoLcmVz",
            "dWx0X2NvZGUYAyABKA0SEwoLYXR0YWNoX2RhdGEYFCABKAwipwEKGUlNR3Jv",
            "dXBDaGFuZ2VNZW1iZXJOb3RpZnkSDwoHdXNlcl9pZBgBIAEoBBIzCgtjaGFu",
            "Z2VfdHlwZRgCIAEoDjIeLklNLkJhc2VEZWZpbmUuR3JvdXBNb2RpZnlUeXBl",
            "EhAKCGdyb3VwX2lkGAMgASgEEhgKEGN1cl91c2VyX2lkX2xpc3QYBCADKAQS",
            "GAoQY2hnX3VzZXJfaWRfbGlzdBgFIAMoBEIiCh5jb20uYmx0LnRhbGsuY29t",
            "bW9uLmNvZGUucHJvdG9IA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::IM.BaseDefine.IMBaseDefineReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Group.IMNormalGroupListReq), global::IM.Group.IMNormalGroupListReq.Parser, new[]{ "UserId", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Group.IMNormalGroupListRsp), global::IM.Group.IMNormalGroupListRsp.Parser, new[]{ "UserId", "GroupVersionList", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Group.IMGroupInfoListReq), global::IM.Group.IMGroupInfoListReq.Parser, new[]{ "UserId", "GroupVersionList", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Group.IMGroupInfoListRsp), global::IM.Group.IMGroupInfoListRsp.Parser, new[]{ "UserId", "GroupInfoList", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Group.IMGroupCreateReq), global::IM.Group.IMGroupCreateReq.Parser, new[]{ "UserId", "GroupType", "GroupName", "GroupAvatar", "MemberIdList", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Group.IMGroupCreateRsp), global::IM.Group.IMGroupCreateRsp.Parser, new[]{ "UserId", "ResultCode", "GroupId", "GroupName", "UserIdList", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Group.IMGroupChangeMemberReq), global::IM.Group.IMGroupChangeMemberReq.Parser, new[]{ "UserId", "ChangeType", "GroupId", "MemberIdList", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Group.IMGroupChangeMemberRsp), global::IM.Group.IMGroupChangeMemberRsp.Parser, new[]{ "UserId", "ChangeType", "ResultCode", "GroupId", "CurUserIdList", "ChgUserIdList", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Group.IMGroupShieldReq), global::IM.Group.IMGroupShieldReq.Parser, new[]{ "UserId", "GroupId", "ShieldStatus", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Group.IMGroupShieldRsp), global::IM.Group.IMGroupShieldRsp.Parser, new[]{ "UserId", "GroupId", "ResultCode", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Group.IMGroupChangeMemberNotify), global::IM.Group.IMGroupChangeMemberNotify.Parser, new[]{ "UserId", "ChangeType", "GroupId", "CurUserIdList", "ChgUserIdList" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class IMNormalGroupListReq : pb::IMessage<IMNormalGroupListReq> {
    private static readonly pb::MessageParser<IMNormalGroupListReq> _parser = new pb::MessageParser<IMNormalGroupListReq>(() => new IMNormalGroupListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMNormalGroupListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Group.IMGroupReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMNormalGroupListReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMNormalGroupListReq(IMNormalGroupListReq other) : this() {
      userId_ = other.userId_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMNormalGroupListReq Clone() {
      return new IMNormalGroupListReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:			0x0401
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMNormalGroupListReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMNormalGroupListReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMNormalGroupListReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMNormalGroupListRsp : pb::IMessage<IMNormalGroupListRsp> {
    private static readonly pb::MessageParser<IMNormalGroupListRsp> _parser = new pb::MessageParser<IMNormalGroupListRsp>(() => new IMNormalGroupListRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMNormalGroupListRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Group.IMGroupReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMNormalGroupListRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMNormalGroupListRsp(IMNormalGroupListRsp other) : this() {
      userId_ = other.userId_;
      groupVersionList_ = other.groupVersionList_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMNormalGroupListRsp Clone() {
      return new IMNormalGroupListRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:			0x0402
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "group_version_list" field.</summary>
    public const int GroupVersionListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::IM.BaseDefine.GroupVersionInfo> _repeated_groupVersionList_codec
        = pb::FieldCodec.ForMessage(18, global::IM.BaseDefine.GroupVersionInfo.Parser);
    private readonly pbc::RepeatedField<global::IM.BaseDefine.GroupVersionInfo> groupVersionList_ = new pbc::RepeatedField<global::IM.BaseDefine.GroupVersionInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IM.BaseDefine.GroupVersionInfo> GroupVersionList {
      get { return groupVersionList_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMNormalGroupListRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMNormalGroupListRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if(!groupVersionList_.Equals(other.groupVersionList_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      hash ^= groupVersionList_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      groupVersionList_.WriteTo(output, _repeated_groupVersionList_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      size += groupVersionList_.CalculateSize(_repeated_groupVersionList_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMNormalGroupListRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      groupVersionList_.Add(other.groupVersionList_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 18: {
            groupVersionList_.AddEntriesFrom(input, _repeated_groupVersionList_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMGroupInfoListReq : pb::IMessage<IMGroupInfoListReq> {
    private static readonly pb::MessageParser<IMGroupInfoListReq> _parser = new pb::MessageParser<IMGroupInfoListReq>(() => new IMGroupInfoListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMGroupInfoListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Group.IMGroupReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupInfoListReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupInfoListReq(IMGroupInfoListReq other) : this() {
      userId_ = other.userId_;
      groupVersionList_ = other.groupVersionList_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupInfoListReq Clone() {
      return new IMGroupInfoListReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:			0x0403
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "group_version_list" field.</summary>
    public const int GroupVersionListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::IM.BaseDefine.GroupVersionInfo> _repeated_groupVersionList_codec
        = pb::FieldCodec.ForMessage(18, global::IM.BaseDefine.GroupVersionInfo.Parser);
    private readonly pbc::RepeatedField<global::IM.BaseDefine.GroupVersionInfo> groupVersionList_ = new pbc::RepeatedField<global::IM.BaseDefine.GroupVersionInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IM.BaseDefine.GroupVersionInfo> GroupVersionList {
      get { return groupVersionList_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMGroupInfoListReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMGroupInfoListReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if(!groupVersionList_.Equals(other.groupVersionList_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      hash ^= groupVersionList_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      groupVersionList_.WriteTo(output, _repeated_groupVersionList_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      size += groupVersionList_.CalculateSize(_repeated_groupVersionList_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMGroupInfoListReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      groupVersionList_.Add(other.groupVersionList_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 18: {
            groupVersionList_.AddEntriesFrom(input, _repeated_groupVersionList_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMGroupInfoListRsp : pb::IMessage<IMGroupInfoListRsp> {
    private static readonly pb::MessageParser<IMGroupInfoListRsp> _parser = new pb::MessageParser<IMGroupInfoListRsp>(() => new IMGroupInfoListRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMGroupInfoListRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Group.IMGroupReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupInfoListRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupInfoListRsp(IMGroupInfoListRsp other) : this() {
      userId_ = other.userId_;
      groupInfoList_ = other.groupInfoList_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupInfoListRsp Clone() {
      return new IMGroupInfoListRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:			0x0404
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "group_info_list" field.</summary>
    public const int GroupInfoListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::IM.BaseDefine.GroupInfo> _repeated_groupInfoList_codec
        = pb::FieldCodec.ForMessage(18, global::IM.BaseDefine.GroupInfo.Parser);
    private readonly pbc::RepeatedField<global::IM.BaseDefine.GroupInfo> groupInfoList_ = new pbc::RepeatedField<global::IM.BaseDefine.GroupInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IM.BaseDefine.GroupInfo> GroupInfoList {
      get { return groupInfoList_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMGroupInfoListRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMGroupInfoListRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if(!groupInfoList_.Equals(other.groupInfoList_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      hash ^= groupInfoList_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      groupInfoList_.WriteTo(output, _repeated_groupInfoList_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      size += groupInfoList_.CalculateSize(_repeated_groupInfoList_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMGroupInfoListRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      groupInfoList_.Add(other.groupInfoList_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 18: {
            groupInfoList_.AddEntriesFrom(input, _repeated_groupInfoList_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMGroupCreateReq : pb::IMessage<IMGroupCreateReq> {
    private static readonly pb::MessageParser<IMGroupCreateReq> _parser = new pb::MessageParser<IMGroupCreateReq>(() => new IMGroupCreateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMGroupCreateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Group.IMGroupReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupCreateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupCreateReq(IMGroupCreateReq other) : this() {
      userId_ = other.userId_;
      groupType_ = other.groupType_;
      groupName_ = other.groupName_;
      groupAvatar_ = other.groupAvatar_;
      memberIdList_ = other.memberIdList_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupCreateReq Clone() {
      return new IMGroupCreateReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:			0x0405
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "group_type" field.</summary>
    public const int GroupTypeFieldNumber = 2;
    private global::IM.BaseDefine.GroupType groupType_ = 0;
    /// <summary>
    ///默认是创建临时群，且客户端只能创建临时群
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.GroupType GroupType {
      get { return groupType_; }
      set {
        groupType_ = value;
      }
    }

    /// <summary>Field number for the "group_name" field.</summary>
    public const int GroupNameFieldNumber = 3;
    private string groupName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupName {
      get { return groupName_; }
      set {
        groupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group_avatar" field.</summary>
    public const int GroupAvatarFieldNumber = 4;
    private string groupAvatar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupAvatar {
      get { return groupAvatar_; }
      set {
        groupAvatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "member_id_list" field.</summary>
    public const int MemberIdListFieldNumber = 5;
    private static readonly pb::FieldCodec<ulong> _repeated_memberIdList_codec
        = pb::FieldCodec.ForUInt64(42);
    private readonly pbc::RepeatedField<ulong> memberIdList_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> MemberIdList {
      get { return memberIdList_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMGroupCreateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMGroupCreateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (GroupType != other.GroupType) return false;
      if (GroupName != other.GroupName) return false;
      if (GroupAvatar != other.GroupAvatar) return false;
      if(!memberIdList_.Equals(other.memberIdList_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (GroupType != 0) hash ^= GroupType.GetHashCode();
      if (GroupName.Length != 0) hash ^= GroupName.GetHashCode();
      if (GroupAvatar.Length != 0) hash ^= GroupAvatar.GetHashCode();
      hash ^= memberIdList_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (GroupType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GroupType);
      }
      if (GroupName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GroupName);
      }
      if (GroupAvatar.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GroupAvatar);
      }
      memberIdList_.WriteTo(output, _repeated_memberIdList_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (GroupType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GroupType);
      }
      if (GroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupName);
      }
      if (GroupAvatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupAvatar);
      }
      size += memberIdList_.CalculateSize(_repeated_memberIdList_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMGroupCreateReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.GroupType != 0) {
        GroupType = other.GroupType;
      }
      if (other.GroupName.Length != 0) {
        GroupName = other.GroupName;
      }
      if (other.GroupAvatar.Length != 0) {
        GroupAvatar = other.GroupAvatar;
      }
      memberIdList_.Add(other.memberIdList_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            groupType_ = (global::IM.BaseDefine.GroupType) input.ReadEnum();
            break;
          }
          case 26: {
            GroupName = input.ReadString();
            break;
          }
          case 34: {
            GroupAvatar = input.ReadString();
            break;
          }
          case 42:
          case 40: {
            memberIdList_.AddEntriesFrom(input, _repeated_memberIdList_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMGroupCreateRsp : pb::IMessage<IMGroupCreateRsp> {
    private static readonly pb::MessageParser<IMGroupCreateRsp> _parser = new pb::MessageParser<IMGroupCreateRsp>(() => new IMGroupCreateRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMGroupCreateRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Group.IMGroupReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupCreateRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupCreateRsp(IMGroupCreateRsp other) : this() {
      userId_ = other.userId_;
      resultCode_ = other.resultCode_;
      groupId_ = other.groupId_;
      groupName_ = other.groupName_;
      userIdList_ = other.userIdList_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupCreateRsp Clone() {
      return new IMGroupCreateRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:			0x0406
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 2;
    private uint resultCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 3;
    private ulong groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "group_name" field.</summary>
    public const int GroupNameFieldNumber = 4;
    private string groupName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupName {
      get { return groupName_; }
      set {
        groupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id_list" field.</summary>
    public const int UserIdListFieldNumber = 5;
    private static readonly pb::FieldCodec<ulong> _repeated_userIdList_codec
        = pb::FieldCodec.ForUInt64(42);
    private readonly pbc::RepeatedField<ulong> userIdList_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> UserIdList {
      get { return userIdList_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMGroupCreateRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMGroupCreateRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ResultCode != other.ResultCode) return false;
      if (GroupId != other.GroupId) return false;
      if (GroupName != other.GroupName) return false;
      if(!userIdList_.Equals(other.userIdList_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (GroupId != 0UL) hash ^= GroupId.GetHashCode();
      if (GroupName.Length != 0) hash ^= GroupName.GetHashCode();
      hash ^= userIdList_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ResultCode);
      }
      if (GroupId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(GroupId);
      }
      if (GroupName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GroupName);
      }
      userIdList_.WriteTo(output, _repeated_userIdList_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultCode);
      }
      if (GroupId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GroupId);
      }
      if (GroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupName);
      }
      size += userIdList_.CalculateSize(_repeated_userIdList_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMGroupCreateRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.GroupId != 0UL) {
        GroupId = other.GroupId;
      }
      if (other.GroupName.Length != 0) {
        GroupName = other.GroupName;
      }
      userIdList_.Add(other.userIdList_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            ResultCode = input.ReadUInt32();
            break;
          }
          case 24: {
            GroupId = input.ReadUInt64();
            break;
          }
          case 34: {
            GroupName = input.ReadString();
            break;
          }
          case 42:
          case 40: {
            userIdList_.AddEntriesFrom(input, _repeated_userIdList_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMGroupChangeMemberReq : pb::IMessage<IMGroupChangeMemberReq> {
    private static readonly pb::MessageParser<IMGroupChangeMemberReq> _parser = new pb::MessageParser<IMGroupChangeMemberReq>(() => new IMGroupChangeMemberReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMGroupChangeMemberReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Group.IMGroupReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupChangeMemberReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupChangeMemberReq(IMGroupChangeMemberReq other) : this() {
      userId_ = other.userId_;
      changeType_ = other.changeType_;
      groupId_ = other.groupId_;
      memberIdList_ = other.memberIdList_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupChangeMemberReq Clone() {
      return new IMGroupChangeMemberReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:			0x0407
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "change_type" field.</summary>
    public const int ChangeTypeFieldNumber = 2;
    private global::IM.BaseDefine.GroupModifyType changeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.GroupModifyType ChangeType {
      get { return changeType_; }
      set {
        changeType_ = value;
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 3;
    private ulong groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "member_id_list" field.</summary>
    public const int MemberIdListFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_memberIdList_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> memberIdList_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> MemberIdList {
      get { return memberIdList_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMGroupChangeMemberReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMGroupChangeMemberReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ChangeType != other.ChangeType) return false;
      if (GroupId != other.GroupId) return false;
      if(!memberIdList_.Equals(other.memberIdList_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (ChangeType != 0) hash ^= ChangeType.GetHashCode();
      if (GroupId != 0UL) hash ^= GroupId.GetHashCode();
      hash ^= memberIdList_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (ChangeType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ChangeType);
      }
      if (GroupId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(GroupId);
      }
      memberIdList_.WriteTo(output, _repeated_memberIdList_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (ChangeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChangeType);
      }
      if (GroupId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GroupId);
      }
      size += memberIdList_.CalculateSize(_repeated_memberIdList_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMGroupChangeMemberReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.ChangeType != 0) {
        ChangeType = other.ChangeType;
      }
      if (other.GroupId != 0UL) {
        GroupId = other.GroupId;
      }
      memberIdList_.Add(other.memberIdList_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            changeType_ = (global::IM.BaseDefine.GroupModifyType) input.ReadEnum();
            break;
          }
          case 24: {
            GroupId = input.ReadUInt64();
            break;
          }
          case 34:
          case 32: {
            memberIdList_.AddEntriesFrom(input, _repeated_memberIdList_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMGroupChangeMemberRsp : pb::IMessage<IMGroupChangeMemberRsp> {
    private static readonly pb::MessageParser<IMGroupChangeMemberRsp> _parser = new pb::MessageParser<IMGroupChangeMemberRsp>(() => new IMGroupChangeMemberRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMGroupChangeMemberRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Group.IMGroupReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupChangeMemberRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupChangeMemberRsp(IMGroupChangeMemberRsp other) : this() {
      userId_ = other.userId_;
      changeType_ = other.changeType_;
      resultCode_ = other.resultCode_;
      groupId_ = other.groupId_;
      curUserIdList_ = other.curUserIdList_.Clone();
      chgUserIdList_ = other.chgUserIdList_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupChangeMemberRsp Clone() {
      return new IMGroupChangeMemberRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:			0x0408
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "change_type" field.</summary>
    public const int ChangeTypeFieldNumber = 2;
    private global::IM.BaseDefine.GroupModifyType changeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.GroupModifyType ChangeType {
      get { return changeType_; }
      set {
        changeType_ = value;
      }
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 3;
    private uint resultCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 4;
    private ulong groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "cur_user_id_list" field.</summary>
    public const int CurUserIdListFieldNumber = 5;
    private static readonly pb::FieldCodec<ulong> _repeated_curUserIdList_codec
        = pb::FieldCodec.ForUInt64(42);
    private readonly pbc::RepeatedField<ulong> curUserIdList_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///现有的成员id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> CurUserIdList {
      get { return curUserIdList_; }
    }

    /// <summary>Field number for the "chg_user_id_list" field.</summary>
    public const int ChgUserIdListFieldNumber = 6;
    private static readonly pb::FieldCodec<ulong> _repeated_chgUserIdList_codec
        = pb::FieldCodec.ForUInt64(50);
    private readonly pbc::RepeatedField<ulong> chgUserIdList_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///变动的成员id,add: 表示添加成功的id,   del: 表示删除的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> ChgUserIdList {
      get { return chgUserIdList_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMGroupChangeMemberRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMGroupChangeMemberRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ChangeType != other.ChangeType) return false;
      if (ResultCode != other.ResultCode) return false;
      if (GroupId != other.GroupId) return false;
      if(!curUserIdList_.Equals(other.curUserIdList_)) return false;
      if(!chgUserIdList_.Equals(other.chgUserIdList_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (ChangeType != 0) hash ^= ChangeType.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (GroupId != 0UL) hash ^= GroupId.GetHashCode();
      hash ^= curUserIdList_.GetHashCode();
      hash ^= chgUserIdList_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (ChangeType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ChangeType);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ResultCode);
      }
      if (GroupId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(GroupId);
      }
      curUserIdList_.WriteTo(output, _repeated_curUserIdList_codec);
      chgUserIdList_.WriteTo(output, _repeated_chgUserIdList_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (ChangeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChangeType);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultCode);
      }
      if (GroupId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GroupId);
      }
      size += curUserIdList_.CalculateSize(_repeated_curUserIdList_codec);
      size += chgUserIdList_.CalculateSize(_repeated_chgUserIdList_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMGroupChangeMemberRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.ChangeType != 0) {
        ChangeType = other.ChangeType;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.GroupId != 0UL) {
        GroupId = other.GroupId;
      }
      curUserIdList_.Add(other.curUserIdList_);
      chgUserIdList_.Add(other.chgUserIdList_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            changeType_ = (global::IM.BaseDefine.GroupModifyType) input.ReadEnum();
            break;
          }
          case 24: {
            ResultCode = input.ReadUInt32();
            break;
          }
          case 32: {
            GroupId = input.ReadUInt64();
            break;
          }
          case 42:
          case 40: {
            curUserIdList_.AddEntriesFrom(input, _repeated_curUserIdList_codec);
            break;
          }
          case 50:
          case 48: {
            chgUserIdList_.AddEntriesFrom(input, _repeated_chgUserIdList_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMGroupShieldReq : pb::IMessage<IMGroupShieldReq> {
    private static readonly pb::MessageParser<IMGroupShieldReq> _parser = new pb::MessageParser<IMGroupShieldReq>(() => new IMGroupShieldReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMGroupShieldReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Group.IMGroupReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupShieldReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupShieldReq(IMGroupShieldReq other) : this() {
      userId_ = other.userId_;
      groupId_ = other.groupId_;
      shieldStatus_ = other.shieldStatus_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupShieldReq Clone() {
      return new IMGroupShieldReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:			0x0409
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private ulong groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "shield_status" field.</summary>
    public const int ShieldStatusFieldNumber = 3;
    private uint shieldStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShieldStatus {
      get { return shieldStatus_; }
      set {
        shieldStatus_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMGroupShieldReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMGroupShieldReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (GroupId != other.GroupId) return false;
      if (ShieldStatus != other.ShieldStatus) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (GroupId != 0UL) hash ^= GroupId.GetHashCode();
      if (ShieldStatus != 0) hash ^= ShieldStatus.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (GroupId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GroupId);
      }
      if (ShieldStatus != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ShieldStatus);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (GroupId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GroupId);
      }
      if (ShieldStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShieldStatus);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMGroupShieldReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.GroupId != 0UL) {
        GroupId = other.GroupId;
      }
      if (other.ShieldStatus != 0) {
        ShieldStatus = other.ShieldStatus;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            GroupId = input.ReadUInt64();
            break;
          }
          case 24: {
            ShieldStatus = input.ReadUInt32();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMGroupShieldRsp : pb::IMessage<IMGroupShieldRsp> {
    private static readonly pb::MessageParser<IMGroupShieldRsp> _parser = new pb::MessageParser<IMGroupShieldRsp>(() => new IMGroupShieldRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMGroupShieldRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Group.IMGroupReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupShieldRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupShieldRsp(IMGroupShieldRsp other) : this() {
      userId_ = other.userId_;
      groupId_ = other.groupId_;
      resultCode_ = other.resultCode_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupShieldRsp Clone() {
      return new IMGroupShieldRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:			0x040a
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private ulong groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 3;
    private uint resultCode_;
    /// <summary>
    ///0:successed 1:failed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMGroupShieldRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMGroupShieldRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (GroupId != other.GroupId) return false;
      if (ResultCode != other.ResultCode) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (GroupId != 0UL) hash ^= GroupId.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (GroupId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GroupId);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ResultCode);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (GroupId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GroupId);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultCode);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMGroupShieldRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.GroupId != 0UL) {
        GroupId = other.GroupId;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            GroupId = input.ReadUInt64();
            break;
          }
          case 24: {
            ResultCode = input.ReadUInt32();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMGroupChangeMemberNotify : pb::IMessage<IMGroupChangeMemberNotify> {
    private static readonly pb::MessageParser<IMGroupChangeMemberNotify> _parser = new pb::MessageParser<IMGroupChangeMemberNotify>(() => new IMGroupChangeMemberNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMGroupChangeMemberNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Group.IMGroupReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupChangeMemberNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupChangeMemberNotify(IMGroupChangeMemberNotify other) : this() {
      userId_ = other.userId_;
      changeType_ = other.changeType_;
      groupId_ = other.groupId_;
      curUserIdList_ = other.curUserIdList_.Clone();
      chgUserIdList_ = other.chgUserIdList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupChangeMemberNotify Clone() {
      return new IMGroupChangeMemberNotify(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id: 			0x040b
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "change_type" field.</summary>
    public const int ChangeTypeFieldNumber = 2;
    private global::IM.BaseDefine.GroupModifyType changeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.GroupModifyType ChangeType {
      get { return changeType_; }
      set {
        changeType_ = value;
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 3;
    private ulong groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "cur_user_id_list" field.</summary>
    public const int CurUserIdListFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_curUserIdList_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> curUserIdList_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///现有的成员id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> CurUserIdList {
      get { return curUserIdList_; }
    }

    /// <summary>Field number for the "chg_user_id_list" field.</summary>
    public const int ChgUserIdListFieldNumber = 5;
    private static readonly pb::FieldCodec<ulong> _repeated_chgUserIdList_codec
        = pb::FieldCodec.ForUInt64(42);
    private readonly pbc::RepeatedField<ulong> chgUserIdList_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///add: 表示添加成功的id,   del: 表示删除的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> ChgUserIdList {
      get { return chgUserIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMGroupChangeMemberNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMGroupChangeMemberNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ChangeType != other.ChangeType) return false;
      if (GroupId != other.GroupId) return false;
      if(!curUserIdList_.Equals(other.curUserIdList_)) return false;
      if(!chgUserIdList_.Equals(other.chgUserIdList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (ChangeType != 0) hash ^= ChangeType.GetHashCode();
      if (GroupId != 0UL) hash ^= GroupId.GetHashCode();
      hash ^= curUserIdList_.GetHashCode();
      hash ^= chgUserIdList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (ChangeType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ChangeType);
      }
      if (GroupId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(GroupId);
      }
      curUserIdList_.WriteTo(output, _repeated_curUserIdList_codec);
      chgUserIdList_.WriteTo(output, _repeated_chgUserIdList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (ChangeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChangeType);
      }
      if (GroupId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GroupId);
      }
      size += curUserIdList_.CalculateSize(_repeated_curUserIdList_codec);
      size += chgUserIdList_.CalculateSize(_repeated_chgUserIdList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMGroupChangeMemberNotify other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.ChangeType != 0) {
        ChangeType = other.ChangeType;
      }
      if (other.GroupId != 0UL) {
        GroupId = other.GroupId;
      }
      curUserIdList_.Add(other.curUserIdList_);
      chgUserIdList_.Add(other.chgUserIdList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            changeType_ = (global::IM.BaseDefine.GroupModifyType) input.ReadEnum();
            break;
          }
          case 24: {
            GroupId = input.ReadUInt64();
            break;
          }
          case 34:
          case 32: {
            curUserIdList_.AddEntriesFrom(input, _repeated_curUserIdList_codec);
            break;
          }
          case 42:
          case 40: {
            chgUserIdList_.AddEntriesFrom(input, _repeated_chgUserIdList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
