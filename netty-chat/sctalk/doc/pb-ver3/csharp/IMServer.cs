// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Server.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IM.Server {

  /// <summary>Holder for reflection information generated from IM.Server.proto</summary>
  public static partial class IMServerReflection {

    #region Descriptor
    /// <summary>File descriptor for IM.Server.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IMServerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9JTS5TZXJ2ZXIucHJvdG8SCUlNLlNlcnZlchoTSU0uQmFzZURlZmluZS5w",
            "cm90byIlChNJTVN0b3BSZWNlaXZlUGFja2V0Eg4KBnJlc3VsdBgBIAEoDSJJ",
            "Cg1JTVZhbGlkYXRlUmVxEhEKCXVzZXJfbmFtZRgBIAEoCRIQCghwYXNzd29y",
            "ZBgCIAEoCRITCgthdHRhY2hfZGF0YRgUIAEoDCKPAQoNSU1WYWxpZGF0ZVJz",
            "cBIRCgl1c2VyX25hbWUYASABKAkSEwoLcmVzdWx0X2NvZGUYAiABKA0SFQoN",
            "cmVzdWx0X3N0cmluZxgDIAEoCRIqCgl1c2VyX2luZm8YBCABKAsyFy5JTS5C",
            "YXNlRGVmaW5lLlVzZXJJbmZvEhMKC2F0dGFjaF9kYXRhGBQgASgMIjsKE0lN",
            "R2V0RGV2aWNlVG9rZW5SZXESDwoHdXNlcl9pZBgBIAMoBBITCgthdHRhY2hf",
            "ZGF0YRgUIAEoDCJhChNJTUdldERldmljZVRva2VuUnNwEjUKD3VzZXJfdG9r",
            "ZW5faW5mbxgBIAMoCzIcLklNLkJhc2VEZWZpbmUuVXNlclRva2VuSW5mbxIT",
            "CgthdHRhY2hfZGF0YRgUIAEoDCIbCglJTVJvbGVTZXQSDgoGbWFzdGVyGAEg",
            "ASgNIkkKEElNT25saW5lVXNlckluZm8SNQoOdXNlcl9zdGF0X2xpc3QYASAD",
            "KAsyHS5JTS5CYXNlRGVmaW5lLlNlcnZlclVzZXJTdGF0InYKDUlNTXNnU2Vy",
            "dkluZm8SCwoDaXAxGAEgASgJEgsKA2lwMhgCIAEoCRIMCgRwb3J0GAMgASgN",
            "EhQKDG1heF9jb25uX2NudBgEIAEoDRIUCgxjdXJfY29ubl9jbnQYBSABKA0S",
            "EQoJaG9zdF9uYW1lGAYgASgJImoKEklNVXNlclN0YXR1c1VwZGF0ZRITCgt1",
            "c2VyX3N0YXR1cxgBIAEoDRIPCgd1c2VyX2lkGAIgASgEEi4KC2NsaWVudF90",
            "eXBlGAMgASgOMhkuSU0uQmFzZURlZmluZS5DbGllbnRUeXBlIjcKD0lNVXNl",
            "ckNudFVwZGF0ZRITCgt1c2VyX2FjdGlvbhgBIAEoDRIPCgd1c2VyX2lkGAIg",
            "ASgEImMKEElNU2VydmVyS2lja1VzZXISDwoHdXNlcl9pZBgBIAEoBBIuCgtj",
            "bGllbnRfdHlwZRgCIAEoDjIZLklNLkJhc2VEZWZpbmUuQ2xpZW50VHlwZRIO",
            "CgZyZWFzb24YAyABKA0iRAobSU1TZXJ2ZXJQQ0xvZ2luU3RhdHVzTm90aWZ5",
            "Eg8KB3VzZXJfaWQYASABKAQSFAoMbG9naW5fc3RhdHVzGAIgASgNImUKD0lN",
            "UHVzaFRvVXNlclJlcRINCgVmbGFzaBgBIAEoCRIMCgRkYXRhGAIgASgJEjUK",
            "D3VzZXJfdG9rZW5fbGlzdBgDIAMoCzIcLklNLkJhc2VEZWZpbmUuVXNlclRv",
            "a2VuSW5mbyJGCg9JTVB1c2hUb1VzZXJSc3ASMwoQcHVzaF9yZXN1bHRfbGlz",
            "dBgBIAMoCzIZLklNLkJhc2VEZWZpbmUuUHVzaFJlc3VsdCJNChNJTUdyb3Vw",
            "R2V0U2hpZWxkUmVxEhAKCGdyb3VwX2lkGAEgASgEEg8KB3VzZXJfaWQYAiAD",
            "KAQSEwoLYXR0YWNoX2RhdGEYFCABKAwidQoTSU1Hcm91cEdldFNoaWVsZFJz",
            "cBIQCghncm91cF9pZBgBIAEoBBI3ChJzaGllbGRfc3RhdHVzX2xpc3QYAiAD",
            "KAsyGy5JTS5CYXNlRGVmaW5lLlNoaWVsZFN0YXR1cxITCgthdHRhY2hfZGF0",
            "YRgUIAEoDCKtAQoRSU1GaWxlVHJhbnNmZXJSZXESFAoMZnJvbV91c2VyX2lk",
            "GAEgASgEEhIKCnRvX3VzZXJfaWQYAiABKAQSEQoJZmlsZV9uYW1lGAMgASgJ",
            "EhEKCWZpbGVfc2l6ZRgEIAEoDRIzCgp0cmFuc19tb2RlGAUgASgOMh8uSU0u",
            "QmFzZURlZmluZS5UcmFuc2ZlckZpbGVUeXBlEhMKC2F0dGFjaF9kYXRhGBQg",
            "ASgMItMBChFJTUZpbGVUcmFuc2ZlclJzcBITCgtyZXN1bHRfY29kZRgBIAEo",
            "DRIUCgxmcm9tX3VzZXJfaWQYAiABKAQSEgoKdG9fdXNlcl9pZBgDIAEoBBIR",
            "CglmaWxlX25hbWUYBCABKAkSEQoJZmlsZV9zaXplGAUgASgNEg8KB3Rhc2tf",
            "aWQYBiABKAkSMwoKdHJhbnNfbW9kZRgHIAEoDjIfLklNLkJhc2VEZWZpbmUu",
            "VHJhbnNmZXJGaWxlVHlwZRITCgthdHRhY2hfZGF0YRgUIAEoDCITChFJTUZp",
            "bGVTZXJ2ZXJJUFJlcSJAChFJTUZpbGVTZXJ2ZXJJUFJzcBIrCgxpcF9hZGRy",
            "X2xpc3QYASADKAsyFS5JTS5CYXNlRGVmaW5lLklwQWRkckIiCh5jb20uYmx0",
            "LnRhbGsuY29tbW9uLmNvZGUucHJvdG9IA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::IM.BaseDefine.IMBaseDefineReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Server.IMStopReceivePacket), global::IM.Server.IMStopReceivePacket.Parser, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Server.IMValidateReq), global::IM.Server.IMValidateReq.Parser, new[]{ "UserName", "Password", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Server.IMValidateRsp), global::IM.Server.IMValidateRsp.Parser, new[]{ "UserName", "ResultCode", "ResultString", "UserInfo", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Server.IMGetDeviceTokenReq), global::IM.Server.IMGetDeviceTokenReq.Parser, new[]{ "UserId", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Server.IMGetDeviceTokenRsp), global::IM.Server.IMGetDeviceTokenRsp.Parser, new[]{ "UserTokenInfo", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Server.IMRoleSet), global::IM.Server.IMRoleSet.Parser, new[]{ "Master" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Server.IMOnlineUserInfo), global::IM.Server.IMOnlineUserInfo.Parser, new[]{ "UserStatList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Server.IMMsgServInfo), global::IM.Server.IMMsgServInfo.Parser, new[]{ "Ip1", "Ip2", "Port", "MaxConnCnt", "CurConnCnt", "HostName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Server.IMUserStatusUpdate), global::IM.Server.IMUserStatusUpdate.Parser, new[]{ "UserStatus", "UserId", "ClientType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Server.IMUserCntUpdate), global::IM.Server.IMUserCntUpdate.Parser, new[]{ "UserAction", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Server.IMServerKickUser), global::IM.Server.IMServerKickUser.Parser, new[]{ "UserId", "ClientType", "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Server.IMServerPCLoginStatusNotify), global::IM.Server.IMServerPCLoginStatusNotify.Parser, new[]{ "UserId", "LoginStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Server.IMPushToUserReq), global::IM.Server.IMPushToUserReq.Parser, new[]{ "Flash", "Data", "UserTokenList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Server.IMPushToUserRsp), global::IM.Server.IMPushToUserRsp.Parser, new[]{ "PushResultList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Server.IMGroupGetShieldReq), global::IM.Server.IMGroupGetShieldReq.Parser, new[]{ "GroupId", "UserId", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Server.IMGroupGetShieldRsp), global::IM.Server.IMGroupGetShieldRsp.Parser, new[]{ "GroupId", "ShieldStatusList", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Server.IMFileTransferReq), global::IM.Server.IMFileTransferReq.Parser, new[]{ "FromUserId", "ToUserId", "FileName", "FileSize", "TransMode", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Server.IMFileTransferRsp), global::IM.Server.IMFileTransferRsp.Parser, new[]{ "ResultCode", "FromUserId", "ToUserId", "FileName", "FileSize", "TaskId", "TransMode", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Server.IMFileServerIPReq), global::IM.Server.IMFileServerIPReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Server.IMFileServerIPRsp), global::IM.Server.IMFileServerIPRsp.Parser, new[]{ "IpAddrList" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///db_proxy
  /// </summary>
  public sealed partial class IMStopReceivePacket : pb::IMessage<IMStopReceivePacket> {
    private static readonly pb::MessageParser<IMStopReceivePacket> _parser = new pb::MessageParser<IMStopReceivePacket>(() => new IMStopReceivePacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMStopReceivePacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Server.IMServerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMStopReceivePacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMStopReceivePacket(IMStopReceivePacket other) : this() {
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMStopReceivePacket Clone() {
      return new IMStopReceivePacket(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private uint result_;
    /// <summary>
    ///cmd id:   0x0702
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMStopReceivePacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMStopReceivePacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMStopReceivePacket other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///db_proxy
  /// </summary>
  public sealed partial class IMValidateReq : pb::IMessage<IMValidateReq> {
    private static readonly pb::MessageParser<IMValidateReq> _parser = new pb::MessageParser<IMValidateReq>(() => new IMValidateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMValidateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Server.IMServerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMValidateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMValidateReq(IMValidateReq other) : this() {
      userName_ = other.userName_;
      password_ = other.password_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMValidateReq Clone() {
      return new IMValidateReq(this);
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    /// <summary>
    ///cmd id:	0x0703
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMValidateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMValidateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (Password != other.Password) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMValidateReq other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///db_proxy
  /// </summary>
  public sealed partial class IMValidateRsp : pb::IMessage<IMValidateRsp> {
    private static readonly pb::MessageParser<IMValidateRsp> _parser = new pb::MessageParser<IMValidateRsp>(() => new IMValidateRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMValidateRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Server.IMServerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMValidateRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMValidateRsp(IMValidateRsp other) : this() {
      userName_ = other.userName_;
      resultCode_ = other.resultCode_;
      resultString_ = other.resultString_;
      UserInfo = other.userInfo_ != null ? other.UserInfo.Clone() : null;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMValidateRsp Clone() {
      return new IMValidateRsp(this);
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    /// <summary>
    ///cmd id:	0x0704
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 2;
    private uint resultCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "result_string" field.</summary>
    public const int ResultStringFieldNumber = 3;
    private string resultString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResultString {
      get { return resultString_; }
      set {
        resultString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_info" field.</summary>
    public const int UserInfoFieldNumber = 4;
    private global::IM.BaseDefine.UserInfo userInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.UserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMValidateRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMValidateRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (ResultCode != other.ResultCode) return false;
      if (ResultString != other.ResultString) return false;
      if (!object.Equals(UserInfo, other.UserInfo)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (ResultString.Length != 0) hash ^= ResultString.GetHashCode();
      if (userInfo_ != null) hash ^= UserInfo.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ResultCode);
      }
      if (ResultString.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ResultString);
      }
      if (userInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserInfo);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultCode);
      }
      if (ResultString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResultString);
      }
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMValidateRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.ResultString.Length != 0) {
        ResultString = other.ResultString;
      }
      if (other.userInfo_ != null) {
        if (userInfo_ == null) {
          userInfo_ = new global::IM.BaseDefine.UserInfo();
        }
        UserInfo.MergeFrom(other.UserInfo);
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 16: {
            ResultCode = input.ReadUInt32();
            break;
          }
          case 26: {
            ResultString = input.ReadString();
            break;
          }
          case 34: {
            if (userInfo_ == null) {
              userInfo_ = new global::IM.BaseDefine.UserInfo();
            }
            input.ReadMessage(userInfo_);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///db_proxy
  /// </summary>
  public sealed partial class IMGetDeviceTokenReq : pb::IMessage<IMGetDeviceTokenReq> {
    private static readonly pb::MessageParser<IMGetDeviceTokenReq> _parser = new pb::MessageParser<IMGetDeviceTokenReq>(() => new IMGetDeviceTokenReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMGetDeviceTokenReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Server.IMServerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetDeviceTokenReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetDeviceTokenReq(IMGetDeviceTokenReq other) : this() {
      userId_ = other.userId_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetDeviceTokenReq Clone() {
      return new IMGetDeviceTokenReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_userId_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> userId_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///cmd id:	0x0705
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> UserId {
      get { return userId_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMGetDeviceTokenReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMGetDeviceTokenReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!userId_.Equals(other.userId_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= userId_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      userId_.WriteTo(output, _repeated_userId_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += userId_.CalculateSize(_repeated_userId_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMGetDeviceTokenReq other) {
      if (other == null) {
        return;
      }
      userId_.Add(other.userId_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            userId_.AddEntriesFrom(input, _repeated_userId_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///db_proxy
  /// </summary>
  public sealed partial class IMGetDeviceTokenRsp : pb::IMessage<IMGetDeviceTokenRsp> {
    private static readonly pb::MessageParser<IMGetDeviceTokenRsp> _parser = new pb::MessageParser<IMGetDeviceTokenRsp>(() => new IMGetDeviceTokenRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMGetDeviceTokenRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Server.IMServerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetDeviceTokenRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetDeviceTokenRsp(IMGetDeviceTokenRsp other) : this() {
      userTokenInfo_ = other.userTokenInfo_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetDeviceTokenRsp Clone() {
      return new IMGetDeviceTokenRsp(this);
    }

    /// <summary>Field number for the "user_token_info" field.</summary>
    public const int UserTokenInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::IM.BaseDefine.UserTokenInfo> _repeated_userTokenInfo_codec
        = pb::FieldCodec.ForMessage(10, global::IM.BaseDefine.UserTokenInfo.Parser);
    private readonly pbc::RepeatedField<global::IM.BaseDefine.UserTokenInfo> userTokenInfo_ = new pbc::RepeatedField<global::IM.BaseDefine.UserTokenInfo>();
    /// <summary>
    ///cmd id:	0x0706
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IM.BaseDefine.UserTokenInfo> UserTokenInfo {
      get { return userTokenInfo_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMGetDeviceTokenRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMGetDeviceTokenRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!userTokenInfo_.Equals(other.userTokenInfo_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= userTokenInfo_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      userTokenInfo_.WriteTo(output, _repeated_userTokenInfo_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += userTokenInfo_.CalculateSize(_repeated_userTokenInfo_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMGetDeviceTokenRsp other) {
      if (other == null) {
        return;
      }
      userTokenInfo_.Add(other.userTokenInfo_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            userTokenInfo_.AddEntriesFrom(input, _repeated_userTokenInfo_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMRoleSet : pb::IMessage<IMRoleSet> {
    private static readonly pb::MessageParser<IMRoleSet> _parser = new pb::MessageParser<IMRoleSet>(() => new IMRoleSet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMRoleSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Server.IMServerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMRoleSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMRoleSet(IMRoleSet other) : this() {
      master_ = other.master_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMRoleSet Clone() {
      return new IMRoleSet(this);
    }

    /// <summary>Field number for the "master" field.</summary>
    public const int MasterFieldNumber = 1;
    private uint master_;
    /// <summary>
    ///cmd id:	0x0707
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Master {
      get { return master_; }
      set {
        master_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMRoleSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMRoleSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Master != other.Master) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Master != 0) hash ^= Master.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Master != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Master);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Master != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Master);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMRoleSet other) {
      if (other == null) {
        return;
      }
      if (other.Master != 0) {
        Master = other.Master;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Master = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMOnlineUserInfo : pb::IMessage<IMOnlineUserInfo> {
    private static readonly pb::MessageParser<IMOnlineUserInfo> _parser = new pb::MessageParser<IMOnlineUserInfo>(() => new IMOnlineUserInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMOnlineUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Server.IMServerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMOnlineUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMOnlineUserInfo(IMOnlineUserInfo other) : this() {
      userStatList_ = other.userStatList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMOnlineUserInfo Clone() {
      return new IMOnlineUserInfo(this);
    }

    /// <summary>Field number for the "user_stat_list" field.</summary>
    public const int UserStatListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::IM.BaseDefine.ServerUserStat> _repeated_userStatList_codec
        = pb::FieldCodec.ForMessage(10, global::IM.BaseDefine.ServerUserStat.Parser);
    private readonly pbc::RepeatedField<global::IM.BaseDefine.ServerUserStat> userStatList_ = new pbc::RepeatedField<global::IM.BaseDefine.ServerUserStat>();
    /// <summary>
    ///cmd id:	0x0708
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IM.BaseDefine.ServerUserStat> UserStatList {
      get { return userStatList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMOnlineUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMOnlineUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!userStatList_.Equals(other.userStatList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= userStatList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      userStatList_.WriteTo(output, _repeated_userStatList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += userStatList_.CalculateSize(_repeated_userStatList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMOnlineUserInfo other) {
      if (other == null) {
        return;
      }
      userStatList_.Add(other.userStatList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            userStatList_.AddEntriesFrom(input, _repeated_userStatList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMMsgServInfo : pb::IMessage<IMMsgServInfo> {
    private static readonly pb::MessageParser<IMMsgServInfo> _parser = new pb::MessageParser<IMMsgServInfo>(() => new IMMsgServInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMMsgServInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Server.IMServerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMMsgServInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMMsgServInfo(IMMsgServInfo other) : this() {
      ip1_ = other.ip1_;
      ip2_ = other.ip2_;
      port_ = other.port_;
      maxConnCnt_ = other.maxConnCnt_;
      curConnCnt_ = other.curConnCnt_;
      hostName_ = other.hostName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMMsgServInfo Clone() {
      return new IMMsgServInfo(this);
    }

    /// <summary>Field number for the "ip1" field.</summary>
    public const int Ip1FieldNumber = 1;
    private string ip1_ = "";
    /// <summary>
    ///cmd id:	0x0709
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip1 {
      get { return ip1_; }
      set {
        ip1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip2" field.</summary>
    public const int Ip2FieldNumber = 2;
    private string ip2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip2 {
      get { return ip2_; }
      set {
        ip2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 3;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "max_conn_cnt" field.</summary>
    public const int MaxConnCntFieldNumber = 4;
    private uint maxConnCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxConnCnt {
      get { return maxConnCnt_; }
      set {
        maxConnCnt_ = value;
      }
    }

    /// <summary>Field number for the "cur_conn_cnt" field.</summary>
    public const int CurConnCntFieldNumber = 5;
    private uint curConnCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurConnCnt {
      get { return curConnCnt_; }
      set {
        curConnCnt_ = value;
      }
    }

    /// <summary>Field number for the "host_name" field.</summary>
    public const int HostNameFieldNumber = 6;
    private string hostName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostName {
      get { return hostName_; }
      set {
        hostName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMMsgServInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMMsgServInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip1 != other.Ip1) return false;
      if (Ip2 != other.Ip2) return false;
      if (Port != other.Port) return false;
      if (MaxConnCnt != other.MaxConnCnt) return false;
      if (CurConnCnt != other.CurConnCnt) return false;
      if (HostName != other.HostName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip1.Length != 0) hash ^= Ip1.GetHashCode();
      if (Ip2.Length != 0) hash ^= Ip2.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (MaxConnCnt != 0) hash ^= MaxConnCnt.GetHashCode();
      if (CurConnCnt != 0) hash ^= CurConnCnt.GetHashCode();
      if (HostName.Length != 0) hash ^= HostName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ip1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip1);
      }
      if (Ip2.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ip2);
      }
      if (Port != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Port);
      }
      if (MaxConnCnt != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaxConnCnt);
      }
      if (CurConnCnt != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CurConnCnt);
      }
      if (HostName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(HostName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ip1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip1);
      }
      if (Ip2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip2);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (MaxConnCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxConnCnt);
      }
      if (CurConnCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurConnCnt);
      }
      if (HostName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMMsgServInfo other) {
      if (other == null) {
        return;
      }
      if (other.Ip1.Length != 0) {
        Ip1 = other.Ip1;
      }
      if (other.Ip2.Length != 0) {
        Ip2 = other.Ip2;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.MaxConnCnt != 0) {
        MaxConnCnt = other.MaxConnCnt;
      }
      if (other.CurConnCnt != 0) {
        CurConnCnt = other.CurConnCnt;
      }
      if (other.HostName.Length != 0) {
        HostName = other.HostName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Ip1 = input.ReadString();
            break;
          }
          case 18: {
            Ip2 = input.ReadString();
            break;
          }
          case 24: {
            Port = input.ReadUInt32();
            break;
          }
          case 32: {
            MaxConnCnt = input.ReadUInt32();
            break;
          }
          case 40: {
            CurConnCnt = input.ReadUInt32();
            break;
          }
          case 50: {
            HostName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMUserStatusUpdate : pb::IMessage<IMUserStatusUpdate> {
    private static readonly pb::MessageParser<IMUserStatusUpdate> _parser = new pb::MessageParser<IMUserStatusUpdate>(() => new IMUserStatusUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMUserStatusUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Server.IMServerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUserStatusUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUserStatusUpdate(IMUserStatusUpdate other) : this() {
      userStatus_ = other.userStatus_;
      userId_ = other.userId_;
      clientType_ = other.clientType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUserStatusUpdate Clone() {
      return new IMUserStatusUpdate(this);
    }

    /// <summary>Field number for the "user_status" field.</summary>
    public const int UserStatusFieldNumber = 1;
    private uint userStatus_;
    /// <summary>
    ///cmd id:	0x070a
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserStatus {
      get { return userStatus_; }
      set {
        userStatus_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "client_type" field.</summary>
    public const int ClientTypeFieldNumber = 3;
    private global::IM.BaseDefine.ClientType clientType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.ClientType ClientType {
      get { return clientType_; }
      set {
        clientType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMUserStatusUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMUserStatusUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserStatus != other.UserStatus) return false;
      if (UserId != other.UserId) return false;
      if (ClientType != other.ClientType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserStatus != 0) hash ^= UserStatus.GetHashCode();
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (ClientType != 0) hash ^= ClientType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserStatus != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserStatus);
      }
      if (UserId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserId);
      }
      if (ClientType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ClientType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserStatus);
      }
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (ClientType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClientType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMUserStatusUpdate other) {
      if (other == null) {
        return;
      }
      if (other.UserStatus != 0) {
        UserStatus = other.UserStatus;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.ClientType != 0) {
        ClientType = other.ClientType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserStatus = input.ReadUInt32();
            break;
          }
          case 16: {
            UserId = input.ReadUInt64();
            break;
          }
          case 24: {
            clientType_ = (global::IM.BaseDefine.ClientType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMUserCntUpdate : pb::IMessage<IMUserCntUpdate> {
    private static readonly pb::MessageParser<IMUserCntUpdate> _parser = new pb::MessageParser<IMUserCntUpdate>(() => new IMUserCntUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMUserCntUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Server.IMServerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUserCntUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUserCntUpdate(IMUserCntUpdate other) : this() {
      userAction_ = other.userAction_;
      userId_ = other.userId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUserCntUpdate Clone() {
      return new IMUserCntUpdate(this);
    }

    /// <summary>Field number for the "user_action" field.</summary>
    public const int UserActionFieldNumber = 1;
    private uint userAction_;
    /// <summary>
    ///cmd id:	0x070b
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserAction {
      get { return userAction_; }
      set {
        userAction_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMUserCntUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMUserCntUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserAction != other.UserAction) return false;
      if (UserId != other.UserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserAction != 0) hash ^= UserAction.GetHashCode();
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserAction != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserAction);
      }
      if (UserId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserAction);
      }
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMUserCntUpdate other) {
      if (other == null) {
        return;
      }
      if (other.UserAction != 0) {
        UserAction = other.UserAction;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserAction = input.ReadUInt32();
            break;
          }
          case 16: {
            UserId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMServerKickUser : pb::IMessage<IMServerKickUser> {
    private static readonly pb::MessageParser<IMServerKickUser> _parser = new pb::MessageParser<IMServerKickUser>(() => new IMServerKickUser());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMServerKickUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Server.IMServerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMServerKickUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMServerKickUser(IMServerKickUser other) : this() {
      userId_ = other.userId_;
      clientType_ = other.clientType_;
      reason_ = other.reason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMServerKickUser Clone() {
      return new IMServerKickUser(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:	0x070d
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "client_type" field.</summary>
    public const int ClientTypeFieldNumber = 2;
    private global::IM.BaseDefine.ClientType clientType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.ClientType ClientType {
      get { return clientType_; }
      set {
        clientType_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 3;
    private uint reason_;
    /// <summary>
    ///KICK_REASON_DUPLICATE_USER = 1;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMServerKickUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMServerKickUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ClientType != other.ClientType) return false;
      if (Reason != other.Reason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (ClientType != 0) hash ^= ClientType.GetHashCode();
      if (Reason != 0) hash ^= Reason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (ClientType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ClientType);
      }
      if (Reason != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (ClientType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClientType);
      }
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMServerKickUser other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.ClientType != 0) {
        ClientType = other.ClientType;
      }
      if (other.Reason != 0) {
        Reason = other.Reason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            clientType_ = (global::IM.BaseDefine.ClientType) input.ReadEnum();
            break;
          }
          case 24: {
            Reason = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMServerPCLoginStatusNotify : pb::IMessage<IMServerPCLoginStatusNotify> {
    private static readonly pb::MessageParser<IMServerPCLoginStatusNotify> _parser = new pb::MessageParser<IMServerPCLoginStatusNotify>(() => new IMServerPCLoginStatusNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMServerPCLoginStatusNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Server.IMServerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMServerPCLoginStatusNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMServerPCLoginStatusNotify(IMServerPCLoginStatusNotify other) : this() {
      userId_ = other.userId_;
      loginStatus_ = other.loginStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMServerPCLoginStatusNotify Clone() {
      return new IMServerPCLoginStatusNotify(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:	0x070e
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "login_status" field.</summary>
    public const int LoginStatusFieldNumber = 2;
    private uint loginStatus_;
    /// <summary>
    ///1: on   0: off
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LoginStatus {
      get { return loginStatus_; }
      set {
        loginStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMServerPCLoginStatusNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMServerPCLoginStatusNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (LoginStatus != other.LoginStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (LoginStatus != 0) hash ^= LoginStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (LoginStatus != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LoginStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (LoginStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoginStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMServerPCLoginStatusNotify other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.LoginStatus != 0) {
        LoginStatus = other.LoginStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            LoginStatus = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMPushToUserReq : pb::IMessage<IMPushToUserReq> {
    private static readonly pb::MessageParser<IMPushToUserReq> _parser = new pb::MessageParser<IMPushToUserReq>(() => new IMPushToUserReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMPushToUserReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Server.IMServerReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMPushToUserReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMPushToUserReq(IMPushToUserReq other) : this() {
      flash_ = other.flash_;
      data_ = other.data_;
      userTokenList_ = other.userTokenList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMPushToUserReq Clone() {
      return new IMPushToUserReq(this);
    }

    /// <summary>Field number for the "flash" field.</summary>
    public const int FlashFieldNumber = 1;
    private string flash_ = "";
    /// <summary>
    ///cmd id:	0x070f
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Flash {
      get { return flash_; }
      set {
        flash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_token_list" field.</summary>
    public const int UserTokenListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::IM.BaseDefine.UserTokenInfo> _repeated_userTokenList_codec
        = pb::FieldCodec.ForMessage(26, global::IM.BaseDefine.UserTokenInfo.Parser);
    private readonly pbc::RepeatedField<global::IM.BaseDefine.UserTokenInfo> userTokenList_ = new pbc::RepeatedField<global::IM.BaseDefine.UserTokenInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IM.BaseDefine.UserTokenInfo> UserTokenList {
      get { return userTokenList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMPushToUserReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMPushToUserReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Flash != other.Flash) return false;
      if (Data != other.Data) return false;
      if(!userTokenList_.Equals(other.userTokenList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Flash.Length != 0) hash ^= Flash.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      hash ^= userTokenList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Flash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Flash);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Data);
      }
      userTokenList_.WriteTo(output, _repeated_userTokenList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Flash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Flash);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      size += userTokenList_.CalculateSize(_repeated_userTokenList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMPushToUserReq other) {
      if (other == null) {
        return;
      }
      if (other.Flash.Length != 0) {
        Flash = other.Flash;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      userTokenList_.Add(other.userTokenList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Flash = input.ReadString();
            break;
          }
          case 18: {
            Data = input.ReadString();
            break;
          }
          case 26: {
            userTokenList_.AddEntriesFrom(input, _repeated_userTokenList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMPushToUserRsp : pb::IMessage<IMPushToUserRsp> {
    private static readonly pb::MessageParser<IMPushToUserRsp> _parser = new pb::MessageParser<IMPushToUserRsp>(() => new IMPushToUserRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMPushToUserRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Server.IMServerReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMPushToUserRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMPushToUserRsp(IMPushToUserRsp other) : this() {
      pushResultList_ = other.pushResultList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMPushToUserRsp Clone() {
      return new IMPushToUserRsp(this);
    }

    /// <summary>Field number for the "push_result_list" field.</summary>
    public const int PushResultListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::IM.BaseDefine.PushResult> _repeated_pushResultList_codec
        = pb::FieldCodec.ForMessage(10, global::IM.BaseDefine.PushResult.Parser);
    private readonly pbc::RepeatedField<global::IM.BaseDefine.PushResult> pushResultList_ = new pbc::RepeatedField<global::IM.BaseDefine.PushResult>();
    /// <summary>
    ///cmd id:	0x0710
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IM.BaseDefine.PushResult> PushResultList {
      get { return pushResultList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMPushToUserRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMPushToUserRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pushResultList_.Equals(other.pushResultList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pushResultList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pushResultList_.WriteTo(output, _repeated_pushResultList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pushResultList_.CalculateSize(_repeated_pushResultList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMPushToUserRsp other) {
      if (other == null) {
        return;
      }
      pushResultList_.Add(other.pushResultList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            pushResultList_.AddEntriesFrom(input, _repeated_pushResultList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMGroupGetShieldReq : pb::IMessage<IMGroupGetShieldReq> {
    private static readonly pb::MessageParser<IMGroupGetShieldReq> _parser = new pb::MessageParser<IMGroupGetShieldReq>(() => new IMGroupGetShieldReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMGroupGetShieldReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Server.IMServerReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupGetShieldReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupGetShieldReq(IMGroupGetShieldReq other) : this() {
      groupId_ = other.groupId_;
      userId_ = other.userId_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupGetShieldReq Clone() {
      return new IMGroupGetShieldReq(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private ulong groupId_;
    /// <summary>
    ///cmd id:			0x0711
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_userId_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> userId_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> UserId {
      get { return userId_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMGroupGetShieldReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMGroupGetShieldReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if(!userId_.Equals(other.userId_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId != 0UL) hash ^= GroupId.GetHashCode();
      hash ^= userId_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GroupId);
      }
      userId_.WriteTo(output, _repeated_userId_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GroupId);
      }
      size += userId_.CalculateSize(_repeated_userId_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMGroupGetShieldReq other) {
      if (other == null) {
        return;
      }
      if (other.GroupId != 0UL) {
        GroupId = other.GroupId;
      }
      userId_.Add(other.userId_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadUInt64();
            break;
          }
          case 18:
          case 16: {
            userId_.AddEntriesFrom(input, _repeated_userId_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMGroupGetShieldRsp : pb::IMessage<IMGroupGetShieldRsp> {
    private static readonly pb::MessageParser<IMGroupGetShieldRsp> _parser = new pb::MessageParser<IMGroupGetShieldRsp>(() => new IMGroupGetShieldRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMGroupGetShieldRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Server.IMServerReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupGetShieldRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupGetShieldRsp(IMGroupGetShieldRsp other) : this() {
      groupId_ = other.groupId_;
      shieldStatusList_ = other.shieldStatusList_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGroupGetShieldRsp Clone() {
      return new IMGroupGetShieldRsp(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private ulong groupId_;
    /// <summary>
    ///cmd id: 			0x0712
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "shield_status_list" field.</summary>
    public const int ShieldStatusListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::IM.BaseDefine.ShieldStatus> _repeated_shieldStatusList_codec
        = pb::FieldCodec.ForMessage(18, global::IM.BaseDefine.ShieldStatus.Parser);
    private readonly pbc::RepeatedField<global::IM.BaseDefine.ShieldStatus> shieldStatusList_ = new pbc::RepeatedField<global::IM.BaseDefine.ShieldStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IM.BaseDefine.ShieldStatus> ShieldStatusList {
      get { return shieldStatusList_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMGroupGetShieldRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMGroupGetShieldRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if(!shieldStatusList_.Equals(other.shieldStatusList_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId != 0UL) hash ^= GroupId.GetHashCode();
      hash ^= shieldStatusList_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GroupId);
      }
      shieldStatusList_.WriteTo(output, _repeated_shieldStatusList_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GroupId);
      }
      size += shieldStatusList_.CalculateSize(_repeated_shieldStatusList_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMGroupGetShieldRsp other) {
      if (other == null) {
        return;
      }
      if (other.GroupId != 0UL) {
        GroupId = other.GroupId;
      }
      shieldStatusList_.Add(other.shieldStatusList_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadUInt64();
            break;
          }
          case 18: {
            shieldStatusList_.AddEntriesFrom(input, _repeated_shieldStatusList_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMFileTransferReq : pb::IMessage<IMFileTransferReq> {
    private static readonly pb::MessageParser<IMFileTransferReq> _parser = new pb::MessageParser<IMFileTransferReq>(() => new IMFileTransferReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMFileTransferReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Server.IMServerReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileTransferReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileTransferReq(IMFileTransferReq other) : this() {
      fromUserId_ = other.fromUserId_;
      toUserId_ = other.toUserId_;
      fileName_ = other.fileName_;
      fileSize_ = other.fileSize_;
      transMode_ = other.transMode_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileTransferReq Clone() {
      return new IMFileTransferReq(this);
    }

    /// <summary>Field number for the "from_user_id" field.</summary>
    public const int FromUserIdFieldNumber = 1;
    private ulong fromUserId_;
    /// <summary>
    ///cmd id:			0x0715
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromUserId {
      get { return fromUserId_; }
      set {
        fromUserId_ = value;
      }
    }

    /// <summary>Field number for the "to_user_id" field.</summary>
    public const int ToUserIdFieldNumber = 2;
    private ulong toUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ToUserId {
      get { return toUserId_; }
      set {
        toUserId_ = value;
      }
    }

    /// <summary>Field number for the "file_name" field.</summary>
    public const int FileNameFieldNumber = 3;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file_size" field.</summary>
    public const int FileSizeFieldNumber = 4;
    private uint fileSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FileSize {
      get { return fileSize_; }
      set {
        fileSize_ = value;
      }
    }

    /// <summary>Field number for the "trans_mode" field.</summary>
    public const int TransModeFieldNumber = 5;
    private global::IM.BaseDefine.TransferFileType transMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.TransferFileType TransMode {
      get { return transMode_; }
      set {
        transMode_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMFileTransferReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMFileTransferReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromUserId != other.FromUserId) return false;
      if (ToUserId != other.ToUserId) return false;
      if (FileName != other.FileName) return false;
      if (FileSize != other.FileSize) return false;
      if (TransMode != other.TransMode) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromUserId != 0UL) hash ^= FromUserId.GetHashCode();
      if (ToUserId != 0UL) hash ^= ToUserId.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (FileSize != 0) hash ^= FileSize.GetHashCode();
      if (TransMode != 0) hash ^= TransMode.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromUserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FromUserId);
      }
      if (ToUserId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ToUserId);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FileName);
      }
      if (FileSize != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FileSize);
      }
      if (TransMode != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) TransMode);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromUserId);
      }
      if (ToUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ToUserId);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (FileSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FileSize);
      }
      if (TransMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TransMode);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMFileTransferReq other) {
      if (other == null) {
        return;
      }
      if (other.FromUserId != 0UL) {
        FromUserId = other.FromUserId;
      }
      if (other.ToUserId != 0UL) {
        ToUserId = other.ToUserId;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.FileSize != 0) {
        FileSize = other.FileSize;
      }
      if (other.TransMode != 0) {
        TransMode = other.TransMode;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromUserId = input.ReadUInt64();
            break;
          }
          case 16: {
            ToUserId = input.ReadUInt64();
            break;
          }
          case 26: {
            FileName = input.ReadString();
            break;
          }
          case 32: {
            FileSize = input.ReadUInt32();
            break;
          }
          case 40: {
            transMode_ = (global::IM.BaseDefine.TransferFileType) input.ReadEnum();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMFileTransferRsp : pb::IMessage<IMFileTransferRsp> {
    private static readonly pb::MessageParser<IMFileTransferRsp> _parser = new pb::MessageParser<IMFileTransferRsp>(() => new IMFileTransferRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMFileTransferRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Server.IMServerReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileTransferRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileTransferRsp(IMFileTransferRsp other) : this() {
      resultCode_ = other.resultCode_;
      fromUserId_ = other.fromUserId_;
      toUserId_ = other.toUserId_;
      fileName_ = other.fileName_;
      fileSize_ = other.fileSize_;
      taskId_ = other.taskId_;
      transMode_ = other.transMode_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileTransferRsp Clone() {
      return new IMFileTransferRsp(this);
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 1;
    private uint resultCode_;
    /// <summary>
    ///cmd id:			0x0716
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "from_user_id" field.</summary>
    public const int FromUserIdFieldNumber = 2;
    private ulong fromUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromUserId {
      get { return fromUserId_; }
      set {
        fromUserId_ = value;
      }
    }

    /// <summary>Field number for the "to_user_id" field.</summary>
    public const int ToUserIdFieldNumber = 3;
    private ulong toUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ToUserId {
      get { return toUserId_; }
      set {
        toUserId_ = value;
      }
    }

    /// <summary>Field number for the "file_name" field.</summary>
    public const int FileNameFieldNumber = 4;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file_size" field.</summary>
    public const int FileSizeFieldNumber = 5;
    private uint fileSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FileSize {
      get { return fileSize_; }
      set {
        fileSize_ = value;
      }
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 6;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trans_mode" field.</summary>
    public const int TransModeFieldNumber = 7;
    private global::IM.BaseDefine.TransferFileType transMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.TransferFileType TransMode {
      get { return transMode_; }
      set {
        transMode_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMFileTransferRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMFileTransferRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResultCode != other.ResultCode) return false;
      if (FromUserId != other.FromUserId) return false;
      if (ToUserId != other.ToUserId) return false;
      if (FileName != other.FileName) return false;
      if (FileSize != other.FileSize) return false;
      if (TaskId != other.TaskId) return false;
      if (TransMode != other.TransMode) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (FromUserId != 0UL) hash ^= FromUserId.GetHashCode();
      if (ToUserId != 0UL) hash ^= ToUserId.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (FileSize != 0) hash ^= FileSize.GetHashCode();
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (TransMode != 0) hash ^= TransMode.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResultCode != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ResultCode);
      }
      if (FromUserId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(FromUserId);
      }
      if (ToUserId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ToUserId);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FileName);
      }
      if (FileSize != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(FileSize);
      }
      if (TaskId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TaskId);
      }
      if (TransMode != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) TransMode);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultCode);
      }
      if (FromUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromUserId);
      }
      if (ToUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ToUserId);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (FileSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FileSize);
      }
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (TransMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TransMode);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMFileTransferRsp other) {
      if (other == null) {
        return;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.FromUserId != 0UL) {
        FromUserId = other.FromUserId;
      }
      if (other.ToUserId != 0UL) {
        ToUserId = other.ToUserId;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.FileSize != 0) {
        FileSize = other.FileSize;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.TransMode != 0) {
        TransMode = other.TransMode;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ResultCode = input.ReadUInt32();
            break;
          }
          case 16: {
            FromUserId = input.ReadUInt64();
            break;
          }
          case 24: {
            ToUserId = input.ReadUInt64();
            break;
          }
          case 34: {
            FileName = input.ReadString();
            break;
          }
          case 40: {
            FileSize = input.ReadUInt32();
            break;
          }
          case 50: {
            TaskId = input.ReadString();
            break;
          }
          case 56: {
            transMode_ = (global::IM.BaseDefine.TransferFileType) input.ReadEnum();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///cmd id:			0x0717
  /// </summary>
  public sealed partial class IMFileServerIPReq : pb::IMessage<IMFileServerIPReq> {
    private static readonly pb::MessageParser<IMFileServerIPReq> _parser = new pb::MessageParser<IMFileServerIPReq>(() => new IMFileServerIPReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMFileServerIPReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Server.IMServerReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileServerIPReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileServerIPReq(IMFileServerIPReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileServerIPReq Clone() {
      return new IMFileServerIPReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMFileServerIPReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMFileServerIPReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMFileServerIPReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class IMFileServerIPRsp : pb::IMessage<IMFileServerIPRsp> {
    private static readonly pb::MessageParser<IMFileServerIPRsp> _parser = new pb::MessageParser<IMFileServerIPRsp>(() => new IMFileServerIPRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMFileServerIPRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Server.IMServerReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileServerIPRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileServerIPRsp(IMFileServerIPRsp other) : this() {
      ipAddrList_ = other.ipAddrList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileServerIPRsp Clone() {
      return new IMFileServerIPRsp(this);
    }

    /// <summary>Field number for the "ip_addr_list" field.</summary>
    public const int IpAddrListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::IM.BaseDefine.IpAddr> _repeated_ipAddrList_codec
        = pb::FieldCodec.ForMessage(10, global::IM.BaseDefine.IpAddr.Parser);
    private readonly pbc::RepeatedField<global::IM.BaseDefine.IpAddr> ipAddrList_ = new pbc::RepeatedField<global::IM.BaseDefine.IpAddr>();
    /// <summary>
    ///cmd id:			0x0718
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IM.BaseDefine.IpAddr> IpAddrList {
      get { return ipAddrList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMFileServerIPRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMFileServerIPRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ipAddrList_.Equals(other.ipAddrList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ipAddrList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ipAddrList_.WriteTo(output, _repeated_ipAddrList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ipAddrList_.CalculateSize(_repeated_ipAddrList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMFileServerIPRsp other) {
      if (other == null) {
        return;
      }
      ipAddrList_.Add(other.ipAddrList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ipAddrList_.AddEntriesFrom(input, _repeated_ipAddrList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
