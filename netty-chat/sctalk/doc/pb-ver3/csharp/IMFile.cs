// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.File.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IM.File {

  /// <summary>Holder for reflection information generated from IM.File.proto</summary>
  public static partial class IMFileReflection {

    #region Descriptor
    /// <summary>File descriptor for IM.File.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IMFileReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1JTS5GaWxlLnByb3RvEgdJTS5GaWxlGhNJTS5CYXNlRGVmaW5lLnByb3Rv",
            "ImQKDklNRmlsZUxvZ2luUmVxEg8KB3VzZXJfaWQYASABKAQSDwoHdGFza19p",
            "ZBgCIAEoCRIwCglmaWxlX3JvbGUYAyABKA4yHS5JTS5CYXNlRGVmaW5lLkNs",
            "aWVudEZpbGVSb2xlIjYKDklNRmlsZUxvZ2luUnNwEhMKC3Jlc3VsdF9jb2Rl",
            "GAEgASgNEg8KB3Rhc2tfaWQYAiABKAkiXgoLSU1GaWxlU3RhdGUSLQoFc3Rh",
            "dGUYASABKA4yHi5JTS5CYXNlRGVmaW5lLkNsaWVudEZpbGVTdGF0ZRIPCgd0",
            "YXNrX2lkGAIgASgJEg8KB3VzZXJfaWQYAyABKAQijQEKEUlNRmlsZVB1bGxE",
            "YXRhUmVxEg8KB3Rhc2tfaWQYASABKAkSDwoHdXNlcl9pZBgCIAEoBBIzCgp0",
            "cmFuc19tb2RlGAMgASgOMh8uSU0uQmFzZURlZmluZS5UcmFuc2ZlckZpbGVU",
            "eXBlEg4KBm9mZnNldBgEIAEoDRIRCglkYXRhX3NpemUYBSABKA0ibQoRSU1G",
            "aWxlUHVsbERhdGFSc3ASEwoLcmVzdWx0X2NvZGUYASABKA0SDwoHdGFza19p",
            "ZBgCIAEoCRIPCgd1c2VyX2lkGAMgASgEEg4KBm9mZnNldBgEIAEoDRIRCglm",
            "aWxlX2RhdGEYBSABKAwikAEKCUlNRmlsZVJlcRIUCgxmcm9tX3VzZXJfaWQY",
            "ASABKAQSEgoKdG9fdXNlcl9pZBgCIAEoBBIRCglmaWxlX25hbWUYAyABKAkS",
            "EQoJZmlsZV9zaXplGAQgASgNEjMKCnRyYW5zX21vZGUYBSABKA4yHy5JTS5C",
            "YXNlRGVmaW5lLlRyYW5zZmVyRmlsZVR5cGUi0AEKCUlNRmlsZVJzcBITCgty",
            "ZXN1bHRfY29kZRgBIAEoDRIUCgxmcm9tX3VzZXJfaWQYAiABKAQSEgoKdG9f",
            "dXNlcl9pZBgDIAEoBBIRCglmaWxlX25hbWUYBCABKAkSDwoHdGFza19pZBgF",
            "IAEoCRIrCgxpcF9hZGRyX2xpc3QYBiADKAsyFS5JTS5CYXNlRGVmaW5lLklw",
            "QWRkchIzCgp0cmFuc19tb2RlGAcgASgOMh8uSU0uQmFzZURlZmluZS5UcmFu",
            "c2ZlckZpbGVUeXBlIugBCgxJTUZpbGVOb3RpZnkSFAoMZnJvbV91c2VyX2lk",
            "GAEgASgEEhIKCnRvX3VzZXJfaWQYAiABKAQSEQoJZmlsZV9uYW1lGAMgASgJ",
            "EhEKCWZpbGVfc2l6ZRgEIAEoDRIPCgd0YXNrX2lkGAUgASgJEisKDGlwX2Fk",
            "ZHJfbGlzdBgGIAMoCzIVLklNLkJhc2VEZWZpbmUuSXBBZGRyEjMKCnRyYW5z",
            "X21vZGUYByABKA4yHy5JTS5CYXNlRGVmaW5lLlRyYW5zZmVyRmlsZVR5cGUS",
            "FQoNb2ZmbGluZV9yZWFkeRgIIAEoDSI7ChNJTUZpbGVIYXNPZmZsaW5lUmVx",
            "Eg8KB3VzZXJfaWQYASABKAQSEwoLYXR0YWNoX2RhdGEYFCABKAwiowEKE0lN",
            "RmlsZUhhc09mZmxpbmVSc3ASDwoHdXNlcl9pZBgBIAEoBBI5ChFvZmZsaW5l",
            "X2ZpbGVfbGlzdBgCIAMoCzIeLklNLkJhc2VEZWZpbmUuT2ZmbGluZUZpbGVJ",
            "bmZvEisKDGlwX2FkZHJfbGlzdBgDIAMoCzIVLklNLkJhc2VEZWZpbmUuSXBB",
            "ZGRyEhMKC2F0dGFjaF9kYXRhGBQgASgMInYKE0lNRmlsZUFkZE9mZmxpbmVS",
            "ZXESFAoMZnJvbV91c2VyX2lkGAEgASgEEhIKCnRvX3VzZXJfaWQYAiABKAQS",
            "DwoHdGFza19pZBgDIAEoCRIRCglmaWxlX25hbWUYBCABKAkSEQoJZmlsZV9z",
            "aXplGAUgASgNIlAKE0lNRmlsZURlbE9mZmxpbmVSZXESFAoMZnJvbV91c2Vy",
            "X2lkGAEgASgEEhIKCnRvX3VzZXJfaWQYAiABKAQSDwoHdGFza19pZBgDIAEo",
            "CUIiCh5jb20uYmx0LnRhbGsuY29tbW9uLmNvZGUucHJvdG9IA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::IM.BaseDefine.IMBaseDefineReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.File.IMFileLoginReq), global::IM.File.IMFileLoginReq.Parser, new[]{ "UserId", "TaskId", "FileRole" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.File.IMFileLoginRsp), global::IM.File.IMFileLoginRsp.Parser, new[]{ "ResultCode", "TaskId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.File.IMFileState), global::IM.File.IMFileState.Parser, new[]{ "State", "TaskId", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.File.IMFilePullDataReq), global::IM.File.IMFilePullDataReq.Parser, new[]{ "TaskId", "UserId", "TransMode", "Offset", "DataSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.File.IMFilePullDataRsp), global::IM.File.IMFilePullDataRsp.Parser, new[]{ "ResultCode", "TaskId", "UserId", "Offset", "FileData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.File.IMFileReq), global::IM.File.IMFileReq.Parser, new[]{ "FromUserId", "ToUserId", "FileName", "FileSize", "TransMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.File.IMFileRsp), global::IM.File.IMFileRsp.Parser, new[]{ "ResultCode", "FromUserId", "ToUserId", "FileName", "TaskId", "IpAddrList", "TransMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.File.IMFileNotify), global::IM.File.IMFileNotify.Parser, new[]{ "FromUserId", "ToUserId", "FileName", "FileSize", "TaskId", "IpAddrList", "TransMode", "OfflineReady" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.File.IMFileHasOfflineReq), global::IM.File.IMFileHasOfflineReq.Parser, new[]{ "UserId", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.File.IMFileHasOfflineRsp), global::IM.File.IMFileHasOfflineRsp.Parser, new[]{ "UserId", "OfflineFileList", "IpAddrList", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.File.IMFileAddOfflineReq), global::IM.File.IMFileAddOfflineReq.Parser, new[]{ "FromUserId", "ToUserId", "TaskId", "FileName", "FileSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.File.IMFileDelOfflineReq), global::IM.File.IMFileDelOfflineReq.Parser, new[]{ "FromUserId", "ToUserId", "TaskId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class IMFileLoginReq : pb::IMessage<IMFileLoginReq> {
    private static readonly pb::MessageParser<IMFileLoginReq> _parser = new pb::MessageParser<IMFileLoginReq>(() => new IMFileLoginReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMFileLoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.File.IMFileReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileLoginReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileLoginReq(IMFileLoginReq other) : this() {
      userId_ = other.userId_;
      taskId_ = other.taskId_;
      fileRole_ = other.fileRole_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileLoginReq Clone() {
      return new IMFileLoginReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:	0x0501
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file_role" field.</summary>
    public const int FileRoleFieldNumber = 3;
    private global::IM.BaseDefine.ClientFileRole fileRole_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.ClientFileRole FileRole {
      get { return fileRole_; }
      set {
        fileRole_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMFileLoginReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMFileLoginReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (TaskId != other.TaskId) return false;
      if (FileRole != other.FileRole) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (FileRole != 0) hash ^= FileRole.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (TaskId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TaskId);
      }
      if (FileRole != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) FileRole);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (FileRole != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FileRole);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMFileLoginReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.FileRole != 0) {
        FileRole = other.FileRole;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 18: {
            TaskId = input.ReadString();
            break;
          }
          case 24: {
            fileRole_ = (global::IM.BaseDefine.ClientFileRole) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMFileLoginRsp : pb::IMessage<IMFileLoginRsp> {
    private static readonly pb::MessageParser<IMFileLoginRsp> _parser = new pb::MessageParser<IMFileLoginRsp>(() => new IMFileLoginRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMFileLoginRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.File.IMFileReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileLoginRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileLoginRsp(IMFileLoginRsp other) : this() {
      resultCode_ = other.resultCode_;
      taskId_ = other.taskId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileLoginRsp Clone() {
      return new IMFileLoginRsp(this);
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 1;
    private uint resultCode_;
    /// <summary>
    ///cmd id:	0x0502
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMFileLoginRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMFileLoginRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResultCode != other.ResultCode) return false;
      if (TaskId != other.TaskId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResultCode != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ResultCode);
      }
      if (TaskId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultCode);
      }
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMFileLoginRsp other) {
      if (other == null) {
        return;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ResultCode = input.ReadUInt32();
            break;
          }
          case 18: {
            TaskId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMFileState : pb::IMessage<IMFileState> {
    private static readonly pb::MessageParser<IMFileState> _parser = new pb::MessageParser<IMFileState>(() => new IMFileState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMFileState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.File.IMFileReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileState(IMFileState other) : this() {
      state_ = other.state_;
      taskId_ = other.taskId_;
      userId_ = other.userId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileState Clone() {
      return new IMFileState(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::IM.BaseDefine.ClientFileState state_ = 0;
    /// <summary>
    ///cmd id: 	0x0503
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.ClientFileState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 3;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMFileState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMFileState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (TaskId != other.TaskId) return false;
      if (UserId != other.UserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (TaskId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TaskId);
      }
      if (UserId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMFileState other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state_ = (global::IM.BaseDefine.ClientFileState) input.ReadEnum();
            break;
          }
          case 18: {
            TaskId = input.ReadString();
            break;
          }
          case 24: {
            UserId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMFilePullDataReq : pb::IMessage<IMFilePullDataReq> {
    private static readonly pb::MessageParser<IMFilePullDataReq> _parser = new pb::MessageParser<IMFilePullDataReq>(() => new IMFilePullDataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMFilePullDataReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.File.IMFileReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFilePullDataReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFilePullDataReq(IMFilePullDataReq other) : this() {
      taskId_ = other.taskId_;
      userId_ = other.userId_;
      transMode_ = other.transMode_;
      offset_ = other.offset_;
      dataSize_ = other.dataSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFilePullDataReq Clone() {
      return new IMFilePullDataReq(this);
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private string taskId_ = "";
    /// <summary>
    ///cmd id:	0x0504
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "trans_mode" field.</summary>
    public const int TransModeFieldNumber = 3;
    private global::IM.BaseDefine.TransferFileType transMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.TransferFileType TransMode {
      get { return transMode_; }
      set {
        transMode_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 4;
    private uint offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "data_size" field.</summary>
    public const int DataSizeFieldNumber = 5;
    private uint dataSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DataSize {
      get { return dataSize_; }
      set {
        dataSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMFilePullDataReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMFilePullDataReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (UserId != other.UserId) return false;
      if (TransMode != other.TransMode) return false;
      if (Offset != other.Offset) return false;
      if (DataSize != other.DataSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (TransMode != 0) hash ^= TransMode.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (DataSize != 0) hash ^= DataSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      if (UserId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserId);
      }
      if (TransMode != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) TransMode);
      }
      if (Offset != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Offset);
      }
      if (DataSize != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(DataSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (TransMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TransMode);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Offset);
      }
      if (DataSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMFilePullDataReq other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.TransMode != 0) {
        TransMode = other.TransMode;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.DataSize != 0) {
        DataSize = other.DataSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
          case 16: {
            UserId = input.ReadUInt64();
            break;
          }
          case 24: {
            transMode_ = (global::IM.BaseDefine.TransferFileType) input.ReadEnum();
            break;
          }
          case 32: {
            Offset = input.ReadUInt32();
            break;
          }
          case 40: {
            DataSize = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMFilePullDataRsp : pb::IMessage<IMFilePullDataRsp> {
    private static readonly pb::MessageParser<IMFilePullDataRsp> _parser = new pb::MessageParser<IMFilePullDataRsp>(() => new IMFilePullDataRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMFilePullDataRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.File.IMFileReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFilePullDataRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFilePullDataRsp(IMFilePullDataRsp other) : this() {
      resultCode_ = other.resultCode_;
      taskId_ = other.taskId_;
      userId_ = other.userId_;
      offset_ = other.offset_;
      fileData_ = other.fileData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFilePullDataRsp Clone() {
      return new IMFilePullDataRsp(this);
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 1;
    private uint resultCode_;
    /// <summary>
    ///cmd id: 	0x0505
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 3;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 4;
    private uint offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "file_data" field.</summary>
    public const int FileDataFieldNumber = 5;
    private pb::ByteString fileData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FileData {
      get { return fileData_; }
      set {
        fileData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMFilePullDataRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMFilePullDataRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResultCode != other.ResultCode) return false;
      if (TaskId != other.TaskId) return false;
      if (UserId != other.UserId) return false;
      if (Offset != other.Offset) return false;
      if (FileData != other.FileData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (FileData.Length != 0) hash ^= FileData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResultCode != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ResultCode);
      }
      if (TaskId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TaskId);
      }
      if (UserId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(UserId);
      }
      if (Offset != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Offset);
      }
      if (FileData.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(FileData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultCode);
      }
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Offset);
      }
      if (FileData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FileData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMFilePullDataRsp other) {
      if (other == null) {
        return;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.FileData.Length != 0) {
        FileData = other.FileData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ResultCode = input.ReadUInt32();
            break;
          }
          case 18: {
            TaskId = input.ReadString();
            break;
          }
          case 24: {
            UserId = input.ReadUInt64();
            break;
          }
          case 32: {
            Offset = input.ReadUInt32();
            break;
          }
          case 42: {
            FileData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMFileReq : pb::IMessage<IMFileReq> {
    private static readonly pb::MessageParser<IMFileReq> _parser = new pb::MessageParser<IMFileReq>(() => new IMFileReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMFileReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.File.IMFileReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileReq(IMFileReq other) : this() {
      fromUserId_ = other.fromUserId_;
      toUserId_ = other.toUserId_;
      fileName_ = other.fileName_;
      fileSize_ = other.fileSize_;
      transMode_ = other.transMode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileReq Clone() {
      return new IMFileReq(this);
    }

    /// <summary>Field number for the "from_user_id" field.</summary>
    public const int FromUserIdFieldNumber = 1;
    private ulong fromUserId_;
    /// <summary>
    ///cmd id: 	0x0506
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromUserId {
      get { return fromUserId_; }
      set {
        fromUserId_ = value;
      }
    }

    /// <summary>Field number for the "to_user_id" field.</summary>
    public const int ToUserIdFieldNumber = 2;
    private ulong toUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ToUserId {
      get { return toUserId_; }
      set {
        toUserId_ = value;
      }
    }

    /// <summary>Field number for the "file_name" field.</summary>
    public const int FileNameFieldNumber = 3;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file_size" field.</summary>
    public const int FileSizeFieldNumber = 4;
    private uint fileSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FileSize {
      get { return fileSize_; }
      set {
        fileSize_ = value;
      }
    }

    /// <summary>Field number for the "trans_mode" field.</summary>
    public const int TransModeFieldNumber = 5;
    private global::IM.BaseDefine.TransferFileType transMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.TransferFileType TransMode {
      get { return transMode_; }
      set {
        transMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMFileReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMFileReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromUserId != other.FromUserId) return false;
      if (ToUserId != other.ToUserId) return false;
      if (FileName != other.FileName) return false;
      if (FileSize != other.FileSize) return false;
      if (TransMode != other.TransMode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromUserId != 0UL) hash ^= FromUserId.GetHashCode();
      if (ToUserId != 0UL) hash ^= ToUserId.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (FileSize != 0) hash ^= FileSize.GetHashCode();
      if (TransMode != 0) hash ^= TransMode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromUserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FromUserId);
      }
      if (ToUserId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ToUserId);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FileName);
      }
      if (FileSize != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FileSize);
      }
      if (TransMode != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) TransMode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromUserId);
      }
      if (ToUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ToUserId);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (FileSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FileSize);
      }
      if (TransMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TransMode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMFileReq other) {
      if (other == null) {
        return;
      }
      if (other.FromUserId != 0UL) {
        FromUserId = other.FromUserId;
      }
      if (other.ToUserId != 0UL) {
        ToUserId = other.ToUserId;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.FileSize != 0) {
        FileSize = other.FileSize;
      }
      if (other.TransMode != 0) {
        TransMode = other.TransMode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromUserId = input.ReadUInt64();
            break;
          }
          case 16: {
            ToUserId = input.ReadUInt64();
            break;
          }
          case 26: {
            FileName = input.ReadString();
            break;
          }
          case 32: {
            FileSize = input.ReadUInt32();
            break;
          }
          case 40: {
            transMode_ = (global::IM.BaseDefine.TransferFileType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMFileRsp : pb::IMessage<IMFileRsp> {
    private static readonly pb::MessageParser<IMFileRsp> _parser = new pb::MessageParser<IMFileRsp>(() => new IMFileRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMFileRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.File.IMFileReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileRsp(IMFileRsp other) : this() {
      resultCode_ = other.resultCode_;
      fromUserId_ = other.fromUserId_;
      toUserId_ = other.toUserId_;
      fileName_ = other.fileName_;
      taskId_ = other.taskId_;
      ipAddrList_ = other.ipAddrList_.Clone();
      transMode_ = other.transMode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileRsp Clone() {
      return new IMFileRsp(this);
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 1;
    private uint resultCode_;
    /// <summary>
    ///cmd id: 	0x0507
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "from_user_id" field.</summary>
    public const int FromUserIdFieldNumber = 2;
    private ulong fromUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromUserId {
      get { return fromUserId_; }
      set {
        fromUserId_ = value;
      }
    }

    /// <summary>Field number for the "to_user_id" field.</summary>
    public const int ToUserIdFieldNumber = 3;
    private ulong toUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ToUserId {
      get { return toUserId_; }
      set {
        toUserId_ = value;
      }
    }

    /// <summary>Field number for the "file_name" field.</summary>
    public const int FileNameFieldNumber = 4;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 5;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip_addr_list" field.</summary>
    public const int IpAddrListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::IM.BaseDefine.IpAddr> _repeated_ipAddrList_codec
        = pb::FieldCodec.ForMessage(50, global::IM.BaseDefine.IpAddr.Parser);
    private readonly pbc::RepeatedField<global::IM.BaseDefine.IpAddr> ipAddrList_ = new pbc::RepeatedField<global::IM.BaseDefine.IpAddr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IM.BaseDefine.IpAddr> IpAddrList {
      get { return ipAddrList_; }
    }

    /// <summary>Field number for the "trans_mode" field.</summary>
    public const int TransModeFieldNumber = 7;
    private global::IM.BaseDefine.TransferFileType transMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.TransferFileType TransMode {
      get { return transMode_; }
      set {
        transMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMFileRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMFileRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResultCode != other.ResultCode) return false;
      if (FromUserId != other.FromUserId) return false;
      if (ToUserId != other.ToUserId) return false;
      if (FileName != other.FileName) return false;
      if (TaskId != other.TaskId) return false;
      if(!ipAddrList_.Equals(other.ipAddrList_)) return false;
      if (TransMode != other.TransMode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (FromUserId != 0UL) hash ^= FromUserId.GetHashCode();
      if (ToUserId != 0UL) hash ^= ToUserId.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      hash ^= ipAddrList_.GetHashCode();
      if (TransMode != 0) hash ^= TransMode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResultCode != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ResultCode);
      }
      if (FromUserId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(FromUserId);
      }
      if (ToUserId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ToUserId);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FileName);
      }
      if (TaskId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TaskId);
      }
      ipAddrList_.WriteTo(output, _repeated_ipAddrList_codec);
      if (TransMode != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) TransMode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultCode);
      }
      if (FromUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromUserId);
      }
      if (ToUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ToUserId);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      size += ipAddrList_.CalculateSize(_repeated_ipAddrList_codec);
      if (TransMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TransMode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMFileRsp other) {
      if (other == null) {
        return;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.FromUserId != 0UL) {
        FromUserId = other.FromUserId;
      }
      if (other.ToUserId != 0UL) {
        ToUserId = other.ToUserId;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      ipAddrList_.Add(other.ipAddrList_);
      if (other.TransMode != 0) {
        TransMode = other.TransMode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ResultCode = input.ReadUInt32();
            break;
          }
          case 16: {
            FromUserId = input.ReadUInt64();
            break;
          }
          case 24: {
            ToUserId = input.ReadUInt64();
            break;
          }
          case 34: {
            FileName = input.ReadString();
            break;
          }
          case 42: {
            TaskId = input.ReadString();
            break;
          }
          case 50: {
            ipAddrList_.AddEntriesFrom(input, _repeated_ipAddrList_codec);
            break;
          }
          case 56: {
            transMode_ = (global::IM.BaseDefine.TransferFileType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMFileNotify : pb::IMessage<IMFileNotify> {
    private static readonly pb::MessageParser<IMFileNotify> _parser = new pb::MessageParser<IMFileNotify>(() => new IMFileNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMFileNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.File.IMFileReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileNotify(IMFileNotify other) : this() {
      fromUserId_ = other.fromUserId_;
      toUserId_ = other.toUserId_;
      fileName_ = other.fileName_;
      fileSize_ = other.fileSize_;
      taskId_ = other.taskId_;
      ipAddrList_ = other.ipAddrList_.Clone();
      transMode_ = other.transMode_;
      offlineReady_ = other.offlineReady_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileNotify Clone() {
      return new IMFileNotify(this);
    }

    /// <summary>Field number for the "from_user_id" field.</summary>
    public const int FromUserIdFieldNumber = 1;
    private ulong fromUserId_;
    /// <summary>
    ///cmd id: 	0x0508
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromUserId {
      get { return fromUserId_; }
      set {
        fromUserId_ = value;
      }
    }

    /// <summary>Field number for the "to_user_id" field.</summary>
    public const int ToUserIdFieldNumber = 2;
    private ulong toUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ToUserId {
      get { return toUserId_; }
      set {
        toUserId_ = value;
      }
    }

    /// <summary>Field number for the "file_name" field.</summary>
    public const int FileNameFieldNumber = 3;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file_size" field.</summary>
    public const int FileSizeFieldNumber = 4;
    private uint fileSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FileSize {
      get { return fileSize_; }
      set {
        fileSize_ = value;
      }
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 5;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip_addr_list" field.</summary>
    public const int IpAddrListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::IM.BaseDefine.IpAddr> _repeated_ipAddrList_codec
        = pb::FieldCodec.ForMessage(50, global::IM.BaseDefine.IpAddr.Parser);
    private readonly pbc::RepeatedField<global::IM.BaseDefine.IpAddr> ipAddrList_ = new pbc::RepeatedField<global::IM.BaseDefine.IpAddr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IM.BaseDefine.IpAddr> IpAddrList {
      get { return ipAddrList_; }
    }

    /// <summary>Field number for the "trans_mode" field.</summary>
    public const int TransModeFieldNumber = 7;
    private global::IM.BaseDefine.TransferFileType transMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.TransferFileType TransMode {
      get { return transMode_; }
      set {
        transMode_ = value;
      }
    }

    /// <summary>Field number for the "offline_ready" field.</summary>
    public const int OfflineReadyFieldNumber = 8;
    private uint offlineReady_;
    /// <summary>
    ///1:True 0:False
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OfflineReady {
      get { return offlineReady_; }
      set {
        offlineReady_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMFileNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMFileNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromUserId != other.FromUserId) return false;
      if (ToUserId != other.ToUserId) return false;
      if (FileName != other.FileName) return false;
      if (FileSize != other.FileSize) return false;
      if (TaskId != other.TaskId) return false;
      if(!ipAddrList_.Equals(other.ipAddrList_)) return false;
      if (TransMode != other.TransMode) return false;
      if (OfflineReady != other.OfflineReady) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromUserId != 0UL) hash ^= FromUserId.GetHashCode();
      if (ToUserId != 0UL) hash ^= ToUserId.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (FileSize != 0) hash ^= FileSize.GetHashCode();
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      hash ^= ipAddrList_.GetHashCode();
      if (TransMode != 0) hash ^= TransMode.GetHashCode();
      if (OfflineReady != 0) hash ^= OfflineReady.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromUserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FromUserId);
      }
      if (ToUserId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ToUserId);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FileName);
      }
      if (FileSize != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FileSize);
      }
      if (TaskId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TaskId);
      }
      ipAddrList_.WriteTo(output, _repeated_ipAddrList_codec);
      if (TransMode != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) TransMode);
      }
      if (OfflineReady != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(OfflineReady);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromUserId);
      }
      if (ToUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ToUserId);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (FileSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FileSize);
      }
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      size += ipAddrList_.CalculateSize(_repeated_ipAddrList_codec);
      if (TransMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TransMode);
      }
      if (OfflineReady != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OfflineReady);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMFileNotify other) {
      if (other == null) {
        return;
      }
      if (other.FromUserId != 0UL) {
        FromUserId = other.FromUserId;
      }
      if (other.ToUserId != 0UL) {
        ToUserId = other.ToUserId;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.FileSize != 0) {
        FileSize = other.FileSize;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      ipAddrList_.Add(other.ipAddrList_);
      if (other.TransMode != 0) {
        TransMode = other.TransMode;
      }
      if (other.OfflineReady != 0) {
        OfflineReady = other.OfflineReady;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromUserId = input.ReadUInt64();
            break;
          }
          case 16: {
            ToUserId = input.ReadUInt64();
            break;
          }
          case 26: {
            FileName = input.ReadString();
            break;
          }
          case 32: {
            FileSize = input.ReadUInt32();
            break;
          }
          case 42: {
            TaskId = input.ReadString();
            break;
          }
          case 50: {
            ipAddrList_.AddEntriesFrom(input, _repeated_ipAddrList_codec);
            break;
          }
          case 56: {
            transMode_ = (global::IM.BaseDefine.TransferFileType) input.ReadEnum();
            break;
          }
          case 64: {
            OfflineReady = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMFileHasOfflineReq : pb::IMessage<IMFileHasOfflineReq> {
    private static readonly pb::MessageParser<IMFileHasOfflineReq> _parser = new pb::MessageParser<IMFileHasOfflineReq>(() => new IMFileHasOfflineReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMFileHasOfflineReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.File.IMFileReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileHasOfflineReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileHasOfflineReq(IMFileHasOfflineReq other) : this() {
      userId_ = other.userId_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileHasOfflineReq Clone() {
      return new IMFileHasOfflineReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id: 	0x0509
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMFileHasOfflineReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMFileHasOfflineReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMFileHasOfflineReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMFileHasOfflineRsp : pb::IMessage<IMFileHasOfflineRsp> {
    private static readonly pb::MessageParser<IMFileHasOfflineRsp> _parser = new pb::MessageParser<IMFileHasOfflineRsp>(() => new IMFileHasOfflineRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMFileHasOfflineRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.File.IMFileReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileHasOfflineRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileHasOfflineRsp(IMFileHasOfflineRsp other) : this() {
      userId_ = other.userId_;
      offlineFileList_ = other.offlineFileList_.Clone();
      ipAddrList_ = other.ipAddrList_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileHasOfflineRsp Clone() {
      return new IMFileHasOfflineRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:	0x050a
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "offline_file_list" field.</summary>
    public const int OfflineFileListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::IM.BaseDefine.OfflineFileInfo> _repeated_offlineFileList_codec
        = pb::FieldCodec.ForMessage(18, global::IM.BaseDefine.OfflineFileInfo.Parser);
    private readonly pbc::RepeatedField<global::IM.BaseDefine.OfflineFileInfo> offlineFileList_ = new pbc::RepeatedField<global::IM.BaseDefine.OfflineFileInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IM.BaseDefine.OfflineFileInfo> OfflineFileList {
      get { return offlineFileList_; }
    }

    /// <summary>Field number for the "ip_addr_list" field.</summary>
    public const int IpAddrListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::IM.BaseDefine.IpAddr> _repeated_ipAddrList_codec
        = pb::FieldCodec.ForMessage(26, global::IM.BaseDefine.IpAddr.Parser);
    private readonly pbc::RepeatedField<global::IM.BaseDefine.IpAddr> ipAddrList_ = new pbc::RepeatedField<global::IM.BaseDefine.IpAddr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IM.BaseDefine.IpAddr> IpAddrList {
      get { return ipAddrList_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMFileHasOfflineRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMFileHasOfflineRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if(!offlineFileList_.Equals(other.offlineFileList_)) return false;
      if(!ipAddrList_.Equals(other.ipAddrList_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      hash ^= offlineFileList_.GetHashCode();
      hash ^= ipAddrList_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      offlineFileList_.WriteTo(output, _repeated_offlineFileList_codec);
      ipAddrList_.WriteTo(output, _repeated_ipAddrList_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      size += offlineFileList_.CalculateSize(_repeated_offlineFileList_codec);
      size += ipAddrList_.CalculateSize(_repeated_ipAddrList_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMFileHasOfflineRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      offlineFileList_.Add(other.offlineFileList_);
      ipAddrList_.Add(other.ipAddrList_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 18: {
            offlineFileList_.AddEntriesFrom(input, _repeated_offlineFileList_codec);
            break;
          }
          case 26: {
            ipAddrList_.AddEntriesFrom(input, _repeated_ipAddrList_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMFileAddOfflineReq : pb::IMessage<IMFileAddOfflineReq> {
    private static readonly pb::MessageParser<IMFileAddOfflineReq> _parser = new pb::MessageParser<IMFileAddOfflineReq>(() => new IMFileAddOfflineReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMFileAddOfflineReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.File.IMFileReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileAddOfflineReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileAddOfflineReq(IMFileAddOfflineReq other) : this() {
      fromUserId_ = other.fromUserId_;
      toUserId_ = other.toUserId_;
      taskId_ = other.taskId_;
      fileName_ = other.fileName_;
      fileSize_ = other.fileSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileAddOfflineReq Clone() {
      return new IMFileAddOfflineReq(this);
    }

    /// <summary>Field number for the "from_user_id" field.</summary>
    public const int FromUserIdFieldNumber = 1;
    private ulong fromUserId_;
    /// <summary>
    ///cmd id:	0x050b
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromUserId {
      get { return fromUserId_; }
      set {
        fromUserId_ = value;
      }
    }

    /// <summary>Field number for the "to_user_id" field.</summary>
    public const int ToUserIdFieldNumber = 2;
    private ulong toUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ToUserId {
      get { return toUserId_; }
      set {
        toUserId_ = value;
      }
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 3;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file_name" field.</summary>
    public const int FileNameFieldNumber = 4;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file_size" field.</summary>
    public const int FileSizeFieldNumber = 5;
    private uint fileSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FileSize {
      get { return fileSize_; }
      set {
        fileSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMFileAddOfflineReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMFileAddOfflineReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromUserId != other.FromUserId) return false;
      if (ToUserId != other.ToUserId) return false;
      if (TaskId != other.TaskId) return false;
      if (FileName != other.FileName) return false;
      if (FileSize != other.FileSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromUserId != 0UL) hash ^= FromUserId.GetHashCode();
      if (ToUserId != 0UL) hash ^= ToUserId.GetHashCode();
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (FileSize != 0) hash ^= FileSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromUserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FromUserId);
      }
      if (ToUserId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ToUserId);
      }
      if (TaskId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TaskId);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FileName);
      }
      if (FileSize != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(FileSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromUserId);
      }
      if (ToUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ToUserId);
      }
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (FileSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FileSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMFileAddOfflineReq other) {
      if (other == null) {
        return;
      }
      if (other.FromUserId != 0UL) {
        FromUserId = other.FromUserId;
      }
      if (other.ToUserId != 0UL) {
        ToUserId = other.ToUserId;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.FileSize != 0) {
        FileSize = other.FileSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromUserId = input.ReadUInt64();
            break;
          }
          case 16: {
            ToUserId = input.ReadUInt64();
            break;
          }
          case 26: {
            TaskId = input.ReadString();
            break;
          }
          case 34: {
            FileName = input.ReadString();
            break;
          }
          case 40: {
            FileSize = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMFileDelOfflineReq : pb::IMessage<IMFileDelOfflineReq> {
    private static readonly pb::MessageParser<IMFileDelOfflineReq> _parser = new pb::MessageParser<IMFileDelOfflineReq>(() => new IMFileDelOfflineReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMFileDelOfflineReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.File.IMFileReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileDelOfflineReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileDelOfflineReq(IMFileDelOfflineReq other) : this() {
      fromUserId_ = other.fromUserId_;
      toUserId_ = other.toUserId_;
      taskId_ = other.taskId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMFileDelOfflineReq Clone() {
      return new IMFileDelOfflineReq(this);
    }

    /// <summary>Field number for the "from_user_id" field.</summary>
    public const int FromUserIdFieldNumber = 1;
    private ulong fromUserId_;
    /// <summary>
    ///cmd id:	0x050c
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromUserId {
      get { return fromUserId_; }
      set {
        fromUserId_ = value;
      }
    }

    /// <summary>Field number for the "to_user_id" field.</summary>
    public const int ToUserIdFieldNumber = 2;
    private ulong toUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ToUserId {
      get { return toUserId_; }
      set {
        toUserId_ = value;
      }
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 3;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMFileDelOfflineReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMFileDelOfflineReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromUserId != other.FromUserId) return false;
      if (ToUserId != other.ToUserId) return false;
      if (TaskId != other.TaskId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromUserId != 0UL) hash ^= FromUserId.GetHashCode();
      if (ToUserId != 0UL) hash ^= ToUserId.GetHashCode();
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromUserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FromUserId);
      }
      if (ToUserId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ToUserId);
      }
      if (TaskId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromUserId);
      }
      if (ToUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ToUserId);
      }
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMFileDelOfflineReq other) {
      if (other == null) {
        return;
      }
      if (other.FromUserId != 0UL) {
        FromUserId = other.FromUserId;
      }
      if (other.ToUserId != 0UL) {
        ToUserId = other.ToUserId;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromUserId = input.ReadUInt64();
            break;
          }
          case 16: {
            ToUserId = input.ReadUInt64();
            break;
          }
          case 26: {
            TaskId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
