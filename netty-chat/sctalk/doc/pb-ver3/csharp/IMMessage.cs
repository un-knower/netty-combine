// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Message.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IM.Message {

  /// <summary>Holder for reflection information generated from IM.Message.proto</summary>
  public static partial class IMMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for IM.Message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IMMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBJTS5NZXNzYWdlLnByb3RvEgpJTS5NZXNzYWdlGhNJTS5CYXNlRGVmaW5l",
            "LnByb3RvIq4BCglJTU1zZ0RhdGESFAoMZnJvbV91c2VyX2lkGAEgASgEEhUK",
            "DXRvX3Nlc3Npb25faWQYAiABKAQSDgoGbXNnX2lkGAMgASgEEhMKC2NyZWF0",
            "ZV90aW1lGAQgASgNEigKCG1zZ190eXBlGAUgASgOMhYuSU0uQmFzZURlZmlu",
            "ZS5Nc2dUeXBlEhAKCG1zZ19kYXRhGAYgASgMEhMKC2F0dGFjaF9kYXRhGBQg",
            "ASgMInUKDElNTXNnRGF0YUFjaxIPCgd1c2VyX2lkGAEgASgEEhIKCnNlc3Np",
            "b25faWQYAiABKAQSDgoGbXNnX2lkGAMgASgEEjAKDHNlc3Npb25fdHlwZRgE",
            "IAEoDjIaLklNLkJhc2VEZWZpbmUuU2Vzc2lvblR5cGUieQoQSU1Nc2dEYXRh",
            "UmVhZEFjaxIPCgd1c2VyX2lkGAEgASgEEhIKCnNlc3Npb25faWQYAiABKAQS",
            "DgoGbXNnX2lkGAMgASgEEjAKDHNlc3Npb25fdHlwZRgEIAEoDjIaLklNLkJh",
            "c2VEZWZpbmUuU2Vzc2lvblR5cGUifAoTSU1Nc2dEYXRhUmVhZE5vdGlmeRIP",
            "Cgd1c2VyX2lkGAEgASgEEhIKCnNlc3Npb25faWQYAiABKAQSDgoGbXNnX2lk",
            "GAMgASgEEjAKDHNlc3Npb25fdHlwZRgEIAEoDjIaLklNLkJhc2VEZWZpbmUu",
            "U2Vzc2lvblR5cGUiEQoPSU1DbGllbnRUaW1lUmVxIiYKD0lNQ2xpZW50VGlt",
            "ZVJzcBITCgtzZXJ2ZXJfdGltZRgBIAEoDSI5ChFJTVVucmVhZE1zZ0NudFJl",
            "cRIPCgd1c2VyX2lkGAEgASgEEhMKC2F0dGFjaF9kYXRhGBQgASgMIoABChFJ",
            "TVVucmVhZE1zZ0NudFJzcBIPCgd1c2VyX2lkGAEgASgEEhEKCXRvdGFsX2Nu",
            "dBgCIAEoDRIyCg91bnJlYWRpbmZvX2xpc3QYAyADKAsyGS5JTS5CYXNlRGVm",
            "aW5lLlVucmVhZEluZm8SEwoLYXR0YWNoX2RhdGEYFCABKAwipAEKD0lNR2V0",
            "TXNnTGlzdFJlcRIPCgd1c2VyX2lkGAEgASgEEjAKDHNlc3Npb25fdHlwZRgC",
            "IAEoDjIaLklNLkJhc2VEZWZpbmUuU2Vzc2lvblR5cGUSEgoKc2Vzc2lvbl9p",
            "ZBgDIAEoBBIUCgxtc2dfaWRfYmVnaW4YBCABKAQSDwoHbXNnX2NudBgFIAEo",
            "DRITCgthdHRhY2hfZGF0YRgUIAEoDCK9AQoPSU1HZXRNc2dMaXN0UnNwEg8K",
            "B3VzZXJfaWQYASABKAQSMAoMc2Vzc2lvbl90eXBlGAIgASgOMhouSU0uQmFz",
            "ZURlZmluZS5TZXNzaW9uVHlwZRISCgpzZXNzaW9uX2lkGAMgASgEEhQKDG1z",
            "Z19pZF9iZWdpbhgEIAEoBBIoCghtc2dfbGlzdBgFIAMoCzIWLklNLkJhc2VE",
            "ZWZpbmUuTXNnSW5mbxITCgthdHRhY2hfZGF0YRgUIAEoDCKBAQoTSU1HZXRM",
            "YXRlc3RNc2dJZFJlcRIPCgd1c2VyX2lkGAEgASgEEjAKDHNlc3Npb25fdHlw",
            "ZRgCIAEoDjIaLklNLkJhc2VEZWZpbmUuU2Vzc2lvblR5cGUSEgoKc2Vzc2lv",
            "bl9pZBgDIAEoBBITCgthdHRhY2hfZGF0YRgUIAEoDCKYAQoTSU1HZXRMYXRl",
            "c3RNc2dJZFJzcBIPCgd1c2VyX2lkGAEgASgEEjAKDHNlc3Npb25fdHlwZRgC",
            "IAEoDjIaLklNLkJhc2VEZWZpbmUuU2Vzc2lvblR5cGUSEgoKc2Vzc2lvbl9p",
            "ZBgDIAEoBBIVCg1sYXRlc3RfbXNnX2lkGAQgASgEEhMKC2F0dGFjaF9kYXRh",
            "GBQgASgMIpIBCg9JTUdldE1zZ0J5SWRSZXESDwoHdXNlcl9pZBgBIAEoBBIw",
            "CgxzZXNzaW9uX3R5cGUYAiABKA4yGi5JTS5CYXNlRGVmaW5lLlNlc3Npb25U",
            "eXBlEhIKCnNlc3Npb25faWQYAyABKAQSEwoLbXNnX2lkX2xpc3QYBCADKAQS",
            "EwoLYXR0YWNoX2RhdGEYFCABKAwipwEKD0lNR2V0TXNnQnlJZFJzcBIPCgd1",
            "c2VyX2lkGAEgASgEEjAKDHNlc3Npb25fdHlwZRgCIAEoDjIaLklNLkJhc2VE",
            "ZWZpbmUuU2Vzc2lvblR5cGUSEgoKc2Vzc2lvbl9pZBgDIAEoBBIoCghtc2df",
            "bGlzdBgEIAMoCzIWLklNLkJhc2VEZWZpbmUuTXNnSW5mbxITCgthdHRhY2hf",
            "ZGF0YRgUIAEoDEIiCh5jb20uYmx0LnRhbGsuY29tbW9uLmNvZGUucHJvdG9I",
            "A2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::IM.BaseDefine.IMBaseDefineReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Message.IMMsgData), global::IM.Message.IMMsgData.Parser, new[]{ "FromUserId", "ToSessionId", "MsgId", "CreateTime", "MsgType", "MsgData", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Message.IMMsgDataAck), global::IM.Message.IMMsgDataAck.Parser, new[]{ "UserId", "SessionId", "MsgId", "SessionType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Message.IMMsgDataReadAck), global::IM.Message.IMMsgDataReadAck.Parser, new[]{ "UserId", "SessionId", "MsgId", "SessionType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Message.IMMsgDataReadNotify), global::IM.Message.IMMsgDataReadNotify.Parser, new[]{ "UserId", "SessionId", "MsgId", "SessionType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Message.IMClientTimeReq), global::IM.Message.IMClientTimeReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Message.IMClientTimeRsp), global::IM.Message.IMClientTimeRsp.Parser, new[]{ "ServerTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Message.IMUnreadMsgCntReq), global::IM.Message.IMUnreadMsgCntReq.Parser, new[]{ "UserId", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Message.IMUnreadMsgCntRsp), global::IM.Message.IMUnreadMsgCntRsp.Parser, new[]{ "UserId", "TotalCnt", "UnreadinfoList", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Message.IMGetMsgListReq), global::IM.Message.IMGetMsgListReq.Parser, new[]{ "UserId", "SessionType", "SessionId", "MsgIdBegin", "MsgCnt", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Message.IMGetMsgListRsp), global::IM.Message.IMGetMsgListRsp.Parser, new[]{ "UserId", "SessionType", "SessionId", "MsgIdBegin", "MsgList", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Message.IMGetLatestMsgIdReq), global::IM.Message.IMGetLatestMsgIdReq.Parser, new[]{ "UserId", "SessionType", "SessionId", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Message.IMGetLatestMsgIdRsp), global::IM.Message.IMGetLatestMsgIdRsp.Parser, new[]{ "UserId", "SessionType", "SessionId", "LatestMsgId", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Message.IMGetMsgByIdReq), global::IM.Message.IMGetMsgByIdReq.Parser, new[]{ "UserId", "SessionType", "SessionId", "MsgIdList", "AttachData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IM.Message.IMGetMsgByIdRsp), global::IM.Message.IMGetMsgByIdRsp.Parser, new[]{ "UserId", "SessionType", "SessionId", "MsgList", "AttachData" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///service id  0x0003
  /// </summary>
  public sealed partial class IMMsgData : pb::IMessage<IMMsgData> {
    private static readonly pb::MessageParser<IMMsgData> _parser = new pb::MessageParser<IMMsgData>(() => new IMMsgData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMMsgData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Message.IMMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMMsgData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMMsgData(IMMsgData other) : this() {
      fromUserId_ = other.fromUserId_;
      toSessionId_ = other.toSessionId_;
      msgId_ = other.msgId_;
      createTime_ = other.createTime_;
      msgType_ = other.msgType_;
      msgData_ = other.msgData_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMMsgData Clone() {
      return new IMMsgData(this);
    }

    /// <summary>Field number for the "from_user_id" field.</summary>
    public const int FromUserIdFieldNumber = 1;
    private ulong fromUserId_;
    /// <summary>
    ///cmd id:		0x0301
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromUserId {
      get { return fromUserId_; }
      set {
        fromUserId_ = value;
      }
    }

    /// <summary>Field number for the "to_session_id" field.</summary>
    public const int ToSessionIdFieldNumber = 2;
    private ulong toSessionId_;
    /// <summary>
    ///消息接受方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ToSessionId {
      get { return toSessionId_; }
      set {
        toSessionId_ = value;
      }
    }

    /// <summary>Field number for the "msg_id" field.</summary>
    public const int MsgIdFieldNumber = 3;
    private ulong msgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 4;
    private uint createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "msg_type" field.</summary>
    public const int MsgTypeFieldNumber = 5;
    private global::IM.BaseDefine.MsgType msgType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.MsgType MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    /// <summary>Field number for the "msg_data" field.</summary>
    public const int MsgDataFieldNumber = 6;
    private pb::ByteString msgData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MsgData {
      get { return msgData_; }
      set {
        msgData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMMsgData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMMsgData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromUserId != other.FromUserId) return false;
      if (ToSessionId != other.ToSessionId) return false;
      if (MsgId != other.MsgId) return false;
      if (CreateTime != other.CreateTime) return false;
      if (MsgType != other.MsgType) return false;
      if (MsgData != other.MsgData) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromUserId != 0UL) hash ^= FromUserId.GetHashCode();
      if (ToSessionId != 0UL) hash ^= ToSessionId.GetHashCode();
      if (MsgId != 0UL) hash ^= MsgId.GetHashCode();
      if (CreateTime != 0) hash ^= CreateTime.GetHashCode();
      if (MsgType != 0) hash ^= MsgType.GetHashCode();
      if (MsgData.Length != 0) hash ^= MsgData.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromUserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FromUserId);
      }
      if (ToSessionId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ToSessionId);
      }
      if (MsgId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(MsgId);
      }
      if (CreateTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CreateTime);
      }
      if (MsgType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) MsgType);
      }
      if (MsgData.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(MsgData);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromUserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromUserId);
      }
      if (ToSessionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ToSessionId);
      }
      if (MsgId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgId);
      }
      if (CreateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateTime);
      }
      if (MsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MsgType);
      }
      if (MsgData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MsgData);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMMsgData other) {
      if (other == null) {
        return;
      }
      if (other.FromUserId != 0UL) {
        FromUserId = other.FromUserId;
      }
      if (other.ToSessionId != 0UL) {
        ToSessionId = other.ToSessionId;
      }
      if (other.MsgId != 0UL) {
        MsgId = other.MsgId;
      }
      if (other.CreateTime != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.MsgType != 0) {
        MsgType = other.MsgType;
      }
      if (other.MsgData.Length != 0) {
        MsgData = other.MsgData;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromUserId = input.ReadUInt64();
            break;
          }
          case 16: {
            ToSessionId = input.ReadUInt64();
            break;
          }
          case 24: {
            MsgId = input.ReadUInt64();
            break;
          }
          case 32: {
            CreateTime = input.ReadUInt32();
            break;
          }
          case 40: {
            msgType_ = (global::IM.BaseDefine.MsgType) input.ReadEnum();
            break;
          }
          case 50: {
            MsgData = input.ReadBytes();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMMsgDataAck : pb::IMessage<IMMsgDataAck> {
    private static readonly pb::MessageParser<IMMsgDataAck> _parser = new pb::MessageParser<IMMsgDataAck>(() => new IMMsgDataAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMMsgDataAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Message.IMMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMMsgDataAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMMsgDataAck(IMMsgDataAck other) : this() {
      userId_ = other.userId_;
      sessionId_ = other.sessionId_;
      msgId_ = other.msgId_;
      sessionType_ = other.sessionType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMMsgDataAck Clone() {
      return new IMMsgDataAck(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x0302
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 2;
    private ulong sessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = value;
      }
    }

    /// <summary>Field number for the "msg_id" field.</summary>
    public const int MsgIdFieldNumber = 3;
    private ulong msgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    /// <summary>Field number for the "session_type" field.</summary>
    public const int SessionTypeFieldNumber = 4;
    private global::IM.BaseDefine.SessionType sessionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.SessionType SessionType {
      get { return sessionType_; }
      set {
        sessionType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMMsgDataAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMMsgDataAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (SessionId != other.SessionId) return false;
      if (MsgId != other.MsgId) return false;
      if (SessionType != other.SessionType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (SessionId != 0UL) hash ^= SessionId.GetHashCode();
      if (MsgId != 0UL) hash ^= MsgId.GetHashCode();
      if (SessionType != 0) hash ^= SessionType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (SessionId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SessionId);
      }
      if (MsgId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(MsgId);
      }
      if (SessionType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) SessionType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (SessionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SessionId);
      }
      if (MsgId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgId);
      }
      if (SessionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SessionType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMMsgDataAck other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.SessionId != 0UL) {
        SessionId = other.SessionId;
      }
      if (other.MsgId != 0UL) {
        MsgId = other.MsgId;
      }
      if (other.SessionType != 0) {
        SessionType = other.SessionType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            SessionId = input.ReadUInt64();
            break;
          }
          case 24: {
            MsgId = input.ReadUInt64();
            break;
          }
          case 32: {
            sessionType_ = (global::IM.BaseDefine.SessionType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMMsgDataReadAck : pb::IMessage<IMMsgDataReadAck> {
    private static readonly pb::MessageParser<IMMsgDataReadAck> _parser = new pb::MessageParser<IMMsgDataReadAck>(() => new IMMsgDataReadAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMMsgDataReadAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Message.IMMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMMsgDataReadAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMMsgDataReadAck(IMMsgDataReadAck other) : this() {
      userId_ = other.userId_;
      sessionId_ = other.sessionId_;
      msgId_ = other.msgId_;
      sessionType_ = other.sessionType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMMsgDataReadAck Clone() {
      return new IMMsgDataReadAck(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x0303
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 2;
    private ulong sessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = value;
      }
    }

    /// <summary>Field number for the "msg_id" field.</summary>
    public const int MsgIdFieldNumber = 3;
    private ulong msgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    /// <summary>Field number for the "session_type" field.</summary>
    public const int SessionTypeFieldNumber = 4;
    private global::IM.BaseDefine.SessionType sessionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.SessionType SessionType {
      get { return sessionType_; }
      set {
        sessionType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMMsgDataReadAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMMsgDataReadAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (SessionId != other.SessionId) return false;
      if (MsgId != other.MsgId) return false;
      if (SessionType != other.SessionType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (SessionId != 0UL) hash ^= SessionId.GetHashCode();
      if (MsgId != 0UL) hash ^= MsgId.GetHashCode();
      if (SessionType != 0) hash ^= SessionType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (SessionId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SessionId);
      }
      if (MsgId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(MsgId);
      }
      if (SessionType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) SessionType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (SessionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SessionId);
      }
      if (MsgId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgId);
      }
      if (SessionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SessionType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMMsgDataReadAck other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.SessionId != 0UL) {
        SessionId = other.SessionId;
      }
      if (other.MsgId != 0UL) {
        MsgId = other.MsgId;
      }
      if (other.SessionType != 0) {
        SessionType = other.SessionType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            SessionId = input.ReadUInt64();
            break;
          }
          case 24: {
            MsgId = input.ReadUInt64();
            break;
          }
          case 32: {
            sessionType_ = (global::IM.BaseDefine.SessionType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMMsgDataReadNotify : pb::IMessage<IMMsgDataReadNotify> {
    private static readonly pb::MessageParser<IMMsgDataReadNotify> _parser = new pb::MessageParser<IMMsgDataReadNotify>(() => new IMMsgDataReadNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMMsgDataReadNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Message.IMMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMMsgDataReadNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMMsgDataReadNotify(IMMsgDataReadNotify other) : this() {
      userId_ = other.userId_;
      sessionId_ = other.sessionId_;
      msgId_ = other.msgId_;
      sessionType_ = other.sessionType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMMsgDataReadNotify Clone() {
      return new IMMsgDataReadNotify(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x0304
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 2;
    private ulong sessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = value;
      }
    }

    /// <summary>Field number for the "msg_id" field.</summary>
    public const int MsgIdFieldNumber = 3;
    private ulong msgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    /// <summary>Field number for the "session_type" field.</summary>
    public const int SessionTypeFieldNumber = 4;
    private global::IM.BaseDefine.SessionType sessionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.SessionType SessionType {
      get { return sessionType_; }
      set {
        sessionType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMMsgDataReadNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMMsgDataReadNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (SessionId != other.SessionId) return false;
      if (MsgId != other.MsgId) return false;
      if (SessionType != other.SessionType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (SessionId != 0UL) hash ^= SessionId.GetHashCode();
      if (MsgId != 0UL) hash ^= MsgId.GetHashCode();
      if (SessionType != 0) hash ^= SessionType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (SessionId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SessionId);
      }
      if (MsgId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(MsgId);
      }
      if (SessionType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) SessionType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (SessionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SessionId);
      }
      if (MsgId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgId);
      }
      if (SessionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SessionType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMMsgDataReadNotify other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.SessionId != 0UL) {
        SessionId = other.SessionId;
      }
      if (other.MsgId != 0UL) {
        MsgId = other.MsgId;
      }
      if (other.SessionType != 0) {
        SessionType = other.SessionType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            SessionId = input.ReadUInt64();
            break;
          }
          case 24: {
            MsgId = input.ReadUInt64();
            break;
          }
          case 32: {
            sessionType_ = (global::IM.BaseDefine.SessionType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///cmd id:		0x0305
  /// </summary>
  public sealed partial class IMClientTimeReq : pb::IMessage<IMClientTimeReq> {
    private static readonly pb::MessageParser<IMClientTimeReq> _parser = new pb::MessageParser<IMClientTimeReq>(() => new IMClientTimeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMClientTimeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Message.IMMessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMClientTimeReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMClientTimeReq(IMClientTimeReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMClientTimeReq Clone() {
      return new IMClientTimeReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMClientTimeReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMClientTimeReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMClientTimeReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class IMClientTimeRsp : pb::IMessage<IMClientTimeRsp> {
    private static readonly pb::MessageParser<IMClientTimeRsp> _parser = new pb::MessageParser<IMClientTimeRsp>(() => new IMClientTimeRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMClientTimeRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Message.IMMessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMClientTimeRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMClientTimeRsp(IMClientTimeRsp other) : this() {
      serverTime_ = other.serverTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMClientTimeRsp Clone() {
      return new IMClientTimeRsp(this);
    }

    /// <summary>Field number for the "server_time" field.</summary>
    public const int ServerTimeFieldNumber = 1;
    private uint serverTime_;
    /// <summary>
    ///cmd id:		0x0306
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMClientTimeRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMClientTimeRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerTime != other.ServerTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerTime != 0) hash ^= ServerTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMClientTimeRsp other) {
      if (other == null) {
        return;
      }
      if (other.ServerTime != 0) {
        ServerTime = other.ServerTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMUnreadMsgCntReq : pb::IMessage<IMUnreadMsgCntReq> {
    private static readonly pb::MessageParser<IMUnreadMsgCntReq> _parser = new pb::MessageParser<IMUnreadMsgCntReq>(() => new IMUnreadMsgCntReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMUnreadMsgCntReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Message.IMMessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUnreadMsgCntReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUnreadMsgCntReq(IMUnreadMsgCntReq other) : this() {
      userId_ = other.userId_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUnreadMsgCntReq Clone() {
      return new IMUnreadMsgCntReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x0307
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMUnreadMsgCntReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMUnreadMsgCntReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMUnreadMsgCntReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMUnreadMsgCntRsp : pb::IMessage<IMUnreadMsgCntRsp> {
    private static readonly pb::MessageParser<IMUnreadMsgCntRsp> _parser = new pb::MessageParser<IMUnreadMsgCntRsp>(() => new IMUnreadMsgCntRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMUnreadMsgCntRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Message.IMMessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUnreadMsgCntRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUnreadMsgCntRsp(IMUnreadMsgCntRsp other) : this() {
      userId_ = other.userId_;
      totalCnt_ = other.totalCnt_;
      unreadinfoList_ = other.unreadinfoList_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMUnreadMsgCntRsp Clone() {
      return new IMUnreadMsgCntRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x0308
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "total_cnt" field.</summary>
    public const int TotalCntFieldNumber = 2;
    private uint totalCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalCnt {
      get { return totalCnt_; }
      set {
        totalCnt_ = value;
      }
    }

    /// <summary>Field number for the "unreadinfo_list" field.</summary>
    public const int UnreadinfoListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::IM.BaseDefine.UnreadInfo> _repeated_unreadinfoList_codec
        = pb::FieldCodec.ForMessage(26, global::IM.BaseDefine.UnreadInfo.Parser);
    private readonly pbc::RepeatedField<global::IM.BaseDefine.UnreadInfo> unreadinfoList_ = new pbc::RepeatedField<global::IM.BaseDefine.UnreadInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IM.BaseDefine.UnreadInfo> UnreadinfoList {
      get { return unreadinfoList_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMUnreadMsgCntRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMUnreadMsgCntRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (TotalCnt != other.TotalCnt) return false;
      if(!unreadinfoList_.Equals(other.unreadinfoList_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (TotalCnt != 0) hash ^= TotalCnt.GetHashCode();
      hash ^= unreadinfoList_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (TotalCnt != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TotalCnt);
      }
      unreadinfoList_.WriteTo(output, _repeated_unreadinfoList_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (TotalCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalCnt);
      }
      size += unreadinfoList_.CalculateSize(_repeated_unreadinfoList_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMUnreadMsgCntRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.TotalCnt != 0) {
        TotalCnt = other.TotalCnt;
      }
      unreadinfoList_.Add(other.unreadinfoList_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            TotalCnt = input.ReadUInt32();
            break;
          }
          case 26: {
            unreadinfoList_.AddEntriesFrom(input, _repeated_unreadinfoList_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMGetMsgListReq : pb::IMessage<IMGetMsgListReq> {
    private static readonly pb::MessageParser<IMGetMsgListReq> _parser = new pb::MessageParser<IMGetMsgListReq>(() => new IMGetMsgListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMGetMsgListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Message.IMMessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetMsgListReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetMsgListReq(IMGetMsgListReq other) : this() {
      userId_ = other.userId_;
      sessionType_ = other.sessionType_;
      sessionId_ = other.sessionId_;
      msgIdBegin_ = other.msgIdBegin_;
      msgCnt_ = other.msgCnt_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetMsgListReq Clone() {
      return new IMGetMsgListReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x0309
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "session_type" field.</summary>
    public const int SessionTypeFieldNumber = 2;
    private global::IM.BaseDefine.SessionType sessionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.SessionType SessionType {
      get { return sessionType_; }
      set {
        sessionType_ = value;
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 3;
    private ulong sessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = value;
      }
    }

    /// <summary>Field number for the "msg_id_begin" field.</summary>
    public const int MsgIdBeginFieldNumber = 4;
    private ulong msgIdBegin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgIdBegin {
      get { return msgIdBegin_; }
      set {
        msgIdBegin_ = value;
      }
    }

    /// <summary>Field number for the "msg_cnt" field.</summary>
    public const int MsgCntFieldNumber = 5;
    private uint msgCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MsgCnt {
      get { return msgCnt_; }
      set {
        msgCnt_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMGetMsgListReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMGetMsgListReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (SessionType != other.SessionType) return false;
      if (SessionId != other.SessionId) return false;
      if (MsgIdBegin != other.MsgIdBegin) return false;
      if (MsgCnt != other.MsgCnt) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (SessionType != 0) hash ^= SessionType.GetHashCode();
      if (SessionId != 0UL) hash ^= SessionId.GetHashCode();
      if (MsgIdBegin != 0UL) hash ^= MsgIdBegin.GetHashCode();
      if (MsgCnt != 0) hash ^= MsgCnt.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (SessionType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SessionType);
      }
      if (SessionId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SessionId);
      }
      if (MsgIdBegin != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(MsgIdBegin);
      }
      if (MsgCnt != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MsgCnt);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (SessionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SessionType);
      }
      if (SessionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SessionId);
      }
      if (MsgIdBegin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgIdBegin);
      }
      if (MsgCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MsgCnt);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMGetMsgListReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.SessionType != 0) {
        SessionType = other.SessionType;
      }
      if (other.SessionId != 0UL) {
        SessionId = other.SessionId;
      }
      if (other.MsgIdBegin != 0UL) {
        MsgIdBegin = other.MsgIdBegin;
      }
      if (other.MsgCnt != 0) {
        MsgCnt = other.MsgCnt;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            sessionType_ = (global::IM.BaseDefine.SessionType) input.ReadEnum();
            break;
          }
          case 24: {
            SessionId = input.ReadUInt64();
            break;
          }
          case 32: {
            MsgIdBegin = input.ReadUInt64();
            break;
          }
          case 40: {
            MsgCnt = input.ReadUInt32();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///对于群而言，如果消息数目返回的数值小于请求的cnt,则表示群的消息能拉取的到头了，更早的消息没有权限拉取。
  ///如果msg_cnt 和 msg_id_begin计算得到的最早消息id与实际返回的最早消息id不一致，说明服务器消息有缺失，需要
  ///客户端做一个缺失标记，避免下次再次拉取。
  /// </summary>
  public sealed partial class IMGetMsgListRsp : pb::IMessage<IMGetMsgListRsp> {
    private static readonly pb::MessageParser<IMGetMsgListRsp> _parser = new pb::MessageParser<IMGetMsgListRsp>(() => new IMGetMsgListRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMGetMsgListRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Message.IMMessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetMsgListRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetMsgListRsp(IMGetMsgListRsp other) : this() {
      userId_ = other.userId_;
      sessionType_ = other.sessionType_;
      sessionId_ = other.sessionId_;
      msgIdBegin_ = other.msgIdBegin_;
      msgList_ = other.msgList_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetMsgListRsp Clone() {
      return new IMGetMsgListRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x030a
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "session_type" field.</summary>
    public const int SessionTypeFieldNumber = 2;
    private global::IM.BaseDefine.SessionType sessionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.SessionType SessionType {
      get { return sessionType_; }
      set {
        sessionType_ = value;
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 3;
    private ulong sessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = value;
      }
    }

    /// <summary>Field number for the "msg_id_begin" field.</summary>
    public const int MsgIdBeginFieldNumber = 4;
    private ulong msgIdBegin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgIdBegin {
      get { return msgIdBegin_; }
      set {
        msgIdBegin_ = value;
      }
    }

    /// <summary>Field number for the "msg_list" field.</summary>
    public const int MsgListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::IM.BaseDefine.MsgInfo> _repeated_msgList_codec
        = pb::FieldCodec.ForMessage(42, global::IM.BaseDefine.MsgInfo.Parser);
    private readonly pbc::RepeatedField<global::IM.BaseDefine.MsgInfo> msgList_ = new pbc::RepeatedField<global::IM.BaseDefine.MsgInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IM.BaseDefine.MsgInfo> MsgList {
      get { return msgList_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMGetMsgListRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMGetMsgListRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (SessionType != other.SessionType) return false;
      if (SessionId != other.SessionId) return false;
      if (MsgIdBegin != other.MsgIdBegin) return false;
      if(!msgList_.Equals(other.msgList_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (SessionType != 0) hash ^= SessionType.GetHashCode();
      if (SessionId != 0UL) hash ^= SessionId.GetHashCode();
      if (MsgIdBegin != 0UL) hash ^= MsgIdBegin.GetHashCode();
      hash ^= msgList_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (SessionType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SessionType);
      }
      if (SessionId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SessionId);
      }
      if (MsgIdBegin != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(MsgIdBegin);
      }
      msgList_.WriteTo(output, _repeated_msgList_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (SessionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SessionType);
      }
      if (SessionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SessionId);
      }
      if (MsgIdBegin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgIdBegin);
      }
      size += msgList_.CalculateSize(_repeated_msgList_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMGetMsgListRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.SessionType != 0) {
        SessionType = other.SessionType;
      }
      if (other.SessionId != 0UL) {
        SessionId = other.SessionId;
      }
      if (other.MsgIdBegin != 0UL) {
        MsgIdBegin = other.MsgIdBegin;
      }
      msgList_.Add(other.msgList_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            sessionType_ = (global::IM.BaseDefine.SessionType) input.ReadEnum();
            break;
          }
          case 24: {
            SessionId = input.ReadUInt64();
            break;
          }
          case 32: {
            MsgIdBegin = input.ReadUInt64();
            break;
          }
          case 42: {
            msgList_.AddEntriesFrom(input, _repeated_msgList_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMGetLatestMsgIdReq : pb::IMessage<IMGetLatestMsgIdReq> {
    private static readonly pb::MessageParser<IMGetLatestMsgIdReq> _parser = new pb::MessageParser<IMGetLatestMsgIdReq>(() => new IMGetLatestMsgIdReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMGetLatestMsgIdReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Message.IMMessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetLatestMsgIdReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetLatestMsgIdReq(IMGetLatestMsgIdReq other) : this() {
      userId_ = other.userId_;
      sessionType_ = other.sessionType_;
      sessionId_ = other.sessionId_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetLatestMsgIdReq Clone() {
      return new IMGetLatestMsgIdReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id: 		0x030b
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "session_type" field.</summary>
    public const int SessionTypeFieldNumber = 2;
    private global::IM.BaseDefine.SessionType sessionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.SessionType SessionType {
      get { return sessionType_; }
      set {
        sessionType_ = value;
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 3;
    private ulong sessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMGetLatestMsgIdReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMGetLatestMsgIdReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (SessionType != other.SessionType) return false;
      if (SessionId != other.SessionId) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (SessionType != 0) hash ^= SessionType.GetHashCode();
      if (SessionId != 0UL) hash ^= SessionId.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (SessionType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SessionType);
      }
      if (SessionId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SessionId);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (SessionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SessionType);
      }
      if (SessionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SessionId);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMGetLatestMsgIdReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.SessionType != 0) {
        SessionType = other.SessionType;
      }
      if (other.SessionId != 0UL) {
        SessionId = other.SessionId;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            sessionType_ = (global::IM.BaseDefine.SessionType) input.ReadEnum();
            break;
          }
          case 24: {
            SessionId = input.ReadUInt64();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMGetLatestMsgIdRsp : pb::IMessage<IMGetLatestMsgIdRsp> {
    private static readonly pb::MessageParser<IMGetLatestMsgIdRsp> _parser = new pb::MessageParser<IMGetLatestMsgIdRsp>(() => new IMGetLatestMsgIdRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMGetLatestMsgIdRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Message.IMMessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetLatestMsgIdRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetLatestMsgIdRsp(IMGetLatestMsgIdRsp other) : this() {
      userId_ = other.userId_;
      sessionType_ = other.sessionType_;
      sessionId_ = other.sessionId_;
      latestMsgId_ = other.latestMsgId_;
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetLatestMsgIdRsp Clone() {
      return new IMGetLatestMsgIdRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x030c
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "session_type" field.</summary>
    public const int SessionTypeFieldNumber = 2;
    private global::IM.BaseDefine.SessionType sessionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.SessionType SessionType {
      get { return sessionType_; }
      set {
        sessionType_ = value;
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 3;
    private ulong sessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = value;
      }
    }

    /// <summary>Field number for the "latest_msg_id" field.</summary>
    public const int LatestMsgIdFieldNumber = 4;
    private ulong latestMsgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LatestMsgId {
      get { return latestMsgId_; }
      set {
        latestMsgId_ = value;
      }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMGetLatestMsgIdRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMGetLatestMsgIdRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (SessionType != other.SessionType) return false;
      if (SessionId != other.SessionId) return false;
      if (LatestMsgId != other.LatestMsgId) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (SessionType != 0) hash ^= SessionType.GetHashCode();
      if (SessionId != 0UL) hash ^= SessionId.GetHashCode();
      if (LatestMsgId != 0UL) hash ^= LatestMsgId.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (SessionType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SessionType);
      }
      if (SessionId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SessionId);
      }
      if (LatestMsgId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(LatestMsgId);
      }
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (SessionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SessionType);
      }
      if (SessionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SessionId);
      }
      if (LatestMsgId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LatestMsgId);
      }
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMGetLatestMsgIdRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.SessionType != 0) {
        SessionType = other.SessionType;
      }
      if (other.SessionId != 0UL) {
        SessionId = other.SessionId;
      }
      if (other.LatestMsgId != 0UL) {
        LatestMsgId = other.LatestMsgId;
      }
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            sessionType_ = (global::IM.BaseDefine.SessionType) input.ReadEnum();
            break;
          }
          case 24: {
            SessionId = input.ReadUInt64();
            break;
          }
          case 32: {
            LatestMsgId = input.ReadUInt64();
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMGetMsgByIdReq : pb::IMessage<IMGetMsgByIdReq> {
    private static readonly pb::MessageParser<IMGetMsgByIdReq> _parser = new pb::MessageParser<IMGetMsgByIdReq>(() => new IMGetMsgByIdReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMGetMsgByIdReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Message.IMMessageReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetMsgByIdReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetMsgByIdReq(IMGetMsgByIdReq other) : this() {
      userId_ = other.userId_;
      sessionType_ = other.sessionType_;
      sessionId_ = other.sessionId_;
      msgIdList_ = other.msgIdList_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetMsgByIdReq Clone() {
      return new IMGetMsgByIdReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id: 		0x030d
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "session_type" field.</summary>
    public const int SessionTypeFieldNumber = 2;
    private global::IM.BaseDefine.SessionType sessionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.SessionType SessionType {
      get { return sessionType_; }
      set {
        sessionType_ = value;
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 3;
    private ulong sessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = value;
      }
    }

    /// <summary>Field number for the "msg_id_list" field.</summary>
    public const int MsgIdListFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_msgIdList_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> msgIdList_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> MsgIdList {
      get { return msgIdList_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMGetMsgByIdReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMGetMsgByIdReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (SessionType != other.SessionType) return false;
      if (SessionId != other.SessionId) return false;
      if(!msgIdList_.Equals(other.msgIdList_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (SessionType != 0) hash ^= SessionType.GetHashCode();
      if (SessionId != 0UL) hash ^= SessionId.GetHashCode();
      hash ^= msgIdList_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (SessionType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SessionType);
      }
      if (SessionId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SessionId);
      }
      msgIdList_.WriteTo(output, _repeated_msgIdList_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (SessionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SessionType);
      }
      if (SessionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SessionId);
      }
      size += msgIdList_.CalculateSize(_repeated_msgIdList_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMGetMsgByIdReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.SessionType != 0) {
        SessionType = other.SessionType;
      }
      if (other.SessionId != 0UL) {
        SessionId = other.SessionId;
      }
      msgIdList_.Add(other.msgIdList_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            sessionType_ = (global::IM.BaseDefine.SessionType) input.ReadEnum();
            break;
          }
          case 24: {
            SessionId = input.ReadUInt64();
            break;
          }
          case 34:
          case 32: {
            msgIdList_.AddEntriesFrom(input, _repeated_msgIdList_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IMGetMsgByIdRsp : pb::IMessage<IMGetMsgByIdRsp> {
    private static readonly pb::MessageParser<IMGetMsgByIdRsp> _parser = new pb::MessageParser<IMGetMsgByIdRsp>(() => new IMGetMsgByIdRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IMGetMsgByIdRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.Message.IMMessageReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetMsgByIdRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetMsgByIdRsp(IMGetMsgByIdRsp other) : this() {
      userId_ = other.userId_;
      sessionType_ = other.sessionType_;
      sessionId_ = other.sessionId_;
      msgList_ = other.msgList_.Clone();
      attachData_ = other.attachData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IMGetMsgByIdRsp Clone() {
      return new IMGetMsgByIdRsp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    /// <summary>
    ///cmd id:		0x030e
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "session_type" field.</summary>
    public const int SessionTypeFieldNumber = 2;
    private global::IM.BaseDefine.SessionType sessionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IM.BaseDefine.SessionType SessionType {
      get { return sessionType_; }
      set {
        sessionType_ = value;
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 3;
    private ulong sessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = value;
      }
    }

    /// <summary>Field number for the "msg_list" field.</summary>
    public const int MsgListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::IM.BaseDefine.MsgInfo> _repeated_msgList_codec
        = pb::FieldCodec.ForMessage(34, global::IM.BaseDefine.MsgInfo.Parser);
    private readonly pbc::RepeatedField<global::IM.BaseDefine.MsgInfo> msgList_ = new pbc::RepeatedField<global::IM.BaseDefine.MsgInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IM.BaseDefine.MsgInfo> MsgList {
      get { return msgList_; }
    }

    /// <summary>Field number for the "attach_data" field.</summary>
    public const int AttachDataFieldNumber = 20;
    private pb::ByteString attachData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttachData {
      get { return attachData_; }
      set {
        attachData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IMGetMsgByIdRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IMGetMsgByIdRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (SessionType != other.SessionType) return false;
      if (SessionId != other.SessionId) return false;
      if(!msgList_.Equals(other.msgList_)) return false;
      if (AttachData != other.AttachData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (SessionType != 0) hash ^= SessionType.GetHashCode();
      if (SessionId != 0UL) hash ^= SessionId.GetHashCode();
      hash ^= msgList_.GetHashCode();
      if (AttachData.Length != 0) hash ^= AttachData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (SessionType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SessionType);
      }
      if (SessionId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SessionId);
      }
      msgList_.WriteTo(output, _repeated_msgList_codec);
      if (AttachData.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AttachData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (SessionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SessionType);
      }
      if (SessionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SessionId);
      }
      size += msgList_.CalculateSize(_repeated_msgList_codec);
      if (AttachData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AttachData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IMGetMsgByIdRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.SessionType != 0) {
        SessionType = other.SessionType;
      }
      if (other.SessionId != 0UL) {
        SessionId = other.SessionId;
      }
      msgList_.Add(other.msgList_);
      if (other.AttachData.Length != 0) {
        AttachData = other.AttachData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 16: {
            sessionType_ = (global::IM.BaseDefine.SessionType) input.ReadEnum();
            break;
          }
          case 24: {
            SessionId = input.ReadUInt64();
            break;
          }
          case 34: {
            msgList_.AddEntriesFrom(input, _repeated_msgList_codec);
            break;
          }
          case 162: {
            AttachData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
